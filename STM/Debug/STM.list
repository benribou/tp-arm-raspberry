
STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005318  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  080054e8  080054e8  000064e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056d4  080056d4  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  080056d4  080056d4  000066d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056dc  080056dc  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056dc  080056dc  000066dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080056e0  080056e0  000066e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080056e4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  2000005c  08005740  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08005740  00007280  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e7b3  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002426  00000000  00000000  0001583f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e88  00000000  00000000  00017c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b59  00000000  00000000  00018af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022383  00000000  00000000  00019649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000111e9  00000000  00000000  0003b9cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d18e4  00000000  00000000  0004cbb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011e499  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045e0  00000000  00000000  0011e4dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  00122abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080054d0 	.word	0x080054d0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	080054d0 	.word	0x080054d0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <ReadTargetTemperatureFromFlash>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t ReadTargetTemperatureFromFlash(void) {
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
    return *((uint16_t*)FLASH_USER_START_ADDR) & 0xFF;
 80005b4:	4b03      	ldr	r3, [pc, #12]	@ (80005c4 <ReadTargetTemperatureFromFlash+0x14>)
 80005b6:	881b      	ldrh	r3, [r3, #0]
 80005b8:	b2db      	uxtb	r3, r3
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr
 80005c4:	0801fc00 	.word	0x0801fc00

080005c8 <SaveTargetTemperature>:

void SaveTargetTemperature(uint8_t target) {
 80005c8:	b5b0      	push	{r4, r5, r7, lr}
 80005ca:	b088      	sub	sp, #32
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
    HAL_FLASH_Unlock();
 80005d2:	f001 f81d 	bl	8001610 <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef EraseInitStruct;
    uint32_t SectorError = 0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60bb      	str	r3, [r7, #8]
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
    EraseInitStruct.Sector = FLASH_SECTOR_4;
 80005de:	2304      	movs	r3, #4
 80005e0:	617b      	str	r3, [r7, #20]
    EraseInitStruct.NbSectors = 1;
 80005e2:	2301      	movs	r3, #1
 80005e4:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80005e6:	2302      	movs	r3, #2
 80005e8:	61fb      	str	r3, [r7, #28]

    if (HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK) {
 80005ea:	f107 0208 	add.w	r2, r7, #8
 80005ee:	f107 030c 	add.w	r3, r7, #12
 80005f2:	4611      	mov	r1, r2
 80005f4:	4618      	mov	r0, r3
 80005f6:	f001 f97d 	bl	80018f4 <HAL_FLASHEx_Erase>
        // Gérer l'erreur d'effacement
    }

    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, FLASH_USER_START_ADDR, (uint16_t)target) != HAL_OK) {
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	2200      	movs	r2, #0
 80005fe:	461c      	mov	r4, r3
 8000600:	4615      	mov	r5, r2
 8000602:	4622      	mov	r2, r4
 8000604:	462b      	mov	r3, r5
 8000606:	4905      	ldr	r1, [pc, #20]	@ (800061c <SaveTargetTemperature+0x54>)
 8000608:	2001      	movs	r0, #1
 800060a:	f000 ffad 	bl	8001568 <HAL_FLASH_Program>
        // Gérer l'erreur de programmation
    }

    HAL_FLASH_Lock();
 800060e:	f001 f821 	bl	8001654 <HAL_FLASH_Lock>
}
 8000612:	bf00      	nop
 8000614:	3720      	adds	r7, #32
 8000616:	46bd      	mov	sp, r7
 8000618:	bdb0      	pop	{r4, r5, r7, pc}
 800061a:	bf00      	nop
 800061c:	0801fc00 	.word	0x0801fc00

08000620 <set_target_temperature>:



void set_target_temperature(uint8_t value) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	71fb      	strb	r3, [r7, #7]
	SaveTargetTemperature(value);
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff ffcb 	bl	80005c8 <SaveTargetTemperature>
}
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}

0800063a <get_target_temperature>:

uint8_t get_target_temperature() {
 800063a:	b580      	push	{r7, lr}
 800063c:	af00      	add	r7, sp, #0
	return ReadTargetTemperatureFromFlash();
 800063e:	f7ff ffb7 	bl	80005b0 <ReadTargetTemperatureFromFlash>
 8000642:	4603      	mov	r3, r0
}
 8000644:	4618      	mov	r0, r3
 8000646:	bd80      	pop	{r7, pc}

08000648 <dht_read_data>:

bool dht_read_data(uint8_t *dht_value){
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
    uint8_t RHI = 0, RHD = 0, TCI = 0, TCD = 0, SUM = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	73fb      	strb	r3, [r7, #15]
 8000654:	2300      	movs	r3, #0
 8000656:	73bb      	strb	r3, [r7, #14]
 8000658:	2300      	movs	r3, #0
 800065a:	737b      	strb	r3, [r7, #13]
 800065c:	2300      	movs	r3, #0
 800065e:	733b      	strb	r3, [r7, #12]
 8000660:	2300      	movs	r3, #0
 8000662:	72fb      	strb	r3, [r7, #11]
    if(DHT11_Start()){
 8000664:	f000 f852 	bl	800070c <DHT11_Start>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d02e      	beq.n	80006cc <dht_read_data+0x84>
        RHI = DHT11_Read();
 800066e:	f000 f8c5 	bl	80007fc <DHT11_Read>
 8000672:	4603      	mov	r3, r0
 8000674:	73fb      	strb	r3, [r7, #15]
        RHD = DHT11_Read();
 8000676:	f000 f8c1 	bl	80007fc <DHT11_Read>
 800067a:	4603      	mov	r3, r0
 800067c:	73bb      	strb	r3, [r7, #14]
        TCI = DHT11_Read();
 800067e:	f000 f8bd 	bl	80007fc <DHT11_Read>
 8000682:	4603      	mov	r3, r0
 8000684:	737b      	strb	r3, [r7, #13]
        TCD = DHT11_Read();
 8000686:	f000 f8b9 	bl	80007fc <DHT11_Read>
 800068a:	4603      	mov	r3, r0
 800068c:	733b      	strb	r3, [r7, #12]
        SUM = DHT11_Read();
 800068e:	f000 f8b5 	bl	80007fc <DHT11_Read>
 8000692:	4603      	mov	r3, r0
 8000694:	72fb      	strb	r3, [r7, #11]
        if (RHI + RHD + TCI + TCD == SUM){
 8000696:	7bfa      	ldrb	r2, [r7, #15]
 8000698:	7bbb      	ldrb	r3, [r7, #14]
 800069a:	441a      	add	r2, r3
 800069c:	7b7b      	ldrb	r3, [r7, #13]
 800069e:	441a      	add	r2, r3
 80006a0:	7b3b      	ldrb	r3, [r7, #12]
 80006a2:	441a      	add	r2, r3
 80006a4:	7afb      	ldrb	r3, [r7, #11]
 80006a6:	429a      	cmp	r2, r3
 80006a8:	d110      	bne.n	80006cc <dht_read_data+0x84>
            dht_value[0] = RHI;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	7bfa      	ldrb	r2, [r7, #15]
 80006ae:	701a      	strb	r2, [r3, #0]
            dht_value[1] = RHD;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	3301      	adds	r3, #1
 80006b4:	7bba      	ldrb	r2, [r7, #14]
 80006b6:	701a      	strb	r2, [r3, #0]
            dht_value[2] = TCI;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	3302      	adds	r3, #2
 80006bc:	7b7a      	ldrb	r2, [r7, #13]
 80006be:	701a      	strb	r2, [r3, #0]
            dht_value[3] = TCD;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	3303      	adds	r3, #3
 80006c4:	7b3a      	ldrb	r2, [r7, #12]
 80006c6:	701a      	strb	r2, [r3, #0]
            return true;
 80006c8:	2301      	movs	r3, #1
 80006ca:	e000      	b.n	80006ce <dht_read_data+0x86>
        }
    }
    return false;
 80006cc:	2300      	movs	r3, #0
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3710      	adds	r7, #16
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
	...

080006d8 <microDelay>:

void microDelay (uint16_t delay)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 80006e2:	4b09      	ldr	r3, [pc, #36]	@ (8000708 <microDelay+0x30>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	2200      	movs	r2, #0
 80006e8:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 80006ea:	bf00      	nop
 80006ec:	4b06      	ldr	r3, [pc, #24]	@ (8000708 <microDelay+0x30>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80006f2:	88fb      	ldrh	r3, [r7, #6]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	d3f9      	bcc.n	80006ec <microDelay+0x14>
}
 80006f8:	bf00      	nop
 80006fa:	bf00      	nop
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	20000078 	.word	0x20000078

0800070c <DHT11_Start>:
uint8_t DHT11_Start (void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b086      	sub	sp, #24
 8000710:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 8000712:	2300      	movs	r3, #0
 8000714:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 8000716:	463b      	mov	r3, r7
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]
  GPIO_InitStructPrivate.Pin = DHT11_PIN;
 8000724:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000728:	603b      	str	r3, [r7, #0]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 800072a:	2301      	movs	r3, #1
 800072c:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 800072e:	2300      	movs	r3, #0
 8000730:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as output
 8000736:	463b      	mov	r3, r7
 8000738:	4619      	mov	r1, r3
 800073a:	482d      	ldr	r0, [pc, #180]	@ (80007f0 <DHT11_Start+0xe4>)
 800073c:	f001 f9fc 	bl	8001b38 <HAL_GPIO_Init>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000746:	482a      	ldr	r0, [pc, #168]	@ (80007f0 <DHT11_Start+0xe4>)
 8000748:	f001 fba2 	bl	8001e90 <HAL_GPIO_WritePin>
  HAL_Delay(20);   // wait for 20ms
 800074c:	2014      	movs	r0, #20
 800074e:	f000 fd43 	bl	80011d8 <HAL_Delay>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8000752:	2201      	movs	r2, #1
 8000754:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000758:	4825      	ldr	r0, [pc, #148]	@ (80007f0 <DHT11_Start+0xe4>)
 800075a:	f001 fb99 	bl	8001e90 <HAL_GPIO_WritePin>
  microDelay (30);   // wait for 30us
 800075e:	201e      	movs	r0, #30
 8000760:	f7ff ffba 	bl	80006d8 <microDelay>
  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8000764:	2300      	movs	r3, #0
 8000766:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8000768:	2301      	movs	r3, #1
 800076a:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as input
 800076c:	463b      	mov	r3, r7
 800076e:	4619      	mov	r1, r3
 8000770:	481f      	ldr	r0, [pc, #124]	@ (80007f0 <DHT11_Start+0xe4>)
 8000772:	f001 f9e1 	bl	8001b38 <HAL_GPIO_Init>
  microDelay (40);
 8000776:	2028      	movs	r0, #40	@ 0x28
 8000778:	f7ff ffae 	bl	80006d8 <microDelay>
  if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 800077c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000780:	481b      	ldr	r0, [pc, #108]	@ (80007f0 <DHT11_Start+0xe4>)
 8000782:	f001 fb6d 	bl	8001e60 <HAL_GPIO_ReadPin>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d10c      	bne.n	80007a6 <DHT11_Start+0x9a>
  {
    microDelay (80);
 800078c:	2050      	movs	r0, #80	@ 0x50
 800078e:	f7ff ffa3 	bl	80006d8 <microDelay>
    if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8000792:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000796:	4816      	ldr	r0, [pc, #88]	@ (80007f0 <DHT11_Start+0xe4>)
 8000798:	f001 fb62 	bl	8001e60 <HAL_GPIO_ReadPin>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <DHT11_Start+0x9a>
 80007a2:	2301      	movs	r3, #1
 80007a4:	75fb      	strb	r3, [r7, #23]
  }
  pMillis = HAL_GetTick();
 80007a6:	f000 fd0b 	bl	80011c0 <HAL_GetTick>
 80007aa:	4603      	mov	r3, r0
 80007ac:	4a11      	ldr	r2, [pc, #68]	@ (80007f4 <DHT11_Start+0xe8>)
 80007ae:	6013      	str	r3, [r2, #0]
  cMillis = HAL_GetTick();
 80007b0:	f000 fd06 	bl	80011c0 <HAL_GetTick>
 80007b4:	4603      	mov	r3, r0
 80007b6:	4a10      	ldr	r2, [pc, #64]	@ (80007f8 <DHT11_Start+0xec>)
 80007b8:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80007ba:	e004      	b.n	80007c6 <DHT11_Start+0xba>
  {
    cMillis = HAL_GetTick();
 80007bc:	f000 fd00 	bl	80011c0 <HAL_GetTick>
 80007c0:	4603      	mov	r3, r0
 80007c2:	4a0d      	ldr	r2, [pc, #52]	@ (80007f8 <DHT11_Start+0xec>)
 80007c4:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80007c6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007ca:	4809      	ldr	r0, [pc, #36]	@ (80007f0 <DHT11_Start+0xe4>)
 80007cc:	f001 fb48 	bl	8001e60 <HAL_GPIO_ReadPin>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d006      	beq.n	80007e4 <DHT11_Start+0xd8>
 80007d6:	4b07      	ldr	r3, [pc, #28]	@ (80007f4 <DHT11_Start+0xe8>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	1c9a      	adds	r2, r3, #2
 80007dc:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <DHT11_Start+0xec>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d8eb      	bhi.n	80007bc <DHT11_Start+0xb0>
  }
  return Response;
 80007e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3718      	adds	r7, #24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40020000 	.word	0x40020000
 80007f4:	20000108 	.word	0x20000108
 80007f8:	2000010c 	.word	0x2000010c

080007fc <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
  uint8_t a,b;
  for (a=0;a<8;a++)
 8000802:	2300      	movs	r3, #0
 8000804:	71fb      	strb	r3, [r7, #7]
 8000806:	e066      	b.n	80008d6 <DHT11_Read+0xda>
  {
    pMillis = HAL_GetTick();
 8000808:	f000 fcda 	bl	80011c0 <HAL_GetTick>
 800080c:	4603      	mov	r3, r0
 800080e:	4a36      	ldr	r2, [pc, #216]	@ (80008e8 <DHT11_Read+0xec>)
 8000810:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8000812:	f000 fcd5 	bl	80011c0 <HAL_GetTick>
 8000816:	4603      	mov	r3, r0
 8000818:	4a34      	ldr	r2, [pc, #208]	@ (80008ec <DHT11_Read+0xf0>)
 800081a:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 800081c:	e004      	b.n	8000828 <DHT11_Read+0x2c>
    {  // wait for the pin to go high
      cMillis = HAL_GetTick();
 800081e:	f000 fccf 	bl	80011c0 <HAL_GetTick>
 8000822:	4603      	mov	r3, r0
 8000824:	4a31      	ldr	r2, [pc, #196]	@ (80008ec <DHT11_Read+0xf0>)
 8000826:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000828:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800082c:	4830      	ldr	r0, [pc, #192]	@ (80008f0 <DHT11_Read+0xf4>)
 800082e:	f001 fb17 	bl	8001e60 <HAL_GPIO_ReadPin>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d106      	bne.n	8000846 <DHT11_Read+0x4a>
 8000838:	4b2b      	ldr	r3, [pc, #172]	@ (80008e8 <DHT11_Read+0xec>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	1c9a      	adds	r2, r3, #2
 800083e:	4b2b      	ldr	r3, [pc, #172]	@ (80008ec <DHT11_Read+0xf0>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	429a      	cmp	r2, r3
 8000844:	d8eb      	bhi.n	800081e <DHT11_Read+0x22>
    }
    microDelay (40);   // wait for 40 us
 8000846:	2028      	movs	r0, #40	@ 0x28
 8000848:	f7ff ff46 	bl	80006d8 <microDelay>
    if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 800084c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000850:	4827      	ldr	r0, [pc, #156]	@ (80008f0 <DHT11_Read+0xf4>)
 8000852:	f001 fb05 	bl	8001e60 <HAL_GPIO_ReadPin>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d10e      	bne.n	800087a <DHT11_Read+0x7e>
      b&= ~(1<<(7-a));
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	f1c3 0307 	rsb	r3, r3, #7
 8000862:	2201      	movs	r2, #1
 8000864:	fa02 f303 	lsl.w	r3, r2, r3
 8000868:	b25b      	sxtb	r3, r3
 800086a:	43db      	mvns	r3, r3
 800086c:	b25a      	sxtb	r2, r3
 800086e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000872:	4013      	ands	r3, r2
 8000874:	b25b      	sxtb	r3, r3
 8000876:	71bb      	strb	r3, [r7, #6]
 8000878:	e00b      	b.n	8000892 <DHT11_Read+0x96>
    else
      b|= (1<<(7-a));
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	f1c3 0307 	rsb	r3, r3, #7
 8000880:	2201      	movs	r2, #1
 8000882:	fa02 f303 	lsl.w	r3, r2, r3
 8000886:	b25a      	sxtb	r2, r3
 8000888:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800088c:	4313      	orrs	r3, r2
 800088e:	b25b      	sxtb	r3, r3
 8000890:	71bb      	strb	r3, [r7, #6]
    pMillis = HAL_GetTick();
 8000892:	f000 fc95 	bl	80011c0 <HAL_GetTick>
 8000896:	4603      	mov	r3, r0
 8000898:	4a13      	ldr	r2, [pc, #76]	@ (80008e8 <DHT11_Read+0xec>)
 800089a:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 800089c:	f000 fc90 	bl	80011c0 <HAL_GetTick>
 80008a0:	4603      	mov	r3, r0
 80008a2:	4a12      	ldr	r2, [pc, #72]	@ (80008ec <DHT11_Read+0xf0>)
 80008a4:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80008a6:	e004      	b.n	80008b2 <DHT11_Read+0xb6>
    {  // wait for the pin to go low
      cMillis = HAL_GetTick();
 80008a8:	f000 fc8a 	bl	80011c0 <HAL_GetTick>
 80008ac:	4603      	mov	r3, r0
 80008ae:	4a0f      	ldr	r2, [pc, #60]	@ (80008ec <DHT11_Read+0xf0>)
 80008b0:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80008b2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008b6:	480e      	ldr	r0, [pc, #56]	@ (80008f0 <DHT11_Read+0xf4>)
 80008b8:	f001 fad2 	bl	8001e60 <HAL_GPIO_ReadPin>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d006      	beq.n	80008d0 <DHT11_Read+0xd4>
 80008c2:	4b09      	ldr	r3, [pc, #36]	@ (80008e8 <DHT11_Read+0xec>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	1c9a      	adds	r2, r3, #2
 80008c8:	4b08      	ldr	r3, [pc, #32]	@ (80008ec <DHT11_Read+0xf0>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d8eb      	bhi.n	80008a8 <DHT11_Read+0xac>
  for (a=0;a<8;a++)
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	3301      	adds	r3, #1
 80008d4:	71fb      	strb	r3, [r7, #7]
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	2b07      	cmp	r3, #7
 80008da:	d995      	bls.n	8000808 <DHT11_Read+0xc>
    }
  }
  return b;
 80008dc:	79bb      	ldrb	r3, [r7, #6]
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000108 	.word	0x20000108
 80008ec:	2000010c 	.word	0x2000010c
 80008f0:	40020000 	.word	0x40020000

080008f4 <uart_send_data>:

void uart_send_data(uint8_t data[], uint8_t tab_length){
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	460b      	mov	r3, r1
 80008fe:	70fb      	strb	r3, [r7, #3]
    HAL_UART_Transmit(&huart2, data, tab_length, 1000);
 8000900:	78fb      	ldrb	r3, [r7, #3]
 8000902:	b29a      	uxth	r2, r3
 8000904:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000908:	6879      	ldr	r1, [r7, #4]
 800090a:	4803      	ldr	r0, [pc, #12]	@ (8000918 <uart_send_data+0x24>)
 800090c:	f002 fbce 	bl	80030ac <HAL_UART_Transmit>
}
 8000910:	bf00      	nop
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	200000c0 	.word	0x200000c0

0800091c <uart_receive>:


void uart_receive(uint8_t *pData, uint16_t length) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	460b      	mov	r3, r1
 8000926:	807b      	strh	r3, [r7, #2]
    HAL_UART_Receive(&huart2, pData, length, 1000);
 8000928:	887a      	ldrh	r2, [r7, #2]
 800092a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800092e:	6879      	ldr	r1, [r7, #4]
 8000930:	4803      	ldr	r0, [pc, #12]	@ (8000940 <uart_receive+0x24>)
 8000932:	f002 fc46 	bl	80031c2 <HAL_UART_Receive>
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	200000c0 	.word	0x200000c0

08000944 <uart_receive_data>:

uint8_t* uart_receive_data() {
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
    uint8_t byte;
    uint16_t index = 0;
 800094a:	2300      	movs	r3, #0
 800094c:	81fb      	strh	r3, [r7, #14]
    uint16_t buffer_size = 10;
 800094e:	230a      	movs	r3, #10
 8000950:	81bb      	strh	r3, [r7, #12]
    uint8_t *pData = (uint8_t*)malloc(buffer_size * sizeof(uint8_t));
 8000952:	89bb      	ldrh	r3, [r7, #12]
 8000954:	4618      	mov	r0, r3
 8000956:	f003 fc47 	bl	80041e8 <malloc>
 800095a:	4603      	mov	r3, r0
 800095c:	60bb      	str	r3, [r7, #8]
    if (pData == NULL) {
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d101      	bne.n	8000968 <uart_receive_data+0x24>
        return NULL;
 8000964:	2300      	movs	r3, #0
 8000966:	e02e      	b.n	80009c6 <uart_receive_data+0x82>
    }
    while (1) {
        uart_receive(&byte, 1);
 8000968:	1cfb      	adds	r3, r7, #3
 800096a:	2101      	movs	r1, #1
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff ffd5 	bl	800091c <uart_receive>
        if (byte == '\n') {
 8000972:	78fb      	ldrb	r3, [r7, #3]
 8000974:	2b0a      	cmp	r3, #10
 8000976:	d01f      	beq.n	80009b8 <uart_receive_data+0x74>
            break;
        }
        pData[index++] = byte;
 8000978:	89fb      	ldrh	r3, [r7, #14]
 800097a:	1c5a      	adds	r2, r3, #1
 800097c:	81fa      	strh	r2, [r7, #14]
 800097e:	461a      	mov	r2, r3
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	4413      	add	r3, r2
 8000984:	78fa      	ldrb	r2, [r7, #3]
 8000986:	701a      	strb	r2, [r3, #0]
        if (index >= buffer_size) {
 8000988:	89fa      	ldrh	r2, [r7, #14]
 800098a:	89bb      	ldrh	r3, [r7, #12]
 800098c:	429a      	cmp	r2, r3
 800098e:	d3eb      	bcc.n	8000968 <uart_receive_data+0x24>
            buffer_size *= 2;
 8000990:	89bb      	ldrh	r3, [r7, #12]
 8000992:	005b      	lsls	r3, r3, #1
 8000994:	81bb      	strh	r3, [r7, #12]
            uint8_t *temp = (uint8_t*)realloc(pData, buffer_size * sizeof(uint8_t));
 8000996:	89bb      	ldrh	r3, [r7, #12]
 8000998:	4619      	mov	r1, r3
 800099a:	68b8      	ldr	r0, [r7, #8]
 800099c:	f003 fce2 	bl	8004364 <realloc>
 80009a0:	6078      	str	r0, [r7, #4]
            if (temp == NULL) {
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d104      	bne.n	80009b2 <uart_receive_data+0x6e>
                free(pData);
 80009a8:	68b8      	ldr	r0, [r7, #8]
 80009aa:	f003 fc25 	bl	80041f8 <free>
                return NULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	e009      	b.n	80009c6 <uart_receive_data+0x82>
            }
            pData = temp;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	60bb      	str	r3, [r7, #8]
        uart_receive(&byte, 1);
 80009b6:	e7d7      	b.n	8000968 <uart_receive_data+0x24>
            break;
 80009b8:	bf00      	nop
        }
    }
    pData[index] = '\0';
 80009ba:	89fb      	ldrh	r3, [r7, #14]
 80009bc:	68ba      	ldr	r2, [r7, #8]
 80009be:	4413      	add	r3, r2
 80009c0:	2200      	movs	r2, #0
 80009c2:	701a      	strb	r2, [r3, #0]
    return pData;
 80009c4:	68bb      	ldr	r3, [r7, #8]
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
	...

080009d0 <parse_json>:

void parse_json(char *json_data) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
    char *temp_str = strstr(json_data, "\"targetTemperature\":");
 80009d8:	490b      	ldr	r1, [pc, #44]	@ (8000a08 <parse_json+0x38>)
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f003 fd4c 	bl	8004478 <strstr>
 80009e0:	60f8      	str	r0, [r7, #12]
    if (temp_str) {
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d00b      	beq.n	8000a00 <parse_json+0x30>
        int value;
        sscanf(temp_str, "\"targetTemperature\":%d", &value);
 80009e8:	f107 0308 	add.w	r3, r7, #8
 80009ec:	461a      	mov	r2, r3
 80009ee:	4907      	ldr	r1, [pc, #28]	@ (8000a0c <parse_json+0x3c>)
 80009f0:	68f8      	ldr	r0, [r7, #12]
 80009f2:	f003 fd0d 	bl	8004410 <siscanf>
        set_target_temperature((uint8_t)value);
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff fe10 	bl	8000620 <set_target_temperature>
    }
}
 8000a00:	bf00      	nop
 8000a02:	3710      	adds	r7, #16
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	080054e8 	.word	0x080054e8
 8000a0c:	08005500 	.word	0x08005500

08000a10 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a0b      	ldr	r2, [pc, #44]	@ (8000a4c <HAL_UART_RxCpltCallback+0x3c>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d110      	bne.n	8000a44 <HAL_UART_RxCpltCallback+0x34>
        uint8_t *received_data = uart_receive_data();
 8000a22:	f7ff ff8f 	bl	8000944 <uart_receive_data>
 8000a26:	60f8      	str	r0, [r7, #12]
        if (received_data) {
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d005      	beq.n	8000a3a <HAL_UART_RxCpltCallback+0x2a>
            parse_json((char *)received_data);
 8000a2e:	68f8      	ldr	r0, [r7, #12]
 8000a30:	f7ff ffce 	bl	80009d0 <parse_json>
            free(received_data);
 8000a34:	68f8      	ldr	r0, [r7, #12]
 8000a36:	f003 fbdf 	bl	80041f8 <free>
        }
        HAL_UART_Receive_IT(&huart2, (uint8_t*)received_data, 1);
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	68f9      	ldr	r1, [r7, #12]
 8000a3e:	4804      	ldr	r0, [pc, #16]	@ (8000a50 <HAL_UART_RxCpltCallback+0x40>)
 8000a40:	f002 fc56 	bl	80032f0 <HAL_UART_Receive_IT>
    }
}
 8000a44:	bf00      	nop
 8000a46:	3710      	adds	r7, #16
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40004400 	.word	0x40004400
 8000a50:	200000c0 	.word	0x200000c0

08000a54 <LED_On>:

/**
  * @brief  The application entry point.
  * @retval int
  */
void LED_On(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	460b      	mov	r3, r1
 8000a5e:	807b      	strh	r3, [r7, #2]
  HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8000a60:	887b      	ldrh	r3, [r7, #2]
 8000a62:	2201      	movs	r2, #1
 8000a64:	4619      	mov	r1, r3
 8000a66:	6878      	ldr	r0, [r7, #4]
 8000a68:	f001 fa12 	bl	8001e90 <HAL_GPIO_WritePin>
}
 8000a6c:	bf00      	nop
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <LED_Off>:

void LED_Off(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	460b      	mov	r3, r1
 8000a7e:	807b      	strh	r3, [r7, #2]
  HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8000a80:	887b      	ldrh	r3, [r7, #2]
 8000a82:	2200      	movs	r2, #0
 8000a84:	4619      	mov	r1, r3
 8000a86:	6878      	ldr	r0, [r7, #4]
 8000a88:	f001 fa02 	bl	8001e90 <HAL_GPIO_WritePin>
}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <main>:
int main(void)
{
 8000a94:	b5b0      	push	{r4, r5, r7, lr}
 8000a96:	b0ba      	sub	sp, #232	@ 0xe8
 8000a98:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a9a:	f000 fb2b 	bl	80010f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a9e:	f000 f88f 	bl	8000bc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aa2:	f000 f973 	bl	8000d8c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000aa6:	f000 f8f7 	bl	8000c98 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000aaa:	f000 f945 	bl	8000d38 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  LED_Off(LED_RED_PORT, LED_RED_PIN);
 8000aae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ab2:	483e      	ldr	r0, [pc, #248]	@ (8000bac <main+0x118>)
 8000ab4:	f7ff ffde 	bl	8000a74 <LED_Off>
  LED_Off(LED_GREEN_PORT, LED_GREEN_PIN);
 8000ab8:	2110      	movs	r1, #16
 8000aba:	483d      	ldr	r0, [pc, #244]	@ (8000bb0 <main+0x11c>)
 8000abc:	f7ff ffda 	bl	8000a74 <LED_Off>
  LED_On(LED_BLUE_PORT, LED_BLUE_PIN);
 8000ac0:	2120      	movs	r1, #32
 8000ac2:	483b      	ldr	r0, [pc, #236]	@ (8000bb0 <main+0x11c>)
 8000ac4:	f7ff ffc6 	bl	8000a54 <LED_On>

  HAL_TIM_Base_Start(&htim1);
 8000ac8:	483a      	ldr	r0, [pc, #232]	@ (8000bb4 <main+0x120>)
 8000aca:	f001 ffad 	bl	8002a28 <HAL_TIM_Base_Start>
  uint8_t uart_data[UART_DATA_TAB_SIZE] = {0};
 8000ace:	2300      	movs	r3, #0
 8000ad0:	673b      	str	r3, [r7, #112]	@ 0x70
 8000ad2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000ad6:	2260      	movs	r2, #96	@ 0x60
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4618      	mov	r0, r3
 8000adc:	f003 fcc4 	bl	8004468 <memset>
  uint8_t dht_value[DHT_TAB_SIZE] = {0};
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
//  uart_send_data((uint8_t *) "INIT STM32\r\n\0", 15);

  HAL_UART_Receive_IT(&huart2, uart_data, 1);
 8000aea:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000aee:	2201      	movs	r2, #1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4831      	ldr	r0, [pc, #196]	@ (8000bb8 <main+0x124>)
 8000af4:	f002 fbfc 	bl	80032f0 <HAL_UART_Receive_IT>
  uint8_t target_temperature = get_target_temperature();
 8000af8:	f7ff fd9f 	bl	800063a <get_target_temperature>
 8000afc:	4603      	mov	r3, r0
 8000afe:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if (dht_read_data(dht_value)){
 8000b02:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff fd9e 	bl	8000648 <dht_read_data>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d042      	beq.n	8000b98 <main+0x104>
		  char buf[100];
		  sprintf(buf, "{\"humidity\": %d.%d, \"temperature\": %d.%d, \"targetTemperature\": %d}\r\n",
				  dht_value[0], dht_value[1], dht_value[2], dht_value[3], target_temperature);
 8000b12:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
		  sprintf(buf, "{\"humidity\": %d.%d, \"temperature\": %d.%d, \"targetTemperature\": %d}\r\n",
 8000b16:	461c      	mov	r4, r3
				  dht_value[0], dht_value[1], dht_value[2], dht_value[3], target_temperature);
 8000b18:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
		  sprintf(buf, "{\"humidity\": %d.%d, \"temperature\": %d.%d, \"targetTemperature\": %d}\r\n",
 8000b1c:	461d      	mov	r5, r3
				  dht_value[0], dht_value[1], dht_value[2], dht_value[3], target_temperature);
 8000b1e:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
		  sprintf(buf, "{\"humidity\": %d.%d, \"temperature\": %d.%d, \"targetTemperature\": %d}\r\n",
 8000b22:	461a      	mov	r2, r3
				  dht_value[0], dht_value[1], dht_value[2], dht_value[3], target_temperature);
 8000b24:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
		  sprintf(buf, "{\"humidity\": %d.%d, \"temperature\": %d.%d, \"targetTemperature\": %d}\r\n",
 8000b28:	4619      	mov	r1, r3
 8000b2a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
 8000b2e:	1d38      	adds	r0, r7, #4
 8000b30:	9302      	str	r3, [sp, #8]
 8000b32:	9101      	str	r1, [sp, #4]
 8000b34:	9200      	str	r2, [sp, #0]
 8000b36:	462b      	mov	r3, r5
 8000b38:	4622      	mov	r2, r4
 8000b3a:	4920      	ldr	r1, [pc, #128]	@ (8000bbc <main+0x128>)
 8000b3c:	f003 fc48 	bl	80043d0 <siprintf>
		  uart_send_data((uint8_t*)buf, strlen(buf));
 8000b40:	1d3b      	adds	r3, r7, #4
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff fb64 	bl	8000210 <strlen>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	b2da      	uxtb	r2, r3
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	4611      	mov	r1, r2
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff fecf 	bl	80008f4 <uart_send_data>
		  if (dht_value[2] > target_temperature) {
 8000b56:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8000b5a:	f897 20d7 	ldrb.w	r2, [r7, #215]	@ 0xd7
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	d20d      	bcs.n	8000b7e <main+0xea>
			  LED_On(LED_RED_PORT, LED_RED_PIN);
 8000b62:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b66:	4811      	ldr	r0, [pc, #68]	@ (8000bac <main+0x118>)
 8000b68:	f7ff ff74 	bl	8000a54 <LED_On>
			  LED_Off(LED_GREEN_PORT, LED_GREEN_PIN);
 8000b6c:	2110      	movs	r1, #16
 8000b6e:	4810      	ldr	r0, [pc, #64]	@ (8000bb0 <main+0x11c>)
 8000b70:	f7ff ff80 	bl	8000a74 <LED_Off>
			  LED_Off(LED_BLUE_PORT, LED_BLUE_PIN);
 8000b74:	2120      	movs	r1, #32
 8000b76:	480e      	ldr	r0, [pc, #56]	@ (8000bb0 <main+0x11c>)
 8000b78:	f7ff ff7c 	bl	8000a74 <LED_Off>
 8000b7c:	e00c      	b.n	8000b98 <main+0x104>
		  }
		  else {
			  LED_Off(LED_RED_PORT, LED_RED_PIN);
 8000b7e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b82:	480a      	ldr	r0, [pc, #40]	@ (8000bac <main+0x118>)
 8000b84:	f7ff ff76 	bl	8000a74 <LED_Off>
			  LED_On(LED_GREEN_PORT, LED_GREEN_PIN);
 8000b88:	2110      	movs	r1, #16
 8000b8a:	4809      	ldr	r0, [pc, #36]	@ (8000bb0 <main+0x11c>)
 8000b8c:	f7ff ff62 	bl	8000a54 <LED_On>
			  LED_Off(LED_BLUE_PORT, LED_BLUE_PIN);
 8000b90:	2120      	movs	r1, #32
 8000b92:	4807      	ldr	r0, [pc, #28]	@ (8000bb0 <main+0x11c>)
 8000b94:	f7ff ff6e 	bl	8000a74 <LED_Off>
		  }
	  }
	  target_temperature = get_target_temperature();
 8000b98:	f7ff fd4f 	bl	800063a <get_target_temperature>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
	  HAL_Delay(1000);
 8000ba2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ba6:	f000 fb17 	bl	80011d8 <HAL_Delay>
	  if (dht_read_data(dht_value)){
 8000baa:	e7aa      	b.n	8000b02 <main+0x6e>
 8000bac:	40020000 	.word	0x40020000
 8000bb0:	40020400 	.word	0x40020400
 8000bb4:	20000078 	.word	0x20000078
 8000bb8:	200000c0 	.word	0x200000c0
 8000bbc:	08005518 	.word	0x08005518

08000bc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b094      	sub	sp, #80	@ 0x50
 8000bc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bc6:	f107 031c 	add.w	r3, r7, #28
 8000bca:	2234      	movs	r2, #52	@ 0x34
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f003 fc4a 	bl	8004468 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd4:	f107 0308 	add.w	r3, r7, #8
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be4:	2300      	movs	r3, #0
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	4b29      	ldr	r3, [pc, #164]	@ (8000c90 <SystemClock_Config+0xd0>)
 8000bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bec:	4a28      	ldr	r2, [pc, #160]	@ (8000c90 <SystemClock_Config+0xd0>)
 8000bee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bf2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bf4:	4b26      	ldr	r3, [pc, #152]	@ (8000c90 <SystemClock_Config+0xd0>)
 8000bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c00:	2300      	movs	r3, #0
 8000c02:	603b      	str	r3, [r7, #0]
 8000c04:	4b23      	ldr	r3, [pc, #140]	@ (8000c94 <SystemClock_Config+0xd4>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c0c:	4a21      	ldr	r2, [pc, #132]	@ (8000c94 <SystemClock_Config+0xd4>)
 8000c0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c12:	6013      	str	r3, [r2, #0]
 8000c14:	4b1f      	ldr	r3, [pc, #124]	@ (8000c94 <SystemClock_Config+0xd4>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c1c:	603b      	str	r3, [r7, #0]
 8000c1e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c20:	2302      	movs	r3, #2
 8000c22:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c24:	2301      	movs	r3, #1
 8000c26:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c28:	2310      	movs	r3, #16
 8000c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c30:	2300      	movs	r3, #0
 8000c32:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c34:	2308      	movs	r3, #8
 8000c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000c38:	2348      	movs	r3, #72	@ 0x48
 8000c3a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c40:	2302      	movs	r3, #2
 8000c42:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c44:	2302      	movs	r3, #2
 8000c46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c48:	f107 031c 	add.w	r3, r7, #28
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f001 fbfd 	bl	800244c <HAL_RCC_OscConfig>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000c58:	f000 f900 	bl	8000e5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c5c:	230f      	movs	r3, #15
 8000c5e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c60:	2302      	movs	r3, #2
 8000c62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c64:	2300      	movs	r3, #0
 8000c66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c6c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c72:	f107 0308 	add.w	r3, r7, #8
 8000c76:	2102      	movs	r1, #2
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f001 f923 	bl	8001ec4 <HAL_RCC_ClockConfig>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000c84:	f000 f8ea 	bl	8000e5c <Error_Handler>
  }
}
 8000c88:	bf00      	nop
 8000c8a:	3750      	adds	r7, #80	@ 0x50
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40007000 	.word	0x40007000

08000c98 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c9e:	f107 0308 	add.w	r3, r7, #8
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cac:	463b      	mov	r3, r7
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cb4:	4b1e      	ldr	r3, [pc, #120]	@ (8000d30 <MX_TIM1_Init+0x98>)
 8000cb6:	4a1f      	ldr	r2, [pc, #124]	@ (8000d34 <MX_TIM1_Init+0x9c>)
 8000cb8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8000cba:	4b1d      	ldr	r3, [pc, #116]	@ (8000d30 <MX_TIM1_Init+0x98>)
 8000cbc:	2247      	movs	r2, #71	@ 0x47
 8000cbe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d30 <MX_TIM1_Init+0x98>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000cc6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d30 <MX_TIM1_Init+0x98>)
 8000cc8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ccc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cce:	4b18      	ldr	r3, [pc, #96]	@ (8000d30 <MX_TIM1_Init+0x98>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cd4:	4b16      	ldr	r3, [pc, #88]	@ (8000d30 <MX_TIM1_Init+0x98>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cda:	4b15      	ldr	r3, [pc, #84]	@ (8000d30 <MX_TIM1_Init+0x98>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ce0:	4813      	ldr	r0, [pc, #76]	@ (8000d30 <MX_TIM1_Init+0x98>)
 8000ce2:	f001 fe51 	bl	8002988 <HAL_TIM_Base_Init>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000cec:	f000 f8b6 	bl	8000e5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cf0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cf4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cf6:	f107 0308 	add.w	r3, r7, #8
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	480c      	ldr	r0, [pc, #48]	@ (8000d30 <MX_TIM1_Init+0x98>)
 8000cfe:	f001 fefb 	bl	8002af8 <HAL_TIM_ConfigClockSource>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000d08:	f000 f8a8 	bl	8000e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d10:	2300      	movs	r3, #0
 8000d12:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d14:	463b      	mov	r3, r7
 8000d16:	4619      	mov	r1, r3
 8000d18:	4805      	ldr	r0, [pc, #20]	@ (8000d30 <MX_TIM1_Init+0x98>)
 8000d1a:	f002 f8fb 	bl	8002f14 <HAL_TIMEx_MasterConfigSynchronization>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000d24:	f000 f89a 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d28:	bf00      	nop
 8000d2a:	3718      	adds	r7, #24
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000078 	.word	0x20000078
 8000d34:	40010000 	.word	0x40010000

08000d38 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d3c:	4b11      	ldr	r3, [pc, #68]	@ (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d3e:	4a12      	ldr	r2, [pc, #72]	@ (8000d88 <MX_USART2_UART_Init+0x50>)
 8000d40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d42:	4b10      	ldr	r3, [pc, #64]	@ (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d44:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d50:	4b0c      	ldr	r3, [pc, #48]	@ (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d56:	4b0b      	ldr	r3, [pc, #44]	@ (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d5c:	4b09      	ldr	r3, [pc, #36]	@ (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d5e:	220c      	movs	r2, #12
 8000d60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d62:	4b08      	ldr	r3, [pc, #32]	@ (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d68:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d6e:	4805      	ldr	r0, [pc, #20]	@ (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d70:	f002 f94c 	bl	800300c <HAL_UART_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d7a:	f000 f86f 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	200000c0 	.word	0x200000c0
 8000d88:	40004400 	.word	0x40004400

08000d8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d92:	f107 030c 	add.w	r3, r7, #12
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]
 8000da0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	4b2a      	ldr	r3, [pc, #168]	@ (8000e50 <MX_GPIO_Init+0xc4>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	4a29      	ldr	r2, [pc, #164]	@ (8000e50 <MX_GPIO_Init+0xc4>)
 8000dac:	f043 0304 	orr.w	r3, r3, #4
 8000db0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db2:	4b27      	ldr	r3, [pc, #156]	@ (8000e50 <MX_GPIO_Init+0xc4>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	f003 0304 	and.w	r3, r3, #4
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	607b      	str	r3, [r7, #4]
 8000dc2:	4b23      	ldr	r3, [pc, #140]	@ (8000e50 <MX_GPIO_Init+0xc4>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc6:	4a22      	ldr	r2, [pc, #136]	@ (8000e50 <MX_GPIO_Init+0xc4>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dce:	4b20      	ldr	r3, [pc, #128]	@ (8000e50 <MX_GPIO_Init+0xc4>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	603b      	str	r3, [r7, #0]
 8000dde:	4b1c      	ldr	r3, [pc, #112]	@ (8000e50 <MX_GPIO_Init+0xc4>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de2:	4a1b      	ldr	r2, [pc, #108]	@ (8000e50 <MX_GPIO_Init+0xc4>)
 8000de4:	f043 0302 	orr.w	r3, r3, #2
 8000de8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dea:	4b19      	ldr	r3, [pc, #100]	@ (8000e50 <MX_GPIO_Init+0xc4>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dee:	f003 0302 	and.w	r3, r3, #2
 8000df2:	603b      	str	r3, [r7, #0]
 8000df4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|LED_ROUGE_Pin|TEMP_SENSOR_Pin, GPIO_PIN_RESET);
 8000df6:	2200      	movs	r2, #0
 8000df8:	f44f 5189 	mov.w	r1, #4384	@ 0x1120
 8000dfc:	4815      	ldr	r0, [pc, #84]	@ (8000e54 <MX_GPIO_Init+0xc8>)
 8000dfe:	f001 f847 	bl	8001e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_VERT_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2130      	movs	r1, #48	@ 0x30
 8000e06:	4814      	ldr	r0, [pc, #80]	@ (8000e58 <MX_GPIO_Init+0xcc>)
 8000e08:	f001 f842 	bl	8001e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 LED_ROUGE_Pin TEMP_SENSOR_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_5|LED_ROUGE_Pin|TEMP_SENSOR_Pin;
 8000e0c:	f44f 5389 	mov.w	r3, #4384	@ 0x1120
 8000e10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e12:	2301      	movs	r3, #1
 8000e14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1e:	f107 030c 	add.w	r3, r7, #12
 8000e22:	4619      	mov	r1, r3
 8000e24:	480b      	ldr	r0, [pc, #44]	@ (8000e54 <MX_GPIO_Init+0xc8>)
 8000e26:	f000 fe87 	bl	8001b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_VERT_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_VERT_Pin|LED_BLUE_Pin;
 8000e2a:	2330      	movs	r3, #48	@ 0x30
 8000e2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3a:	f107 030c 	add.w	r3, r7, #12
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4805      	ldr	r0, [pc, #20]	@ (8000e58 <MX_GPIO_Init+0xcc>)
 8000e42:	f000 fe79 	bl	8001b38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e46:	bf00      	nop
 8000e48:	3720      	adds	r7, #32
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40020000 	.word	0x40020000
 8000e58:	40020400 	.word	0x40020400

08000e5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e60:	b672      	cpsid	i
}
 8000e62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)   {
 8000e64:	bf00      	nop
 8000e66:	e7fd      	b.n	8000e64 <Error_Handler+0x8>

08000e68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	607b      	str	r3, [r7, #4]
 8000e72:	4b10      	ldr	r3, [pc, #64]	@ (8000eb4 <HAL_MspInit+0x4c>)
 8000e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e76:	4a0f      	ldr	r2, [pc, #60]	@ (8000eb4 <HAL_MspInit+0x4c>)
 8000e78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000eb4 <HAL_MspInit+0x4c>)
 8000e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e86:	607b      	str	r3, [r7, #4]
 8000e88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	603b      	str	r3, [r7, #0]
 8000e8e:	4b09      	ldr	r3, [pc, #36]	@ (8000eb4 <HAL_MspInit+0x4c>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e92:	4a08      	ldr	r2, [pc, #32]	@ (8000eb4 <HAL_MspInit+0x4c>)
 8000e94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e9a:	4b06      	ldr	r3, [pc, #24]	@ (8000eb4 <HAL_MspInit+0x4c>)
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ea2:	603b      	str	r3, [r7, #0]
 8000ea4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	40023800 	.word	0x40023800

08000eb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a0b      	ldr	r2, [pc, #44]	@ (8000ef4 <HAL_TIM_Base_MspInit+0x3c>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d10d      	bne.n	8000ee6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60fb      	str	r3, [r7, #12]
 8000ece:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef8 <HAL_TIM_Base_MspInit+0x40>)
 8000ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ed2:	4a09      	ldr	r2, [pc, #36]	@ (8000ef8 <HAL_TIM_Base_MspInit+0x40>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eda:	4b07      	ldr	r3, [pc, #28]	@ (8000ef8 <HAL_TIM_Base_MspInit+0x40>)
 8000edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000ee6:	bf00      	nop
 8000ee8:	3714      	adds	r7, #20
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	40010000 	.word	0x40010000
 8000ef8:	40023800 	.word	0x40023800

08000efc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08a      	sub	sp, #40	@ 0x28
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	f107 0314 	add.w	r3, r7, #20
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a1d      	ldr	r2, [pc, #116]	@ (8000f90 <HAL_UART_MspInit+0x94>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d133      	bne.n	8000f86 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
 8000f22:	4b1c      	ldr	r3, [pc, #112]	@ (8000f94 <HAL_UART_MspInit+0x98>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f26:	4a1b      	ldr	r2, [pc, #108]	@ (8000f94 <HAL_UART_MspInit+0x98>)
 8000f28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f2e:	4b19      	ldr	r3, [pc, #100]	@ (8000f94 <HAL_UART_MspInit+0x98>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	4b15      	ldr	r3, [pc, #84]	@ (8000f94 <HAL_UART_MspInit+0x98>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f42:	4a14      	ldr	r2, [pc, #80]	@ (8000f94 <HAL_UART_MspInit+0x98>)
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f4a:	4b12      	ldr	r3, [pc, #72]	@ (8000f94 <HAL_UART_MspInit+0x98>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f56:	230c      	movs	r3, #12
 8000f58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f62:	2303      	movs	r3, #3
 8000f64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f66:	2307      	movs	r3, #7
 8000f68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4809      	ldr	r0, [pc, #36]	@ (8000f98 <HAL_UART_MspInit+0x9c>)
 8000f72:	f000 fde1 	bl	8001b38 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2100      	movs	r1, #0
 8000f7a:	2026      	movs	r0, #38	@ 0x26
 8000f7c:	f000 fa2b 	bl	80013d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f80:	2026      	movs	r0, #38	@ 0x26
 8000f82:	f000 fa44 	bl	800140e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000f86:	bf00      	nop
 8000f88:	3728      	adds	r7, #40	@ 0x28
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40004400 	.word	0x40004400
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40020000 	.word	0x40020000

08000f9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fa0:	bf00      	nop
 8000fa2:	e7fd      	b.n	8000fa0 <NMI_Handler+0x4>

08000fa4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa8:	bf00      	nop
 8000faa:	e7fd      	b.n	8000fa8 <HardFault_Handler+0x4>

08000fac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb0:	bf00      	nop
 8000fb2:	e7fd      	b.n	8000fb0 <MemManage_Handler+0x4>

08000fb4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb8:	bf00      	nop
 8000fba:	e7fd      	b.n	8000fb8 <BusFault_Handler+0x4>

08000fbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc0:	bf00      	nop
 8000fc2:	e7fd      	b.n	8000fc0 <UsageFault_Handler+0x4>

08000fc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff2:	f000 f8d1 	bl	8001198 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
	...

08000ffc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001000:	4802      	ldr	r0, [pc, #8]	@ (800100c <USART2_IRQHandler+0x10>)
 8001002:	f002 f99b 	bl	800333c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	200000c0 	.word	0x200000c0

08001010 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001018:	4a14      	ldr	r2, [pc, #80]	@ (800106c <_sbrk+0x5c>)
 800101a:	4b15      	ldr	r3, [pc, #84]	@ (8001070 <_sbrk+0x60>)
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001024:	4b13      	ldr	r3, [pc, #76]	@ (8001074 <_sbrk+0x64>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d102      	bne.n	8001032 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800102c:	4b11      	ldr	r3, [pc, #68]	@ (8001074 <_sbrk+0x64>)
 800102e:	4a12      	ldr	r2, [pc, #72]	@ (8001078 <_sbrk+0x68>)
 8001030:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001032:	4b10      	ldr	r3, [pc, #64]	@ (8001074 <_sbrk+0x64>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4413      	add	r3, r2
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	429a      	cmp	r2, r3
 800103e:	d207      	bcs.n	8001050 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001040:	f003 fa40 	bl	80044c4 <__errno>
 8001044:	4603      	mov	r3, r0
 8001046:	220c      	movs	r2, #12
 8001048:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800104a:	f04f 33ff 	mov.w	r3, #4294967295
 800104e:	e009      	b.n	8001064 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001050:	4b08      	ldr	r3, [pc, #32]	@ (8001074 <_sbrk+0x64>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001056:	4b07      	ldr	r3, [pc, #28]	@ (8001074 <_sbrk+0x64>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4413      	add	r3, r2
 800105e:	4a05      	ldr	r2, [pc, #20]	@ (8001074 <_sbrk+0x64>)
 8001060:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001062:	68fb      	ldr	r3, [r7, #12]
}
 8001064:	4618      	mov	r0, r3
 8001066:	3718      	adds	r7, #24
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20020000 	.word	0x20020000
 8001070:	00000400 	.word	0x00000400
 8001074:	20000110 	.word	0x20000110
 8001078:	20000280 	.word	0x20000280

0800107c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001080:	4b06      	ldr	r3, [pc, #24]	@ (800109c <SystemInit+0x20>)
 8001082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001086:	4a05      	ldr	r2, [pc, #20]	@ (800109c <SystemInit+0x20>)
 8001088:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800108c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010d8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80010a4:	f7ff ffea 	bl	800107c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010a8:	480c      	ldr	r0, [pc, #48]	@ (80010dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010aa:	490d      	ldr	r1, [pc, #52]	@ (80010e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010ac:	4a0d      	ldr	r2, [pc, #52]	@ (80010e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010b0:	e002      	b.n	80010b8 <LoopCopyDataInit>

080010b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010b6:	3304      	adds	r3, #4

080010b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010bc:	d3f9      	bcc.n	80010b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010be:	4a0a      	ldr	r2, [pc, #40]	@ (80010e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010c0:	4c0a      	ldr	r4, [pc, #40]	@ (80010ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80010c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c4:	e001      	b.n	80010ca <LoopFillZerobss>

080010c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c8:	3204      	adds	r2, #4

080010ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010cc:	d3fb      	bcc.n	80010c6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80010ce:	f003 f9ff 	bl	80044d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010d2:	f7ff fcdf 	bl	8000a94 <main>
  bx  lr    
 80010d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010e0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80010e4:	080056e4 	.word	0x080056e4
  ldr r2, =_sbss
 80010e8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80010ec:	20000280 	.word	0x20000280

080010f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010f0:	e7fe      	b.n	80010f0 <ADC_IRQHandler>
	...

080010f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001134 <HAL_Init+0x40>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001134 <HAL_Init+0x40>)
 80010fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001102:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001104:	4b0b      	ldr	r3, [pc, #44]	@ (8001134 <HAL_Init+0x40>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a0a      	ldr	r2, [pc, #40]	@ (8001134 <HAL_Init+0x40>)
 800110a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800110e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001110:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <HAL_Init+0x40>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a07      	ldr	r2, [pc, #28]	@ (8001134 <HAL_Init+0x40>)
 8001116:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800111a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800111c:	2003      	movs	r0, #3
 800111e:	f000 f94f 	bl	80013c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001122:	200f      	movs	r0, #15
 8001124:	f000 f808 	bl	8001138 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001128:	f7ff fe9e 	bl	8000e68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40023c00 	.word	0x40023c00

08001138 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001140:	4b12      	ldr	r3, [pc, #72]	@ (800118c <HAL_InitTick+0x54>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b12      	ldr	r3, [pc, #72]	@ (8001190 <HAL_InitTick+0x58>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	4619      	mov	r1, r3
 800114a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800114e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001152:	fbb2 f3f3 	udiv	r3, r2, r3
 8001156:	4618      	mov	r0, r3
 8001158:	f000 f967 	bl	800142a <HAL_SYSTICK_Config>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e00e      	b.n	8001184 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2b0f      	cmp	r3, #15
 800116a:	d80a      	bhi.n	8001182 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800116c:	2200      	movs	r2, #0
 800116e:	6879      	ldr	r1, [r7, #4]
 8001170:	f04f 30ff 	mov.w	r0, #4294967295
 8001174:	f000 f92f 	bl	80013d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001178:	4a06      	ldr	r2, [pc, #24]	@ (8001194 <HAL_InitTick+0x5c>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800117e:	2300      	movs	r3, #0
 8001180:	e000      	b.n	8001184 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
}
 8001184:	4618      	mov	r0, r3
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000000 	.word	0x20000000
 8001190:	20000008 	.word	0x20000008
 8001194:	20000004 	.word	0x20000004

08001198 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800119c:	4b06      	ldr	r3, [pc, #24]	@ (80011b8 <HAL_IncTick+0x20>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	461a      	mov	r2, r3
 80011a2:	4b06      	ldr	r3, [pc, #24]	@ (80011bc <HAL_IncTick+0x24>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4413      	add	r3, r2
 80011a8:	4a04      	ldr	r2, [pc, #16]	@ (80011bc <HAL_IncTick+0x24>)
 80011aa:	6013      	str	r3, [r2, #0]
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	20000008 	.word	0x20000008
 80011bc:	20000114 	.word	0x20000114

080011c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  return uwTick;
 80011c4:	4b03      	ldr	r3, [pc, #12]	@ (80011d4 <HAL_GetTick+0x14>)
 80011c6:	681b      	ldr	r3, [r3, #0]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	20000114 	.word	0x20000114

080011d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011e0:	f7ff ffee 	bl	80011c0 <HAL_GetTick>
 80011e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f0:	d005      	beq.n	80011fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011f2:	4b0a      	ldr	r3, [pc, #40]	@ (800121c <HAL_Delay+0x44>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	461a      	mov	r2, r3
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	4413      	add	r3, r2
 80011fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011fe:	bf00      	nop
 8001200:	f7ff ffde 	bl	80011c0 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	429a      	cmp	r2, r3
 800120e:	d8f7      	bhi.n	8001200 <HAL_Delay+0x28>
  {
  }
}
 8001210:	bf00      	nop
 8001212:	bf00      	nop
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000008 	.word	0x20000008

08001220 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001230:	4b0c      	ldr	r3, [pc, #48]	@ (8001264 <__NVIC_SetPriorityGrouping+0x44>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001236:	68ba      	ldr	r2, [r7, #8]
 8001238:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800123c:	4013      	ands	r3, r2
 800123e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001248:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800124c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001252:	4a04      	ldr	r2, [pc, #16]	@ (8001264 <__NVIC_SetPriorityGrouping+0x44>)
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	60d3      	str	r3, [r2, #12]
}
 8001258:	bf00      	nop
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800126c:	4b04      	ldr	r3, [pc, #16]	@ (8001280 <__NVIC_GetPriorityGrouping+0x18>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	0a1b      	lsrs	r3, r3, #8
 8001272:	f003 0307 	and.w	r3, r3, #7
}
 8001276:	4618      	mov	r0, r3
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001292:	2b00      	cmp	r3, #0
 8001294:	db0b      	blt.n	80012ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	f003 021f 	and.w	r2, r3, #31
 800129c:	4907      	ldr	r1, [pc, #28]	@ (80012bc <__NVIC_EnableIRQ+0x38>)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	095b      	lsrs	r3, r3, #5
 80012a4:	2001      	movs	r0, #1
 80012a6:	fa00 f202 	lsl.w	r2, r0, r2
 80012aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	e000e100 	.word	0xe000e100

080012c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	6039      	str	r1, [r7, #0]
 80012ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	db0a      	blt.n	80012ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	490c      	ldr	r1, [pc, #48]	@ (800130c <__NVIC_SetPriority+0x4c>)
 80012da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012de:	0112      	lsls	r2, r2, #4
 80012e0:	b2d2      	uxtb	r2, r2
 80012e2:	440b      	add	r3, r1
 80012e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e8:	e00a      	b.n	8001300 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	4908      	ldr	r1, [pc, #32]	@ (8001310 <__NVIC_SetPriority+0x50>)
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	f003 030f 	and.w	r3, r3, #15
 80012f6:	3b04      	subs	r3, #4
 80012f8:	0112      	lsls	r2, r2, #4
 80012fa:	b2d2      	uxtb	r2, r2
 80012fc:	440b      	add	r3, r1
 80012fe:	761a      	strb	r2, [r3, #24]
}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	e000e100 	.word	0xe000e100
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001314:	b480      	push	{r7}
 8001316:	b089      	sub	sp, #36	@ 0x24
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	f1c3 0307 	rsb	r3, r3, #7
 800132e:	2b04      	cmp	r3, #4
 8001330:	bf28      	it	cs
 8001332:	2304      	movcs	r3, #4
 8001334:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3304      	adds	r3, #4
 800133a:	2b06      	cmp	r3, #6
 800133c:	d902      	bls.n	8001344 <NVIC_EncodePriority+0x30>
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	3b03      	subs	r3, #3
 8001342:	e000      	b.n	8001346 <NVIC_EncodePriority+0x32>
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001348:	f04f 32ff 	mov.w	r2, #4294967295
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43da      	mvns	r2, r3
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	401a      	ands	r2, r3
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800135c:	f04f 31ff 	mov.w	r1, #4294967295
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	fa01 f303 	lsl.w	r3, r1, r3
 8001366:	43d9      	mvns	r1, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800136c:	4313      	orrs	r3, r2
         );
}
 800136e:	4618      	mov	r0, r3
 8001370:	3724      	adds	r7, #36	@ 0x24
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
	...

0800137c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3b01      	subs	r3, #1
 8001388:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800138c:	d301      	bcc.n	8001392 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800138e:	2301      	movs	r3, #1
 8001390:	e00f      	b.n	80013b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001392:	4a0a      	ldr	r2, [pc, #40]	@ (80013bc <SysTick_Config+0x40>)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3b01      	subs	r3, #1
 8001398:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800139a:	210f      	movs	r1, #15
 800139c:	f04f 30ff 	mov.w	r0, #4294967295
 80013a0:	f7ff ff8e 	bl	80012c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a4:	4b05      	ldr	r3, [pc, #20]	@ (80013bc <SysTick_Config+0x40>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013aa:	4b04      	ldr	r3, [pc, #16]	@ (80013bc <SysTick_Config+0x40>)
 80013ac:	2207      	movs	r2, #7
 80013ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	e000e010 	.word	0xe000e010

080013c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff ff29 	bl	8001220 <__NVIC_SetPriorityGrouping>
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b086      	sub	sp, #24
 80013da:	af00      	add	r7, sp, #0
 80013dc:	4603      	mov	r3, r0
 80013de:	60b9      	str	r1, [r7, #8]
 80013e0:	607a      	str	r2, [r7, #4]
 80013e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013e8:	f7ff ff3e 	bl	8001268 <__NVIC_GetPriorityGrouping>
 80013ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	68b9      	ldr	r1, [r7, #8]
 80013f2:	6978      	ldr	r0, [r7, #20]
 80013f4:	f7ff ff8e 	bl	8001314 <NVIC_EncodePriority>
 80013f8:	4602      	mov	r2, r0
 80013fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013fe:	4611      	mov	r1, r2
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff ff5d 	bl	80012c0 <__NVIC_SetPriority>
}
 8001406:	bf00      	nop
 8001408:	3718      	adds	r7, #24
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b082      	sub	sp, #8
 8001412:	af00      	add	r7, sp, #0
 8001414:	4603      	mov	r3, r0
 8001416:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff ff31 	bl	8001284 <__NVIC_EnableIRQ>
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff ffa2 	bl	800137c <SysTick_Config>
 8001438:	4603      	mov	r3, r0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b084      	sub	sp, #16
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800144e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001450:	f7ff feb6 	bl	80011c0 <HAL_GetTick>
 8001454:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800145c:	b2db      	uxtb	r3, r3
 800145e:	2b02      	cmp	r3, #2
 8001460:	d008      	beq.n	8001474 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2280      	movs	r2, #128	@ 0x80
 8001466:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e052      	b.n	800151a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 0216 	bic.w	r2, r2, #22
 8001482:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	695a      	ldr	r2, [r3, #20]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001492:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001498:	2b00      	cmp	r3, #0
 800149a:	d103      	bne.n	80014a4 <HAL_DMA_Abort+0x62>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d007      	beq.n	80014b4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f022 0208 	bic.w	r2, r2, #8
 80014b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f022 0201 	bic.w	r2, r2, #1
 80014c2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014c4:	e013      	b.n	80014ee <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014c6:	f7ff fe7b 	bl	80011c0 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b05      	cmp	r3, #5
 80014d2:	d90c      	bls.n	80014ee <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2220      	movs	r2, #32
 80014d8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2203      	movs	r2, #3
 80014de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e015      	b.n	800151a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1e4      	bne.n	80014c6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001500:	223f      	movs	r2, #63	@ 0x3f
 8001502:	409a      	lsls	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2201      	movs	r2, #1
 800150c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001522:	b480      	push	{r7}
 8001524:	b083      	sub	sp, #12
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d004      	beq.n	8001540 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2280      	movs	r2, #128	@ 0x80
 800153a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e00c      	b.n	800155a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2205      	movs	r2, #5
 8001544:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f022 0201 	bic.w	r2, r2, #1
 8001556:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
	...

08001568 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800157a:	4b23      	ldr	r3, [pc, #140]	@ (8001608 <HAL_FLASH_Program+0xa0>)
 800157c:	7e1b      	ldrb	r3, [r3, #24]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d101      	bne.n	8001586 <HAL_FLASH_Program+0x1e>
 8001582:	2302      	movs	r3, #2
 8001584:	e03b      	b.n	80015fe <HAL_FLASH_Program+0x96>
 8001586:	4b20      	ldr	r3, [pc, #128]	@ (8001608 <HAL_FLASH_Program+0xa0>)
 8001588:	2201      	movs	r2, #1
 800158a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800158c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001590:	f000 f870 	bl	8001674 <FLASH_WaitForLastOperation>
 8001594:	4603      	mov	r3, r0
 8001596:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8001598:	7dfb      	ldrb	r3, [r7, #23]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d12b      	bne.n	80015f6 <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d105      	bne.n	80015b0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80015a4:	783b      	ldrb	r3, [r7, #0]
 80015a6:	4619      	mov	r1, r3
 80015a8:	68b8      	ldr	r0, [r7, #8]
 80015aa:	f000 f91b 	bl	80017e4 <FLASH_Program_Byte>
 80015ae:	e016      	b.n	80015de <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d105      	bne.n	80015c2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80015b6:	883b      	ldrh	r3, [r7, #0]
 80015b8:	4619      	mov	r1, r3
 80015ba:	68b8      	ldr	r0, [r7, #8]
 80015bc:	f000 f8ee 	bl	800179c <FLASH_Program_HalfWord>
 80015c0:	e00d      	b.n	80015de <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d105      	bne.n	80015d4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	4619      	mov	r1, r3
 80015cc:	68b8      	ldr	r0, [r7, #8]
 80015ce:	f000 f8c3 	bl	8001758 <FLASH_Program_Word>
 80015d2:	e004      	b.n	80015de <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80015d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015d8:	68b8      	ldr	r0, [r7, #8]
 80015da:	f000 f88b 	bl	80016f4 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80015de:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80015e2:	f000 f847 	bl	8001674 <FLASH_WaitForLastOperation>
 80015e6:	4603      	mov	r3, r0
 80015e8:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80015ea:	4b08      	ldr	r3, [pc, #32]	@ (800160c <HAL_FLASH_Program+0xa4>)
 80015ec:	691b      	ldr	r3, [r3, #16]
 80015ee:	4a07      	ldr	r2, [pc, #28]	@ (800160c <HAL_FLASH_Program+0xa4>)
 80015f0:	f023 0301 	bic.w	r3, r3, #1
 80015f4:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80015f6:	4b04      	ldr	r3, [pc, #16]	@ (8001608 <HAL_FLASH_Program+0xa0>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	761a      	strb	r2, [r3, #24]

  return status;
 80015fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3718      	adds	r7, #24
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000118 	.word	0x20000118
 800160c:	40023c00 	.word	0x40023c00

08001610 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001616:	2300      	movs	r3, #0
 8001618:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800161a:	4b0b      	ldr	r3, [pc, #44]	@ (8001648 <HAL_FLASH_Unlock+0x38>)
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	2b00      	cmp	r3, #0
 8001620:	da0b      	bge.n	800163a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001622:	4b09      	ldr	r3, [pc, #36]	@ (8001648 <HAL_FLASH_Unlock+0x38>)
 8001624:	4a09      	ldr	r2, [pc, #36]	@ (800164c <HAL_FLASH_Unlock+0x3c>)
 8001626:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001628:	4b07      	ldr	r3, [pc, #28]	@ (8001648 <HAL_FLASH_Unlock+0x38>)
 800162a:	4a09      	ldr	r2, [pc, #36]	@ (8001650 <HAL_FLASH_Unlock+0x40>)
 800162c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800162e:	4b06      	ldr	r3, [pc, #24]	@ (8001648 <HAL_FLASH_Unlock+0x38>)
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	2b00      	cmp	r3, #0
 8001634:	da01      	bge.n	800163a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800163a:	79fb      	ldrb	r3, [r7, #7]
}
 800163c:	4618      	mov	r0, r3
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	40023c00 	.word	0x40023c00
 800164c:	45670123 	.word	0x45670123
 8001650:	cdef89ab 	.word	0xcdef89ab

08001654 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001658:	4b05      	ldr	r3, [pc, #20]	@ (8001670 <HAL_FLASH_Lock+0x1c>)
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	4a04      	ldr	r2, [pc, #16]	@ (8001670 <HAL_FLASH_Lock+0x1c>)
 800165e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001662:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	40023c00 	.word	0x40023c00

08001674 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800167c:	2300      	movs	r3, #0
 800167e:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001680:	4b1a      	ldr	r3, [pc, #104]	@ (80016ec <FLASH_WaitForLastOperation+0x78>)
 8001682:	2200      	movs	r2, #0
 8001684:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001686:	f7ff fd9b 	bl	80011c0 <HAL_GetTick>
 800168a:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 800168c:	e010      	b.n	80016b0 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001694:	d00c      	beq.n	80016b0 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d007      	beq.n	80016ac <FLASH_WaitForLastOperation+0x38>
 800169c:	f7ff fd90 	bl	80011c0 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d201      	bcs.n	80016b0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e019      	b.n	80016e4 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80016b0:	4b0f      	ldr	r3, [pc, #60]	@ (80016f0 <FLASH_WaitForLastOperation+0x7c>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d1e8      	bne.n	800168e <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80016bc:	4b0c      	ldr	r3, [pc, #48]	@ (80016f0 <FLASH_WaitForLastOperation+0x7c>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d002      	beq.n	80016ce <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80016c8:	4b09      	ldr	r3, [pc, #36]	@ (80016f0 <FLASH_WaitForLastOperation+0x7c>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80016ce:	4b08      	ldr	r3, [pc, #32]	@ (80016f0 <FLASH_WaitForLastOperation+0x7c>)
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80016da:	f000 f8a5 	bl	8001828 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e000      	b.n	80016e4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80016e2:	2300      	movs	r3, #0

}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000118 	.word	0x20000118
 80016f0:	40023c00 	.word	0x40023c00

080016f4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001700:	4b14      	ldr	r3, [pc, #80]	@ (8001754 <FLASH_Program_DoubleWord+0x60>)
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	4a13      	ldr	r2, [pc, #76]	@ (8001754 <FLASH_Program_DoubleWord+0x60>)
 8001706:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800170a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800170c:	4b11      	ldr	r3, [pc, #68]	@ (8001754 <FLASH_Program_DoubleWord+0x60>)
 800170e:	691b      	ldr	r3, [r3, #16]
 8001710:	4a10      	ldr	r2, [pc, #64]	@ (8001754 <FLASH_Program_DoubleWord+0x60>)
 8001712:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001716:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001718:	4b0e      	ldr	r3, [pc, #56]	@ (8001754 <FLASH_Program_DoubleWord+0x60>)
 800171a:	691b      	ldr	r3, [r3, #16]
 800171c:	4a0d      	ldr	r2, [pc, #52]	@ (8001754 <FLASH_Program_DoubleWord+0x60>)
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800172a:	f3bf 8f6f 	isb	sy
}
 800172e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8001730:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001734:	f04f 0200 	mov.w	r2, #0
 8001738:	f04f 0300 	mov.w	r3, #0
 800173c:	000a      	movs	r2, r1
 800173e:	2300      	movs	r3, #0
 8001740:	68f9      	ldr	r1, [r7, #12]
 8001742:	3104      	adds	r1, #4
 8001744:	4613      	mov	r3, r2
 8001746:	600b      	str	r3, [r1, #0]
}
 8001748:	bf00      	nop
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	40023c00 	.word	0x40023c00

08001758 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001762:	4b0d      	ldr	r3, [pc, #52]	@ (8001798 <FLASH_Program_Word+0x40>)
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	4a0c      	ldr	r2, [pc, #48]	@ (8001798 <FLASH_Program_Word+0x40>)
 8001768:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800176c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800176e:	4b0a      	ldr	r3, [pc, #40]	@ (8001798 <FLASH_Program_Word+0x40>)
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	4a09      	ldr	r2, [pc, #36]	@ (8001798 <FLASH_Program_Word+0x40>)
 8001774:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001778:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800177a:	4b07      	ldr	r3, [pc, #28]	@ (8001798 <FLASH_Program_Word+0x40>)
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	4a06      	ldr	r2, [pc, #24]	@ (8001798 <FLASH_Program_Word+0x40>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	601a      	str	r2, [r3, #0]
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	40023c00 	.word	0x40023c00

0800179c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	460b      	mov	r3, r1
 80017a6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80017a8:	4b0d      	ldr	r3, [pc, #52]	@ (80017e0 <FLASH_Program_HalfWord+0x44>)
 80017aa:	691b      	ldr	r3, [r3, #16]
 80017ac:	4a0c      	ldr	r2, [pc, #48]	@ (80017e0 <FLASH_Program_HalfWord+0x44>)
 80017ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80017b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80017b4:	4b0a      	ldr	r3, [pc, #40]	@ (80017e0 <FLASH_Program_HalfWord+0x44>)
 80017b6:	691b      	ldr	r3, [r3, #16]
 80017b8:	4a09      	ldr	r2, [pc, #36]	@ (80017e0 <FLASH_Program_HalfWord+0x44>)
 80017ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80017c0:	4b07      	ldr	r3, [pc, #28]	@ (80017e0 <FLASH_Program_HalfWord+0x44>)
 80017c2:	691b      	ldr	r3, [r3, #16]
 80017c4:	4a06      	ldr	r2, [pc, #24]	@ (80017e0 <FLASH_Program_HalfWord+0x44>)
 80017c6:	f043 0301 	orr.w	r3, r3, #1
 80017ca:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	887a      	ldrh	r2, [r7, #2]
 80017d0:	801a      	strh	r2, [r3, #0]
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	40023c00 	.word	0x40023c00

080017e4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	460b      	mov	r3, r1
 80017ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80017f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001824 <FLASH_Program_Byte+0x40>)
 80017f2:	691b      	ldr	r3, [r3, #16]
 80017f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001824 <FLASH_Program_Byte+0x40>)
 80017f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80017fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80017fc:	4b09      	ldr	r3, [pc, #36]	@ (8001824 <FLASH_Program_Byte+0x40>)
 80017fe:	4a09      	ldr	r2, [pc, #36]	@ (8001824 <FLASH_Program_Byte+0x40>)
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001804:	4b07      	ldr	r3, [pc, #28]	@ (8001824 <FLASH_Program_Byte+0x40>)
 8001806:	691b      	ldr	r3, [r3, #16]
 8001808:	4a06      	ldr	r2, [pc, #24]	@ (8001824 <FLASH_Program_Byte+0x40>)
 800180a:	f043 0301 	orr.w	r3, r3, #1
 800180e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	78fa      	ldrb	r2, [r7, #3]
 8001814:	701a      	strb	r2, [r3, #0]
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	40023c00 	.word	0x40023c00

08001828 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800182c:	4b2f      	ldr	r3, [pc, #188]	@ (80018ec <FLASH_SetErrorCode+0xc4>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	f003 0310 	and.w	r3, r3, #16
 8001834:	2b00      	cmp	r3, #0
 8001836:	d008      	beq.n	800184a <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001838:	4b2d      	ldr	r3, [pc, #180]	@ (80018f0 <FLASH_SetErrorCode+0xc8>)
 800183a:	69db      	ldr	r3, [r3, #28]
 800183c:	f043 0310 	orr.w	r3, r3, #16
 8001840:	4a2b      	ldr	r2, [pc, #172]	@ (80018f0 <FLASH_SetErrorCode+0xc8>)
 8001842:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001844:	4b29      	ldr	r3, [pc, #164]	@ (80018ec <FLASH_SetErrorCode+0xc4>)
 8001846:	2210      	movs	r2, #16
 8001848:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800184a:	4b28      	ldr	r3, [pc, #160]	@ (80018ec <FLASH_SetErrorCode+0xc4>)
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	f003 0320 	and.w	r3, r3, #32
 8001852:	2b00      	cmp	r3, #0
 8001854:	d008      	beq.n	8001868 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001856:	4b26      	ldr	r3, [pc, #152]	@ (80018f0 <FLASH_SetErrorCode+0xc8>)
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	f043 0308 	orr.w	r3, r3, #8
 800185e:	4a24      	ldr	r2, [pc, #144]	@ (80018f0 <FLASH_SetErrorCode+0xc8>)
 8001860:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001862:	4b22      	ldr	r3, [pc, #136]	@ (80018ec <FLASH_SetErrorCode+0xc4>)
 8001864:	2220      	movs	r2, #32
 8001866:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001868:	4b20      	ldr	r3, [pc, #128]	@ (80018ec <FLASH_SetErrorCode+0xc4>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001870:	2b00      	cmp	r3, #0
 8001872:	d008      	beq.n	8001886 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001874:	4b1e      	ldr	r3, [pc, #120]	@ (80018f0 <FLASH_SetErrorCode+0xc8>)
 8001876:	69db      	ldr	r3, [r3, #28]
 8001878:	f043 0304 	orr.w	r3, r3, #4
 800187c:	4a1c      	ldr	r2, [pc, #112]	@ (80018f0 <FLASH_SetErrorCode+0xc8>)
 800187e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001880:	4b1a      	ldr	r3, [pc, #104]	@ (80018ec <FLASH_SetErrorCode+0xc4>)
 8001882:	2240      	movs	r2, #64	@ 0x40
 8001884:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001886:	4b19      	ldr	r3, [pc, #100]	@ (80018ec <FLASH_SetErrorCode+0xc4>)
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800188e:	2b00      	cmp	r3, #0
 8001890:	d008      	beq.n	80018a4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001892:	4b17      	ldr	r3, [pc, #92]	@ (80018f0 <FLASH_SetErrorCode+0xc8>)
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	f043 0302 	orr.w	r3, r3, #2
 800189a:	4a15      	ldr	r2, [pc, #84]	@ (80018f0 <FLASH_SetErrorCode+0xc8>)
 800189c:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800189e:	4b13      	ldr	r3, [pc, #76]	@ (80018ec <FLASH_SetErrorCode+0xc4>)
 80018a0:	2280      	movs	r2, #128	@ 0x80
 80018a2:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80018a4:	4b11      	ldr	r3, [pc, #68]	@ (80018ec <FLASH_SetErrorCode+0xc4>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d009      	beq.n	80018c4 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80018b0:	4b0f      	ldr	r3, [pc, #60]	@ (80018f0 <FLASH_SetErrorCode+0xc8>)
 80018b2:	69db      	ldr	r3, [r3, #28]
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	4a0d      	ldr	r2, [pc, #52]	@ (80018f0 <FLASH_SetErrorCode+0xc8>)
 80018ba:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80018bc:	4b0b      	ldr	r3, [pc, #44]	@ (80018ec <FLASH_SetErrorCode+0xc4>)
 80018be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018c2:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80018c4:	4b09      	ldr	r3, [pc, #36]	@ (80018ec <FLASH_SetErrorCode+0xc4>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d008      	beq.n	80018e2 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80018d0:	4b07      	ldr	r3, [pc, #28]	@ (80018f0 <FLASH_SetErrorCode+0xc8>)
 80018d2:	69db      	ldr	r3, [r3, #28]
 80018d4:	f043 0320 	orr.w	r3, r3, #32
 80018d8:	4a05      	ldr	r2, [pc, #20]	@ (80018f0 <FLASH_SetErrorCode+0xc8>)
 80018da:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80018dc:	4b03      	ldr	r3, [pc, #12]	@ (80018ec <FLASH_SetErrorCode+0xc4>)
 80018de:	2202      	movs	r2, #2
 80018e0:	60da      	str	r2, [r3, #12]
  }
}
 80018e2:	bf00      	nop
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	40023c00 	.word	0x40023c00
 80018f0:	20000118 	.word	0x20000118

080018f4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001902:	2300      	movs	r3, #0
 8001904:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001906:	4b31      	ldr	r3, [pc, #196]	@ (80019cc <HAL_FLASHEx_Erase+0xd8>)
 8001908:	7e1b      	ldrb	r3, [r3, #24]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d101      	bne.n	8001912 <HAL_FLASHEx_Erase+0x1e>
 800190e:	2302      	movs	r3, #2
 8001910:	e058      	b.n	80019c4 <HAL_FLASHEx_Erase+0xd0>
 8001912:	4b2e      	ldr	r3, [pc, #184]	@ (80019cc <HAL_FLASHEx_Erase+0xd8>)
 8001914:	2201      	movs	r2, #1
 8001916:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001918:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800191c:	f7ff feaa 	bl	8001674 <FLASH_WaitForLastOperation>
 8001920:	4603      	mov	r3, r0
 8001922:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001924:	7bfb      	ldrb	r3, [r7, #15]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d148      	bne.n	80019bc <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	f04f 32ff 	mov.w	r2, #4294967295
 8001930:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2b01      	cmp	r3, #1
 8001938:	d115      	bne.n	8001966 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	691b      	ldr	r3, [r3, #16]
 800193e:	b2da      	uxtb	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	4619      	mov	r1, r3
 8001946:	4610      	mov	r0, r2
 8001948:	f000 f844 	bl	80019d4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800194c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001950:	f7ff fe90 	bl	8001674 <FLASH_WaitForLastOperation>
 8001954:	4603      	mov	r3, r0
 8001956:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001958:	4b1d      	ldr	r3, [pc, #116]	@ (80019d0 <HAL_FLASHEx_Erase+0xdc>)
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	4a1c      	ldr	r2, [pc, #112]	@ (80019d0 <HAL_FLASHEx_Erase+0xdc>)
 800195e:	f023 0304 	bic.w	r3, r3, #4
 8001962:	6113      	str	r3, [r2, #16]
 8001964:	e028      	b.n	80019b8 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	e01c      	b.n	80019a8 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	b2db      	uxtb	r3, r3
 8001974:	4619      	mov	r1, r3
 8001976:	68b8      	ldr	r0, [r7, #8]
 8001978:	f000 f850 	bl	8001a1c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800197c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001980:	f7ff fe78 	bl	8001674 <FLASH_WaitForLastOperation>
 8001984:	4603      	mov	r3, r0
 8001986:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001988:	4b11      	ldr	r3, [pc, #68]	@ (80019d0 <HAL_FLASHEx_Erase+0xdc>)
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	4a10      	ldr	r2, [pc, #64]	@ (80019d0 <HAL_FLASHEx_Erase+0xdc>)
 800198e:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8001992:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001994:	7bfb      	ldrb	r3, [r7, #15]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	68ba      	ldr	r2, [r7, #8]
 800199e:	601a      	str	r2, [r3, #0]
          break;
 80019a0:	e00a      	b.n	80019b8 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	3301      	adds	r3, #1
 80019a6:	60bb      	str	r3, [r7, #8]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	68da      	ldr	r2, [r3, #12]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	4413      	add	r3, r2
 80019b2:	68ba      	ldr	r2, [r7, #8]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d3da      	bcc.n	800196e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80019b8:	f000 f878 	bl	8001aac <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80019bc:	4b03      	ldr	r3, [pc, #12]	@ (80019cc <HAL_FLASHEx_Erase+0xd8>)
 80019be:	2200      	movs	r2, #0
 80019c0:	761a      	strb	r2, [r3, #24]

  return status;
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3710      	adds	r7, #16
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20000118 	.word	0x20000118
 80019d0:	40023c00 	.word	0x40023c00

080019d4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	6039      	str	r1, [r7, #0]
 80019de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80019e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001a18 <FLASH_MassErase+0x44>)
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	4a0c      	ldr	r2, [pc, #48]	@ (8001a18 <FLASH_MassErase+0x44>)
 80019e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80019ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80019ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001a18 <FLASH_MassErase+0x44>)
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	4a09      	ldr	r2, [pc, #36]	@ (8001a18 <FLASH_MassErase+0x44>)
 80019f2:	f043 0304 	orr.w	r3, r3, #4
 80019f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80019f8:	4b07      	ldr	r3, [pc, #28]	@ (8001a18 <FLASH_MassErase+0x44>)
 80019fa:	691a      	ldr	r2, [r3, #16]
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	021b      	lsls	r3, r3, #8
 8001a00:	4313      	orrs	r3, r2
 8001a02:	4a05      	ldr	r2, [pc, #20]	@ (8001a18 <FLASH_MassErase+0x44>)
 8001a04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a08:	6113      	str	r3, [r2, #16]
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	40023c00 	.word	0x40023c00

08001a1c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	460b      	mov	r3, r1
 8001a26:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001a2c:	78fb      	ldrb	r3, [r7, #3]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d102      	bne.n	8001a38 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	e010      	b.n	8001a5a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001a38:	78fb      	ldrb	r3, [r7, #3]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d103      	bne.n	8001a46 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001a3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	e009      	b.n	8001a5a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001a46:	78fb      	ldrb	r3, [r7, #3]
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d103      	bne.n	8001a54 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001a4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	e002      	b.n	8001a5a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001a54:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a58:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001a5a:	4b13      	ldr	r3, [pc, #76]	@ (8001aa8 <FLASH_Erase_Sector+0x8c>)
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	4a12      	ldr	r2, [pc, #72]	@ (8001aa8 <FLASH_Erase_Sector+0x8c>)
 8001a60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001a64:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001a66:	4b10      	ldr	r3, [pc, #64]	@ (8001aa8 <FLASH_Erase_Sector+0x8c>)
 8001a68:	691a      	ldr	r2, [r3, #16]
 8001a6a:	490f      	ldr	r1, [pc, #60]	@ (8001aa8 <FLASH_Erase_Sector+0x8c>)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001a72:	4b0d      	ldr	r3, [pc, #52]	@ (8001aa8 <FLASH_Erase_Sector+0x8c>)
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	4a0c      	ldr	r2, [pc, #48]	@ (8001aa8 <FLASH_Erase_Sector+0x8c>)
 8001a78:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001a7c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa8 <FLASH_Erase_Sector+0x8c>)
 8001a80:	691a      	ldr	r2, [r3, #16]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	4313      	orrs	r3, r2
 8001a88:	4a07      	ldr	r2, [pc, #28]	@ (8001aa8 <FLASH_Erase_Sector+0x8c>)
 8001a8a:	f043 0302 	orr.w	r3, r3, #2
 8001a8e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001a90:	4b05      	ldr	r3, [pc, #20]	@ (8001aa8 <FLASH_Erase_Sector+0x8c>)
 8001a92:	691b      	ldr	r3, [r3, #16]
 8001a94:	4a04      	ldr	r2, [pc, #16]	@ (8001aa8 <FLASH_Erase_Sector+0x8c>)
 8001a96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a9a:	6113      	str	r3, [r2, #16]
}
 8001a9c:	bf00      	nop
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	40023c00 	.word	0x40023c00

08001aac <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001ab0:	4b20      	ldr	r3, [pc, #128]	@ (8001b34 <FLASH_FlushCaches+0x88>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d017      	beq.n	8001aec <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001abc:	4b1d      	ldr	r3, [pc, #116]	@ (8001b34 <FLASH_FlushCaches+0x88>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a1c      	ldr	r2, [pc, #112]	@ (8001b34 <FLASH_FlushCaches+0x88>)
 8001ac2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001ac6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001ac8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b34 <FLASH_FlushCaches+0x88>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a19      	ldr	r2, [pc, #100]	@ (8001b34 <FLASH_FlushCaches+0x88>)
 8001ace:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ad2:	6013      	str	r3, [r2, #0]
 8001ad4:	4b17      	ldr	r3, [pc, #92]	@ (8001b34 <FLASH_FlushCaches+0x88>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a16      	ldr	r2, [pc, #88]	@ (8001b34 <FLASH_FlushCaches+0x88>)
 8001ada:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001ade:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ae0:	4b14      	ldr	r3, [pc, #80]	@ (8001b34 <FLASH_FlushCaches+0x88>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a13      	ldr	r2, [pc, #76]	@ (8001b34 <FLASH_FlushCaches+0x88>)
 8001ae6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001aea:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001aec:	4b11      	ldr	r3, [pc, #68]	@ (8001b34 <FLASH_FlushCaches+0x88>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d017      	beq.n	8001b28 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001af8:	4b0e      	ldr	r3, [pc, #56]	@ (8001b34 <FLASH_FlushCaches+0x88>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a0d      	ldr	r2, [pc, #52]	@ (8001b34 <FLASH_FlushCaches+0x88>)
 8001afe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001b02:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001b04:	4b0b      	ldr	r3, [pc, #44]	@ (8001b34 <FLASH_FlushCaches+0x88>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a0a      	ldr	r2, [pc, #40]	@ (8001b34 <FLASH_FlushCaches+0x88>)
 8001b0a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b0e:	6013      	str	r3, [r2, #0]
 8001b10:	4b08      	ldr	r3, [pc, #32]	@ (8001b34 <FLASH_FlushCaches+0x88>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a07      	ldr	r2, [pc, #28]	@ (8001b34 <FLASH_FlushCaches+0x88>)
 8001b16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001b1a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b1c:	4b05      	ldr	r3, [pc, #20]	@ (8001b34 <FLASH_FlushCaches+0x88>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a04      	ldr	r2, [pc, #16]	@ (8001b34 <FLASH_FlushCaches+0x88>)
 8001b22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b26:	6013      	str	r3, [r2, #0]
  }
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	40023c00 	.word	0x40023c00

08001b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b089      	sub	sp, #36	@ 0x24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b42:	2300      	movs	r3, #0
 8001b44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61fb      	str	r3, [r7, #28]
 8001b52:	e165      	b.n	8001e20 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b54:	2201      	movs	r2, #1
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	697a      	ldr	r2, [r7, #20]
 8001b64:	4013      	ands	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	f040 8154 	bne.w	8001e1a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f003 0303 	and.w	r3, r3, #3
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d005      	beq.n	8001b8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d130      	bne.n	8001bec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	2203      	movs	r2, #3
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	68da      	ldr	r2, [r3, #12]
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	091b      	lsrs	r3, r3, #4
 8001bd6:	f003 0201 	and.w	r2, r3, #1
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 0303 	and.w	r3, r3, #3
 8001bf4:	2b03      	cmp	r3, #3
 8001bf6:	d017      	beq.n	8001c28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	2203      	movs	r2, #3
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 0303 	and.w	r3, r3, #3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d123      	bne.n	8001c7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	08da      	lsrs	r2, r3, #3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3208      	adds	r2, #8
 8001c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	220f      	movs	r2, #15
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	43db      	mvns	r3, r3
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4013      	ands	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	691a      	ldr	r2, [r3, #16]
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	08da      	lsrs	r2, r3, #3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	3208      	adds	r2, #8
 8001c76:	69b9      	ldr	r1, [r7, #24]
 8001c78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	2203      	movs	r2, #3
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4013      	ands	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f003 0203 	and.w	r2, r3, #3
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	f000 80ae 	beq.w	8001e1a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	4b5d      	ldr	r3, [pc, #372]	@ (8001e38 <HAL_GPIO_Init+0x300>)
 8001cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc6:	4a5c      	ldr	r2, [pc, #368]	@ (8001e38 <HAL_GPIO_Init+0x300>)
 8001cc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ccc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cce:	4b5a      	ldr	r3, [pc, #360]	@ (8001e38 <HAL_GPIO_Init+0x300>)
 8001cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cda:	4a58      	ldr	r2, [pc, #352]	@ (8001e3c <HAL_GPIO_Init+0x304>)
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	089b      	lsrs	r3, r3, #2
 8001ce0:	3302      	adds	r3, #2
 8001ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	f003 0303 	and.w	r3, r3, #3
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	220f      	movs	r2, #15
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a4f      	ldr	r2, [pc, #316]	@ (8001e40 <HAL_GPIO_Init+0x308>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d025      	beq.n	8001d52 <HAL_GPIO_Init+0x21a>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a4e      	ldr	r2, [pc, #312]	@ (8001e44 <HAL_GPIO_Init+0x30c>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d01f      	beq.n	8001d4e <HAL_GPIO_Init+0x216>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a4d      	ldr	r2, [pc, #308]	@ (8001e48 <HAL_GPIO_Init+0x310>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d019      	beq.n	8001d4a <HAL_GPIO_Init+0x212>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a4c      	ldr	r2, [pc, #304]	@ (8001e4c <HAL_GPIO_Init+0x314>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d013      	beq.n	8001d46 <HAL_GPIO_Init+0x20e>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a4b      	ldr	r2, [pc, #300]	@ (8001e50 <HAL_GPIO_Init+0x318>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d00d      	beq.n	8001d42 <HAL_GPIO_Init+0x20a>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a4a      	ldr	r2, [pc, #296]	@ (8001e54 <HAL_GPIO_Init+0x31c>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d007      	beq.n	8001d3e <HAL_GPIO_Init+0x206>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a49      	ldr	r2, [pc, #292]	@ (8001e58 <HAL_GPIO_Init+0x320>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d101      	bne.n	8001d3a <HAL_GPIO_Init+0x202>
 8001d36:	2306      	movs	r3, #6
 8001d38:	e00c      	b.n	8001d54 <HAL_GPIO_Init+0x21c>
 8001d3a:	2307      	movs	r3, #7
 8001d3c:	e00a      	b.n	8001d54 <HAL_GPIO_Init+0x21c>
 8001d3e:	2305      	movs	r3, #5
 8001d40:	e008      	b.n	8001d54 <HAL_GPIO_Init+0x21c>
 8001d42:	2304      	movs	r3, #4
 8001d44:	e006      	b.n	8001d54 <HAL_GPIO_Init+0x21c>
 8001d46:	2303      	movs	r3, #3
 8001d48:	e004      	b.n	8001d54 <HAL_GPIO_Init+0x21c>
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	e002      	b.n	8001d54 <HAL_GPIO_Init+0x21c>
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e000      	b.n	8001d54 <HAL_GPIO_Init+0x21c>
 8001d52:	2300      	movs	r3, #0
 8001d54:	69fa      	ldr	r2, [r7, #28]
 8001d56:	f002 0203 	and.w	r2, r2, #3
 8001d5a:	0092      	lsls	r2, r2, #2
 8001d5c:	4093      	lsls	r3, r2
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d64:	4935      	ldr	r1, [pc, #212]	@ (8001e3c <HAL_GPIO_Init+0x304>)
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	089b      	lsrs	r3, r3, #2
 8001d6a:	3302      	adds	r3, #2
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d72:	4b3a      	ldr	r3, [pc, #232]	@ (8001e5c <HAL_GPIO_Init+0x324>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d96:	4a31      	ldr	r2, [pc, #196]	@ (8001e5c <HAL_GPIO_Init+0x324>)
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d9c:	4b2f      	ldr	r3, [pc, #188]	@ (8001e5c <HAL_GPIO_Init+0x324>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	43db      	mvns	r3, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4013      	ands	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d003      	beq.n	8001dc0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dc0:	4a26      	ldr	r2, [pc, #152]	@ (8001e5c <HAL_GPIO_Init+0x324>)
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dc6:	4b25      	ldr	r3, [pc, #148]	@ (8001e5c <HAL_GPIO_Init+0x324>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dea:	4a1c      	ldr	r2, [pc, #112]	@ (8001e5c <HAL_GPIO_Init+0x324>)
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001df0:	4b1a      	ldr	r3, [pc, #104]	@ (8001e5c <HAL_GPIO_Init+0x324>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d003      	beq.n	8001e14 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e14:	4a11      	ldr	r2, [pc, #68]	@ (8001e5c <HAL_GPIO_Init+0x324>)
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	61fb      	str	r3, [r7, #28]
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	2b0f      	cmp	r3, #15
 8001e24:	f67f ae96 	bls.w	8001b54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e28:	bf00      	nop
 8001e2a:	bf00      	nop
 8001e2c:	3724      	adds	r7, #36	@ 0x24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	40013800 	.word	0x40013800
 8001e40:	40020000 	.word	0x40020000
 8001e44:	40020400 	.word	0x40020400
 8001e48:	40020800 	.word	0x40020800
 8001e4c:	40020c00 	.word	0x40020c00
 8001e50:	40021000 	.word	0x40021000
 8001e54:	40021400 	.word	0x40021400
 8001e58:	40021800 	.word	0x40021800
 8001e5c:	40013c00 	.word	0x40013c00

08001e60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	691a      	ldr	r2, [r3, #16]
 8001e70:	887b      	ldrh	r3, [r7, #2]
 8001e72:	4013      	ands	r3, r2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d002      	beq.n	8001e7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	73fb      	strb	r3, [r7, #15]
 8001e7c:	e001      	b.n	8001e82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3714      	adds	r7, #20
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	807b      	strh	r3, [r7, #2]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ea0:	787b      	ldrb	r3, [r7, #1]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ea6:	887a      	ldrh	r2, [r7, #2]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001eac:	e003      	b.n	8001eb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001eae:	887b      	ldrh	r3, [r7, #2]
 8001eb0:	041a      	lsls	r2, r3, #16
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	619a      	str	r2, [r3, #24]
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
	...

08001ec4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d101      	bne.n	8001ed8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e0cc      	b.n	8002072 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ed8:	4b68      	ldr	r3, [pc, #416]	@ (800207c <HAL_RCC_ClockConfig+0x1b8>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 030f 	and.w	r3, r3, #15
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d90c      	bls.n	8001f00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee6:	4b65      	ldr	r3, [pc, #404]	@ (800207c <HAL_RCC_ClockConfig+0x1b8>)
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eee:	4b63      	ldr	r3, [pc, #396]	@ (800207c <HAL_RCC_ClockConfig+0x1b8>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d001      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e0b8      	b.n	8002072 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d020      	beq.n	8001f4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0304 	and.w	r3, r3, #4
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d005      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f18:	4b59      	ldr	r3, [pc, #356]	@ (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	4a58      	ldr	r2, [pc, #352]	@ (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001f22:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0308 	and.w	r3, r3, #8
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d005      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f30:	4b53      	ldr	r3, [pc, #332]	@ (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	4a52      	ldr	r2, [pc, #328]	@ (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001f36:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001f3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f3c:	4b50      	ldr	r3, [pc, #320]	@ (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	494d      	ldr	r1, [pc, #308]	@ (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d044      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d107      	bne.n	8001f72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f62:	4b47      	ldr	r3, [pc, #284]	@ (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d119      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e07f      	b.n	8002072 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d003      	beq.n	8001f82 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f7e:	2b03      	cmp	r3, #3
 8001f80:	d107      	bne.n	8001f92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f82:	4b3f      	ldr	r3, [pc, #252]	@ (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d109      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e06f      	b.n	8002072 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f92:	4b3b      	ldr	r3, [pc, #236]	@ (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e067      	b.n	8002072 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fa2:	4b37      	ldr	r3, [pc, #220]	@ (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f023 0203 	bic.w	r2, r3, #3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	4934      	ldr	r1, [pc, #208]	@ (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fb4:	f7ff f904 	bl	80011c0 <HAL_GetTick>
 8001fb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fba:	e00a      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fbc:	f7ff f900 	bl	80011c0 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e04f      	b.n	8002072 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd2:	4b2b      	ldr	r3, [pc, #172]	@ (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 020c 	and.w	r2, r3, #12
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d1eb      	bne.n	8001fbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fe4:	4b25      	ldr	r3, [pc, #148]	@ (800207c <HAL_RCC_ClockConfig+0x1b8>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 030f 	and.w	r3, r3, #15
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d20c      	bcs.n	800200c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff2:	4b22      	ldr	r3, [pc, #136]	@ (800207c <HAL_RCC_ClockConfig+0x1b8>)
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffa:	4b20      	ldr	r3, [pc, #128]	@ (800207c <HAL_RCC_ClockConfig+0x1b8>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	429a      	cmp	r2, r3
 8002006:	d001      	beq.n	800200c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e032      	b.n	8002072 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	2b00      	cmp	r3, #0
 8002016:	d008      	beq.n	800202a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002018:	4b19      	ldr	r3, [pc, #100]	@ (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	4916      	ldr	r1, [pc, #88]	@ (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8002026:	4313      	orrs	r3, r2
 8002028:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0308 	and.w	r3, r3, #8
 8002032:	2b00      	cmp	r3, #0
 8002034:	d009      	beq.n	800204a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002036:	4b12      	ldr	r3, [pc, #72]	@ (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	490e      	ldr	r1, [pc, #56]	@ (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8002046:	4313      	orrs	r3, r2
 8002048:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800204a:	f000 f855 	bl	80020f8 <HAL_RCC_GetSysClockFreq>
 800204e:	4602      	mov	r2, r0
 8002050:	4b0b      	ldr	r3, [pc, #44]	@ (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	091b      	lsrs	r3, r3, #4
 8002056:	f003 030f 	and.w	r3, r3, #15
 800205a:	490a      	ldr	r1, [pc, #40]	@ (8002084 <HAL_RCC_ClockConfig+0x1c0>)
 800205c:	5ccb      	ldrb	r3, [r1, r3]
 800205e:	fa22 f303 	lsr.w	r3, r2, r3
 8002062:	4a09      	ldr	r2, [pc, #36]	@ (8002088 <HAL_RCC_ClockConfig+0x1c4>)
 8002064:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002066:	4b09      	ldr	r3, [pc, #36]	@ (800208c <HAL_RCC_ClockConfig+0x1c8>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff f864 	bl	8001138 <HAL_InitTick>

  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40023c00 	.word	0x40023c00
 8002080:	40023800 	.word	0x40023800
 8002084:	0800556c 	.word	0x0800556c
 8002088:	20000000 	.word	0x20000000
 800208c:	20000004 	.word	0x20000004

08002090 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002094:	4b03      	ldr	r3, [pc, #12]	@ (80020a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002096:	681b      	ldr	r3, [r3, #0]
}
 8002098:	4618      	mov	r0, r3
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	20000000 	.word	0x20000000

080020a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020ac:	f7ff fff0 	bl	8002090 <HAL_RCC_GetHCLKFreq>
 80020b0:	4602      	mov	r2, r0
 80020b2:	4b05      	ldr	r3, [pc, #20]	@ (80020c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	0a9b      	lsrs	r3, r3, #10
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	4903      	ldr	r1, [pc, #12]	@ (80020cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80020be:	5ccb      	ldrb	r3, [r1, r3]
 80020c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40023800 	.word	0x40023800
 80020cc:	0800557c 	.word	0x0800557c

080020d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020d4:	f7ff ffdc 	bl	8002090 <HAL_RCC_GetHCLKFreq>
 80020d8:	4602      	mov	r2, r0
 80020da:	4b05      	ldr	r3, [pc, #20]	@ (80020f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	0b5b      	lsrs	r3, r3, #13
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	4903      	ldr	r1, [pc, #12]	@ (80020f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020e6:	5ccb      	ldrb	r3, [r1, r3]
 80020e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40023800 	.word	0x40023800
 80020f4:	0800557c 	.word	0x0800557c

080020f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020fc:	b0a6      	sub	sp, #152	@ 0x98
 80020fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002100:	2300      	movs	r3, #0
 8002102:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8002106:	2300      	movs	r3, #0
 8002108:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 800210c:	2300      	movs	r3, #0
 800210e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8002112:	2300      	movs	r3, #0
 8002114:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002118:	2300      	movs	r3, #0
 800211a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800211e:	4bc8      	ldr	r3, [pc, #800]	@ (8002440 <HAL_RCC_GetSysClockFreq+0x348>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 030c 	and.w	r3, r3, #12
 8002126:	2b0c      	cmp	r3, #12
 8002128:	f200 817e 	bhi.w	8002428 <HAL_RCC_GetSysClockFreq+0x330>
 800212c:	a201      	add	r2, pc, #4	@ (adr r2, 8002134 <HAL_RCC_GetSysClockFreq+0x3c>)
 800212e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002132:	bf00      	nop
 8002134:	08002169 	.word	0x08002169
 8002138:	08002429 	.word	0x08002429
 800213c:	08002429 	.word	0x08002429
 8002140:	08002429 	.word	0x08002429
 8002144:	08002171 	.word	0x08002171
 8002148:	08002429 	.word	0x08002429
 800214c:	08002429 	.word	0x08002429
 8002150:	08002429 	.word	0x08002429
 8002154:	08002179 	.word	0x08002179
 8002158:	08002429 	.word	0x08002429
 800215c:	08002429 	.word	0x08002429
 8002160:	08002429 	.word	0x08002429
 8002164:	080022e3 	.word	0x080022e3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002168:	4bb6      	ldr	r3, [pc, #728]	@ (8002444 <HAL_RCC_GetSysClockFreq+0x34c>)
 800216a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800216e:	e15f      	b.n	8002430 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002170:	4bb5      	ldr	r3, [pc, #724]	@ (8002448 <HAL_RCC_GetSysClockFreq+0x350>)
 8002172:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002176:	e15b      	b.n	8002430 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002178:	4bb1      	ldr	r3, [pc, #708]	@ (8002440 <HAL_RCC_GetSysClockFreq+0x348>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002180:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002184:	4bae      	ldr	r3, [pc, #696]	@ (8002440 <HAL_RCC_GetSysClockFreq+0x348>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d031      	beq.n	80021f4 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002190:	4bab      	ldr	r3, [pc, #684]	@ (8002440 <HAL_RCC_GetSysClockFreq+0x348>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	099b      	lsrs	r3, r3, #6
 8002196:	2200      	movs	r2, #0
 8002198:	66bb      	str	r3, [r7, #104]	@ 0x68
 800219a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800219c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800219e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021a2:	663b      	str	r3, [r7, #96]	@ 0x60
 80021a4:	2300      	movs	r3, #0
 80021a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80021a8:	4ba7      	ldr	r3, [pc, #668]	@ (8002448 <HAL_RCC_GetSysClockFreq+0x350>)
 80021aa:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80021ae:	462a      	mov	r2, r5
 80021b0:	fb03 f202 	mul.w	r2, r3, r2
 80021b4:	2300      	movs	r3, #0
 80021b6:	4621      	mov	r1, r4
 80021b8:	fb01 f303 	mul.w	r3, r1, r3
 80021bc:	4413      	add	r3, r2
 80021be:	4aa2      	ldr	r2, [pc, #648]	@ (8002448 <HAL_RCC_GetSysClockFreq+0x350>)
 80021c0:	4621      	mov	r1, r4
 80021c2:	fba1 1202 	umull	r1, r2, r1, r2
 80021c6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80021c8:	460a      	mov	r2, r1
 80021ca:	67ba      	str	r2, [r7, #120]	@ 0x78
 80021cc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80021ce:	4413      	add	r3, r2
 80021d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80021d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021d6:	2200      	movs	r2, #0
 80021d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80021da:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80021dc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80021e0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80021e4:	f7fe f86c 	bl	80002c0 <__aeabi_uldivmod>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	4613      	mov	r3, r2
 80021ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80021f2:	e064      	b.n	80022be <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021f4:	4b92      	ldr	r3, [pc, #584]	@ (8002440 <HAL_RCC_GetSysClockFreq+0x348>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	099b      	lsrs	r3, r3, #6
 80021fa:	2200      	movs	r2, #0
 80021fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80021fe:	657a      	str	r2, [r7, #84]	@ 0x54
 8002200:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002206:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002208:	2300      	movs	r3, #0
 800220a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800220c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002210:	4622      	mov	r2, r4
 8002212:	462b      	mov	r3, r5
 8002214:	f04f 0000 	mov.w	r0, #0
 8002218:	f04f 0100 	mov.w	r1, #0
 800221c:	0159      	lsls	r1, r3, #5
 800221e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002222:	0150      	lsls	r0, r2, #5
 8002224:	4602      	mov	r2, r0
 8002226:	460b      	mov	r3, r1
 8002228:	4621      	mov	r1, r4
 800222a:	1a51      	subs	r1, r2, r1
 800222c:	6139      	str	r1, [r7, #16]
 800222e:	4629      	mov	r1, r5
 8002230:	eb63 0301 	sbc.w	r3, r3, r1
 8002234:	617b      	str	r3, [r7, #20]
 8002236:	f04f 0200 	mov.w	r2, #0
 800223a:	f04f 0300 	mov.w	r3, #0
 800223e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002242:	4659      	mov	r1, fp
 8002244:	018b      	lsls	r3, r1, #6
 8002246:	4651      	mov	r1, sl
 8002248:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800224c:	4651      	mov	r1, sl
 800224e:	018a      	lsls	r2, r1, #6
 8002250:	4651      	mov	r1, sl
 8002252:	ebb2 0801 	subs.w	r8, r2, r1
 8002256:	4659      	mov	r1, fp
 8002258:	eb63 0901 	sbc.w	r9, r3, r1
 800225c:	f04f 0200 	mov.w	r2, #0
 8002260:	f04f 0300 	mov.w	r3, #0
 8002264:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002268:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800226c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002270:	4690      	mov	r8, r2
 8002272:	4699      	mov	r9, r3
 8002274:	4623      	mov	r3, r4
 8002276:	eb18 0303 	adds.w	r3, r8, r3
 800227a:	60bb      	str	r3, [r7, #8]
 800227c:	462b      	mov	r3, r5
 800227e:	eb49 0303 	adc.w	r3, r9, r3
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	f04f 0200 	mov.w	r2, #0
 8002288:	f04f 0300 	mov.w	r3, #0
 800228c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002290:	4629      	mov	r1, r5
 8002292:	028b      	lsls	r3, r1, #10
 8002294:	4621      	mov	r1, r4
 8002296:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800229a:	4621      	mov	r1, r4
 800229c:	028a      	lsls	r2, r1, #10
 800229e:	4610      	mov	r0, r2
 80022a0:	4619      	mov	r1, r3
 80022a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022a6:	2200      	movs	r2, #0
 80022a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80022aa:	647a      	str	r2, [r7, #68]	@ 0x44
 80022ac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80022b0:	f7fe f806 	bl	80002c0 <__aeabi_uldivmod>
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	4613      	mov	r3, r2
 80022ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80022be:	4b60      	ldr	r3, [pc, #384]	@ (8002440 <HAL_RCC_GetSysClockFreq+0x348>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	0c1b      	lsrs	r3, r3, #16
 80022c4:	f003 0303 	and.w	r3, r3, #3
 80022c8:	3301      	adds	r3, #1
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80022d0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80022d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80022d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80022e0:	e0a6      	b.n	8002430 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022e2:	4b57      	ldr	r3, [pc, #348]	@ (8002440 <HAL_RCC_GetSysClockFreq+0x348>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022ee:	4b54      	ldr	r3, [pc, #336]	@ (8002440 <HAL_RCC_GetSysClockFreq+0x348>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d02a      	beq.n	8002350 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022fa:	4b51      	ldr	r3, [pc, #324]	@ (8002440 <HAL_RCC_GetSysClockFreq+0x348>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	099b      	lsrs	r3, r3, #6
 8002300:	2200      	movs	r2, #0
 8002302:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002304:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002308:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800230c:	2100      	movs	r1, #0
 800230e:	4b4e      	ldr	r3, [pc, #312]	@ (8002448 <HAL_RCC_GetSysClockFreq+0x350>)
 8002310:	fb03 f201 	mul.w	r2, r3, r1
 8002314:	2300      	movs	r3, #0
 8002316:	fb00 f303 	mul.w	r3, r0, r3
 800231a:	4413      	add	r3, r2
 800231c:	4a4a      	ldr	r2, [pc, #296]	@ (8002448 <HAL_RCC_GetSysClockFreq+0x350>)
 800231e:	fba0 1202 	umull	r1, r2, r0, r2
 8002322:	677a      	str	r2, [r7, #116]	@ 0x74
 8002324:	460a      	mov	r2, r1
 8002326:	673a      	str	r2, [r7, #112]	@ 0x70
 8002328:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800232a:	4413      	add	r3, r2
 800232c:	677b      	str	r3, [r7, #116]	@ 0x74
 800232e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002332:	2200      	movs	r2, #0
 8002334:	633b      	str	r3, [r7, #48]	@ 0x30
 8002336:	637a      	str	r2, [r7, #52]	@ 0x34
 8002338:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800233c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002340:	f7fd ffbe 	bl	80002c0 <__aeabi_uldivmod>
 8002344:	4602      	mov	r2, r0
 8002346:	460b      	mov	r3, r1
 8002348:	4613      	mov	r3, r2
 800234a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800234e:	e05b      	b.n	8002408 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002350:	4b3b      	ldr	r3, [pc, #236]	@ (8002440 <HAL_RCC_GetSysClockFreq+0x348>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	099b      	lsrs	r3, r3, #6
 8002356:	2200      	movs	r2, #0
 8002358:	62bb      	str	r3, [r7, #40]	@ 0x28
 800235a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800235c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800235e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002362:	623b      	str	r3, [r7, #32]
 8002364:	2300      	movs	r3, #0
 8002366:	627b      	str	r3, [r7, #36]	@ 0x24
 8002368:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800236c:	4642      	mov	r2, r8
 800236e:	464b      	mov	r3, r9
 8002370:	f04f 0000 	mov.w	r0, #0
 8002374:	f04f 0100 	mov.w	r1, #0
 8002378:	0159      	lsls	r1, r3, #5
 800237a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800237e:	0150      	lsls	r0, r2, #5
 8002380:	4602      	mov	r2, r0
 8002382:	460b      	mov	r3, r1
 8002384:	4641      	mov	r1, r8
 8002386:	ebb2 0a01 	subs.w	sl, r2, r1
 800238a:	4649      	mov	r1, r9
 800238c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002390:	f04f 0200 	mov.w	r2, #0
 8002394:	f04f 0300 	mov.w	r3, #0
 8002398:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800239c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80023a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80023a4:	ebb2 040a 	subs.w	r4, r2, sl
 80023a8:	eb63 050b 	sbc.w	r5, r3, fp
 80023ac:	f04f 0200 	mov.w	r2, #0
 80023b0:	f04f 0300 	mov.w	r3, #0
 80023b4:	00eb      	lsls	r3, r5, #3
 80023b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023ba:	00e2      	lsls	r2, r4, #3
 80023bc:	4614      	mov	r4, r2
 80023be:	461d      	mov	r5, r3
 80023c0:	4643      	mov	r3, r8
 80023c2:	18e3      	adds	r3, r4, r3
 80023c4:	603b      	str	r3, [r7, #0]
 80023c6:	464b      	mov	r3, r9
 80023c8:	eb45 0303 	adc.w	r3, r5, r3
 80023cc:	607b      	str	r3, [r7, #4]
 80023ce:	f04f 0200 	mov.w	r2, #0
 80023d2:	f04f 0300 	mov.w	r3, #0
 80023d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023da:	4629      	mov	r1, r5
 80023dc:	028b      	lsls	r3, r1, #10
 80023de:	4621      	mov	r1, r4
 80023e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023e4:	4621      	mov	r1, r4
 80023e6:	028a      	lsls	r2, r1, #10
 80023e8:	4610      	mov	r0, r2
 80023ea:	4619      	mov	r1, r3
 80023ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023f0:	2200      	movs	r2, #0
 80023f2:	61bb      	str	r3, [r7, #24]
 80023f4:	61fa      	str	r2, [r7, #28]
 80023f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023fa:	f7fd ff61 	bl	80002c0 <__aeabi_uldivmod>
 80023fe:	4602      	mov	r2, r0
 8002400:	460b      	mov	r3, r1
 8002402:	4613      	mov	r3, r2
 8002404:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002408:	4b0d      	ldr	r3, [pc, #52]	@ (8002440 <HAL_RCC_GetSysClockFreq+0x348>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	0f1b      	lsrs	r3, r3, #28
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8002416:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800241a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800241e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002422:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002426:	e003      	b.n	8002430 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002428:	4b06      	ldr	r3, [pc, #24]	@ (8002444 <HAL_RCC_GetSysClockFreq+0x34c>)
 800242a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800242e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002430:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002434:	4618      	mov	r0, r3
 8002436:	3798      	adds	r7, #152	@ 0x98
 8002438:	46bd      	mov	sp, r7
 800243a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800243e:	bf00      	nop
 8002440:	40023800 	.word	0x40023800
 8002444:	00f42400 	.word	0x00f42400
 8002448:	017d7840 	.word	0x017d7840

0800244c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e28d      	b.n	800297a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b00      	cmp	r3, #0
 8002468:	f000 8083 	beq.w	8002572 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800246c:	4b94      	ldr	r3, [pc, #592]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f003 030c 	and.w	r3, r3, #12
 8002474:	2b04      	cmp	r3, #4
 8002476:	d019      	beq.n	80024ac <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002478:	4b91      	ldr	r3, [pc, #580]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f003 030c 	and.w	r3, r3, #12
        || \
 8002480:	2b08      	cmp	r3, #8
 8002482:	d106      	bne.n	8002492 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002484:	4b8e      	ldr	r3, [pc, #568]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800248c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002490:	d00c      	beq.n	80024ac <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002492:	4b8b      	ldr	r3, [pc, #556]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800249a:	2b0c      	cmp	r3, #12
 800249c:	d112      	bne.n	80024c4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800249e:	4b88      	ldr	r3, [pc, #544]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024aa:	d10b      	bne.n	80024c4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ac:	4b84      	ldr	r3, [pc, #528]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d05b      	beq.n	8002570 <HAL_RCC_OscConfig+0x124>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d157      	bne.n	8002570 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e25a      	b.n	800297a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024cc:	d106      	bne.n	80024dc <HAL_RCC_OscConfig+0x90>
 80024ce:	4b7c      	ldr	r3, [pc, #496]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a7b      	ldr	r2, [pc, #492]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 80024d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024d8:	6013      	str	r3, [r2, #0]
 80024da:	e01d      	b.n	8002518 <HAL_RCC_OscConfig+0xcc>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024e4:	d10c      	bne.n	8002500 <HAL_RCC_OscConfig+0xb4>
 80024e6:	4b76      	ldr	r3, [pc, #472]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a75      	ldr	r2, [pc, #468]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 80024ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024f0:	6013      	str	r3, [r2, #0]
 80024f2:	4b73      	ldr	r3, [pc, #460]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a72      	ldr	r2, [pc, #456]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 80024f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024fc:	6013      	str	r3, [r2, #0]
 80024fe:	e00b      	b.n	8002518 <HAL_RCC_OscConfig+0xcc>
 8002500:	4b6f      	ldr	r3, [pc, #444]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a6e      	ldr	r2, [pc, #440]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 8002506:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800250a:	6013      	str	r3, [r2, #0]
 800250c:	4b6c      	ldr	r3, [pc, #432]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a6b      	ldr	r2, [pc, #428]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 8002512:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002516:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d013      	beq.n	8002548 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002520:	f7fe fe4e 	bl	80011c0 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002528:	f7fe fe4a 	bl	80011c0 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b64      	cmp	r3, #100	@ 0x64
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e21f      	b.n	800297a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800253a:	4b61      	ldr	r3, [pc, #388]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0f0      	beq.n	8002528 <HAL_RCC_OscConfig+0xdc>
 8002546:	e014      	b.n	8002572 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002548:	f7fe fe3a 	bl	80011c0 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002550:	f7fe fe36 	bl	80011c0 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b64      	cmp	r3, #100	@ 0x64
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e20b      	b.n	800297a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002562:	4b57      	ldr	r3, [pc, #348]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f0      	bne.n	8002550 <HAL_RCC_OscConfig+0x104>
 800256e:	e000      	b.n	8002572 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002570:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d06f      	beq.n	800265e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800257e:	4b50      	ldr	r3, [pc, #320]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f003 030c 	and.w	r3, r3, #12
 8002586:	2b00      	cmp	r3, #0
 8002588:	d017      	beq.n	80025ba <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800258a:	4b4d      	ldr	r3, [pc, #308]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 030c 	and.w	r3, r3, #12
        || \
 8002592:	2b08      	cmp	r3, #8
 8002594:	d105      	bne.n	80025a2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002596:	4b4a      	ldr	r3, [pc, #296]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00b      	beq.n	80025ba <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025a2:	4b47      	ldr	r3, [pc, #284]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80025aa:	2b0c      	cmp	r3, #12
 80025ac:	d11c      	bne.n	80025e8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ae:	4b44      	ldr	r3, [pc, #272]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d116      	bne.n	80025e8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ba:	4b41      	ldr	r3, [pc, #260]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d005      	beq.n	80025d2 <HAL_RCC_OscConfig+0x186>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d001      	beq.n	80025d2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e1d3      	b.n	800297a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d2:	4b3b      	ldr	r3, [pc, #236]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	4937      	ldr	r1, [pc, #220]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025e6:	e03a      	b.n	800265e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d020      	beq.n	8002632 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025f0:	4b34      	ldr	r3, [pc, #208]	@ (80026c4 <HAL_RCC_OscConfig+0x278>)
 80025f2:	2201      	movs	r2, #1
 80025f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f6:	f7fe fde3 	bl	80011c0 <HAL_GetTick>
 80025fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025fc:	e008      	b.n	8002610 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025fe:	f7fe fddf 	bl	80011c0 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e1b4      	b.n	800297a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002610:	4b2b      	ldr	r3, [pc, #172]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0f0      	beq.n	80025fe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800261c:	4b28      	ldr	r3, [pc, #160]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	691b      	ldr	r3, [r3, #16]
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	4925      	ldr	r1, [pc, #148]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 800262c:	4313      	orrs	r3, r2
 800262e:	600b      	str	r3, [r1, #0]
 8002630:	e015      	b.n	800265e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002632:	4b24      	ldr	r3, [pc, #144]	@ (80026c4 <HAL_RCC_OscConfig+0x278>)
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002638:	f7fe fdc2 	bl	80011c0 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002640:	f7fe fdbe 	bl	80011c0 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e193      	b.n	800297a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002652:	4b1b      	ldr	r3, [pc, #108]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1f0      	bne.n	8002640 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0308 	and.w	r3, r3, #8
 8002666:	2b00      	cmp	r3, #0
 8002668:	d036      	beq.n	80026d8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d016      	beq.n	80026a0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002672:	4b15      	ldr	r3, [pc, #84]	@ (80026c8 <HAL_RCC_OscConfig+0x27c>)
 8002674:	2201      	movs	r2, #1
 8002676:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002678:	f7fe fda2 	bl	80011c0 <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002680:	f7fe fd9e 	bl	80011c0 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e173      	b.n	800297a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002692:	4b0b      	ldr	r3, [pc, #44]	@ (80026c0 <HAL_RCC_OscConfig+0x274>)
 8002694:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d0f0      	beq.n	8002680 <HAL_RCC_OscConfig+0x234>
 800269e:	e01b      	b.n	80026d8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026a0:	4b09      	ldr	r3, [pc, #36]	@ (80026c8 <HAL_RCC_OscConfig+0x27c>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a6:	f7fe fd8b 	bl	80011c0 <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ac:	e00e      	b.n	80026cc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026ae:	f7fe fd87 	bl	80011c0 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d907      	bls.n	80026cc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e15c      	b.n	800297a <HAL_RCC_OscConfig+0x52e>
 80026c0:	40023800 	.word	0x40023800
 80026c4:	42470000 	.word	0x42470000
 80026c8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026cc:	4b8a      	ldr	r3, [pc, #552]	@ (80028f8 <HAL_RCC_OscConfig+0x4ac>)
 80026ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1ea      	bne.n	80026ae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 8097 	beq.w	8002814 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026e6:	2300      	movs	r3, #0
 80026e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ea:	4b83      	ldr	r3, [pc, #524]	@ (80028f8 <HAL_RCC_OscConfig+0x4ac>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10f      	bne.n	8002716 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	60bb      	str	r3, [r7, #8]
 80026fa:	4b7f      	ldr	r3, [pc, #508]	@ (80028f8 <HAL_RCC_OscConfig+0x4ac>)
 80026fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fe:	4a7e      	ldr	r2, [pc, #504]	@ (80028f8 <HAL_RCC_OscConfig+0x4ac>)
 8002700:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002704:	6413      	str	r3, [r2, #64]	@ 0x40
 8002706:	4b7c      	ldr	r3, [pc, #496]	@ (80028f8 <HAL_RCC_OscConfig+0x4ac>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800270e:	60bb      	str	r3, [r7, #8]
 8002710:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002712:	2301      	movs	r3, #1
 8002714:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002716:	4b79      	ldr	r3, [pc, #484]	@ (80028fc <HAL_RCC_OscConfig+0x4b0>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800271e:	2b00      	cmp	r3, #0
 8002720:	d118      	bne.n	8002754 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002722:	4b76      	ldr	r3, [pc, #472]	@ (80028fc <HAL_RCC_OscConfig+0x4b0>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a75      	ldr	r2, [pc, #468]	@ (80028fc <HAL_RCC_OscConfig+0x4b0>)
 8002728:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800272c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800272e:	f7fe fd47 	bl	80011c0 <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002734:	e008      	b.n	8002748 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002736:	f7fe fd43 	bl	80011c0 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e118      	b.n	800297a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002748:	4b6c      	ldr	r3, [pc, #432]	@ (80028fc <HAL_RCC_OscConfig+0x4b0>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002750:	2b00      	cmp	r3, #0
 8002752:	d0f0      	beq.n	8002736 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d106      	bne.n	800276a <HAL_RCC_OscConfig+0x31e>
 800275c:	4b66      	ldr	r3, [pc, #408]	@ (80028f8 <HAL_RCC_OscConfig+0x4ac>)
 800275e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002760:	4a65      	ldr	r2, [pc, #404]	@ (80028f8 <HAL_RCC_OscConfig+0x4ac>)
 8002762:	f043 0301 	orr.w	r3, r3, #1
 8002766:	6713      	str	r3, [r2, #112]	@ 0x70
 8002768:	e01c      	b.n	80027a4 <HAL_RCC_OscConfig+0x358>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	2b05      	cmp	r3, #5
 8002770:	d10c      	bne.n	800278c <HAL_RCC_OscConfig+0x340>
 8002772:	4b61      	ldr	r3, [pc, #388]	@ (80028f8 <HAL_RCC_OscConfig+0x4ac>)
 8002774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002776:	4a60      	ldr	r2, [pc, #384]	@ (80028f8 <HAL_RCC_OscConfig+0x4ac>)
 8002778:	f043 0304 	orr.w	r3, r3, #4
 800277c:	6713      	str	r3, [r2, #112]	@ 0x70
 800277e:	4b5e      	ldr	r3, [pc, #376]	@ (80028f8 <HAL_RCC_OscConfig+0x4ac>)
 8002780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002782:	4a5d      	ldr	r2, [pc, #372]	@ (80028f8 <HAL_RCC_OscConfig+0x4ac>)
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	6713      	str	r3, [r2, #112]	@ 0x70
 800278a:	e00b      	b.n	80027a4 <HAL_RCC_OscConfig+0x358>
 800278c:	4b5a      	ldr	r3, [pc, #360]	@ (80028f8 <HAL_RCC_OscConfig+0x4ac>)
 800278e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002790:	4a59      	ldr	r2, [pc, #356]	@ (80028f8 <HAL_RCC_OscConfig+0x4ac>)
 8002792:	f023 0301 	bic.w	r3, r3, #1
 8002796:	6713      	str	r3, [r2, #112]	@ 0x70
 8002798:	4b57      	ldr	r3, [pc, #348]	@ (80028f8 <HAL_RCC_OscConfig+0x4ac>)
 800279a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800279c:	4a56      	ldr	r2, [pc, #344]	@ (80028f8 <HAL_RCC_OscConfig+0x4ac>)
 800279e:	f023 0304 	bic.w	r3, r3, #4
 80027a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d015      	beq.n	80027d8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ac:	f7fe fd08 	bl	80011c0 <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b2:	e00a      	b.n	80027ca <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027b4:	f7fe fd04 	bl	80011c0 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e0d7      	b.n	800297a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ca:	4b4b      	ldr	r3, [pc, #300]	@ (80028f8 <HAL_RCC_OscConfig+0x4ac>)
 80027cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d0ee      	beq.n	80027b4 <HAL_RCC_OscConfig+0x368>
 80027d6:	e014      	b.n	8002802 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d8:	f7fe fcf2 	bl	80011c0 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027de:	e00a      	b.n	80027f6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027e0:	f7fe fcee 	bl	80011c0 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e0c1      	b.n	800297a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027f6:	4b40      	ldr	r3, [pc, #256]	@ (80028f8 <HAL_RCC_OscConfig+0x4ac>)
 80027f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1ee      	bne.n	80027e0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002802:	7dfb      	ldrb	r3, [r7, #23]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d105      	bne.n	8002814 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002808:	4b3b      	ldr	r3, [pc, #236]	@ (80028f8 <HAL_RCC_OscConfig+0x4ac>)
 800280a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280c:	4a3a      	ldr	r2, [pc, #232]	@ (80028f8 <HAL_RCC_OscConfig+0x4ac>)
 800280e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002812:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 80ad 	beq.w	8002978 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800281e:	4b36      	ldr	r3, [pc, #216]	@ (80028f8 <HAL_RCC_OscConfig+0x4ac>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 030c 	and.w	r3, r3, #12
 8002826:	2b08      	cmp	r3, #8
 8002828:	d060      	beq.n	80028ec <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	2b02      	cmp	r3, #2
 8002830:	d145      	bne.n	80028be <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002832:	4b33      	ldr	r3, [pc, #204]	@ (8002900 <HAL_RCC_OscConfig+0x4b4>)
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002838:	f7fe fcc2 	bl	80011c0 <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002840:	f7fe fcbe 	bl	80011c0 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e093      	b.n	800297a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002852:	4b29      	ldr	r3, [pc, #164]	@ (80028f8 <HAL_RCC_OscConfig+0x4ac>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1f0      	bne.n	8002840 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	69da      	ldr	r2, [r3, #28]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	431a      	orrs	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800286c:	019b      	lsls	r3, r3, #6
 800286e:	431a      	orrs	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002874:	085b      	lsrs	r3, r3, #1
 8002876:	3b01      	subs	r3, #1
 8002878:	041b      	lsls	r3, r3, #16
 800287a:	431a      	orrs	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002880:	061b      	lsls	r3, r3, #24
 8002882:	431a      	orrs	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002888:	071b      	lsls	r3, r3, #28
 800288a:	491b      	ldr	r1, [pc, #108]	@ (80028f8 <HAL_RCC_OscConfig+0x4ac>)
 800288c:	4313      	orrs	r3, r2
 800288e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002890:	4b1b      	ldr	r3, [pc, #108]	@ (8002900 <HAL_RCC_OscConfig+0x4b4>)
 8002892:	2201      	movs	r2, #1
 8002894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002896:	f7fe fc93 	bl	80011c0 <HAL_GetTick>
 800289a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800289c:	e008      	b.n	80028b0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800289e:	f7fe fc8f 	bl	80011c0 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e064      	b.n	800297a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028b0:	4b11      	ldr	r3, [pc, #68]	@ (80028f8 <HAL_RCC_OscConfig+0x4ac>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d0f0      	beq.n	800289e <HAL_RCC_OscConfig+0x452>
 80028bc:	e05c      	b.n	8002978 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028be:	4b10      	ldr	r3, [pc, #64]	@ (8002900 <HAL_RCC_OscConfig+0x4b4>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c4:	f7fe fc7c 	bl	80011c0 <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028cc:	f7fe fc78 	bl	80011c0 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e04d      	b.n	800297a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028de:	4b06      	ldr	r3, [pc, #24]	@ (80028f8 <HAL_RCC_OscConfig+0x4ac>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1f0      	bne.n	80028cc <HAL_RCC_OscConfig+0x480>
 80028ea:	e045      	b.n	8002978 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d107      	bne.n	8002904 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e040      	b.n	800297a <HAL_RCC_OscConfig+0x52e>
 80028f8:	40023800 	.word	0x40023800
 80028fc:	40007000 	.word	0x40007000
 8002900:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002904:	4b1f      	ldr	r3, [pc, #124]	@ (8002984 <HAL_RCC_OscConfig+0x538>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d030      	beq.n	8002974 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800291c:	429a      	cmp	r2, r3
 800291e:	d129      	bne.n	8002974 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800292a:	429a      	cmp	r2, r3
 800292c:	d122      	bne.n	8002974 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002934:	4013      	ands	r3, r2
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800293a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800293c:	4293      	cmp	r3, r2
 800293e:	d119      	bne.n	8002974 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800294a:	085b      	lsrs	r3, r3, #1
 800294c:	3b01      	subs	r3, #1
 800294e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002950:	429a      	cmp	r2, r3
 8002952:	d10f      	bne.n	8002974 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800295e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002960:	429a      	cmp	r2, r3
 8002962:	d107      	bne.n	8002974 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002970:	429a      	cmp	r2, r3
 8002972:	d001      	beq.n	8002978 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e000      	b.n	800297a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3718      	adds	r7, #24
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	40023800 	.word	0x40023800

08002988 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e041      	b.n	8002a1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d106      	bne.n	80029b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7fe fa82 	bl	8000eb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2202      	movs	r2, #2
 80029b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3304      	adds	r3, #4
 80029c4:	4619      	mov	r1, r3
 80029c6:	4610      	mov	r0, r2
 80029c8:	f000 f95e 	bl	8002c88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
	...

08002a28 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d001      	beq.n	8002a40 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e046      	b.n	8002ace <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2202      	movs	r2, #2
 8002a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a23      	ldr	r2, [pc, #140]	@ (8002adc <HAL_TIM_Base_Start+0xb4>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d022      	beq.n	8002a98 <HAL_TIM_Base_Start+0x70>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a5a:	d01d      	beq.n	8002a98 <HAL_TIM_Base_Start+0x70>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a1f      	ldr	r2, [pc, #124]	@ (8002ae0 <HAL_TIM_Base_Start+0xb8>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d018      	beq.n	8002a98 <HAL_TIM_Base_Start+0x70>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a1e      	ldr	r2, [pc, #120]	@ (8002ae4 <HAL_TIM_Base_Start+0xbc>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d013      	beq.n	8002a98 <HAL_TIM_Base_Start+0x70>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a1c      	ldr	r2, [pc, #112]	@ (8002ae8 <HAL_TIM_Base_Start+0xc0>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d00e      	beq.n	8002a98 <HAL_TIM_Base_Start+0x70>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a1b      	ldr	r2, [pc, #108]	@ (8002aec <HAL_TIM_Base_Start+0xc4>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d009      	beq.n	8002a98 <HAL_TIM_Base_Start+0x70>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a19      	ldr	r2, [pc, #100]	@ (8002af0 <HAL_TIM_Base_Start+0xc8>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d004      	beq.n	8002a98 <HAL_TIM_Base_Start+0x70>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a18      	ldr	r2, [pc, #96]	@ (8002af4 <HAL_TIM_Base_Start+0xcc>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d111      	bne.n	8002abc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f003 0307 	and.w	r3, r3, #7
 8002aa2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2b06      	cmp	r3, #6
 8002aa8:	d010      	beq.n	8002acc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f042 0201 	orr.w	r2, r2, #1
 8002ab8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aba:	e007      	b.n	8002acc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f042 0201 	orr.w	r2, r2, #1
 8002aca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	40010000 	.word	0x40010000
 8002ae0:	40000400 	.word	0x40000400
 8002ae4:	40000800 	.word	0x40000800
 8002ae8:	40000c00 	.word	0x40000c00
 8002aec:	40010400 	.word	0x40010400
 8002af0:	40014000 	.word	0x40014000
 8002af4:	40001800 	.word	0x40001800

08002af8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d101      	bne.n	8002b14 <HAL_TIM_ConfigClockSource+0x1c>
 8002b10:	2302      	movs	r3, #2
 8002b12:	e0b4      	b.n	8002c7e <HAL_TIM_ConfigClockSource+0x186>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2202      	movs	r2, #2
 8002b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002b32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68ba      	ldr	r2, [r7, #8]
 8002b42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b4c:	d03e      	beq.n	8002bcc <HAL_TIM_ConfigClockSource+0xd4>
 8002b4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b52:	f200 8087 	bhi.w	8002c64 <HAL_TIM_ConfigClockSource+0x16c>
 8002b56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b5a:	f000 8086 	beq.w	8002c6a <HAL_TIM_ConfigClockSource+0x172>
 8002b5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b62:	d87f      	bhi.n	8002c64 <HAL_TIM_ConfigClockSource+0x16c>
 8002b64:	2b70      	cmp	r3, #112	@ 0x70
 8002b66:	d01a      	beq.n	8002b9e <HAL_TIM_ConfigClockSource+0xa6>
 8002b68:	2b70      	cmp	r3, #112	@ 0x70
 8002b6a:	d87b      	bhi.n	8002c64 <HAL_TIM_ConfigClockSource+0x16c>
 8002b6c:	2b60      	cmp	r3, #96	@ 0x60
 8002b6e:	d050      	beq.n	8002c12 <HAL_TIM_ConfigClockSource+0x11a>
 8002b70:	2b60      	cmp	r3, #96	@ 0x60
 8002b72:	d877      	bhi.n	8002c64 <HAL_TIM_ConfigClockSource+0x16c>
 8002b74:	2b50      	cmp	r3, #80	@ 0x50
 8002b76:	d03c      	beq.n	8002bf2 <HAL_TIM_ConfigClockSource+0xfa>
 8002b78:	2b50      	cmp	r3, #80	@ 0x50
 8002b7a:	d873      	bhi.n	8002c64 <HAL_TIM_ConfigClockSource+0x16c>
 8002b7c:	2b40      	cmp	r3, #64	@ 0x40
 8002b7e:	d058      	beq.n	8002c32 <HAL_TIM_ConfigClockSource+0x13a>
 8002b80:	2b40      	cmp	r3, #64	@ 0x40
 8002b82:	d86f      	bhi.n	8002c64 <HAL_TIM_ConfigClockSource+0x16c>
 8002b84:	2b30      	cmp	r3, #48	@ 0x30
 8002b86:	d064      	beq.n	8002c52 <HAL_TIM_ConfigClockSource+0x15a>
 8002b88:	2b30      	cmp	r3, #48	@ 0x30
 8002b8a:	d86b      	bhi.n	8002c64 <HAL_TIM_ConfigClockSource+0x16c>
 8002b8c:	2b20      	cmp	r3, #32
 8002b8e:	d060      	beq.n	8002c52 <HAL_TIM_ConfigClockSource+0x15a>
 8002b90:	2b20      	cmp	r3, #32
 8002b92:	d867      	bhi.n	8002c64 <HAL_TIM_ConfigClockSource+0x16c>
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d05c      	beq.n	8002c52 <HAL_TIM_ConfigClockSource+0x15a>
 8002b98:	2b10      	cmp	r3, #16
 8002b9a:	d05a      	beq.n	8002c52 <HAL_TIM_ConfigClockSource+0x15a>
 8002b9c:	e062      	b.n	8002c64 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002bae:	f000 f991 	bl	8002ed4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002bc0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68ba      	ldr	r2, [r7, #8]
 8002bc8:	609a      	str	r2, [r3, #8]
      break;
 8002bca:	e04f      	b.n	8002c6c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002bdc:	f000 f97a 	bl	8002ed4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689a      	ldr	r2, [r3, #8]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002bee:	609a      	str	r2, [r3, #8]
      break;
 8002bf0:	e03c      	b.n	8002c6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bfe:	461a      	mov	r2, r3
 8002c00:	f000 f8ee 	bl	8002de0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2150      	movs	r1, #80	@ 0x50
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 f947 	bl	8002e9e <TIM_ITRx_SetConfig>
      break;
 8002c10:	e02c      	b.n	8002c6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c1e:	461a      	mov	r2, r3
 8002c20:	f000 f90d 	bl	8002e3e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2160      	movs	r1, #96	@ 0x60
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f000 f937 	bl	8002e9e <TIM_ITRx_SetConfig>
      break;
 8002c30:	e01c      	b.n	8002c6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c3e:	461a      	mov	r2, r3
 8002c40:	f000 f8ce 	bl	8002de0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2140      	movs	r1, #64	@ 0x40
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f000 f927 	bl	8002e9e <TIM_ITRx_SetConfig>
      break;
 8002c50:	e00c      	b.n	8002c6c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	4610      	mov	r0, r2
 8002c5e:	f000 f91e 	bl	8002e9e <TIM_ITRx_SetConfig>
      break;
 8002c62:	e003      	b.n	8002c6c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	73fb      	strb	r3, [r7, #15]
      break;
 8002c68:	e000      	b.n	8002c6c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
	...

08002c88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a46      	ldr	r2, [pc, #280]	@ (8002db4 <TIM_Base_SetConfig+0x12c>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d013      	beq.n	8002cc8 <TIM_Base_SetConfig+0x40>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ca6:	d00f      	beq.n	8002cc8 <TIM_Base_SetConfig+0x40>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a43      	ldr	r2, [pc, #268]	@ (8002db8 <TIM_Base_SetConfig+0x130>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d00b      	beq.n	8002cc8 <TIM_Base_SetConfig+0x40>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a42      	ldr	r2, [pc, #264]	@ (8002dbc <TIM_Base_SetConfig+0x134>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d007      	beq.n	8002cc8 <TIM_Base_SetConfig+0x40>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a41      	ldr	r2, [pc, #260]	@ (8002dc0 <TIM_Base_SetConfig+0x138>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d003      	beq.n	8002cc8 <TIM_Base_SetConfig+0x40>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a40      	ldr	r2, [pc, #256]	@ (8002dc4 <TIM_Base_SetConfig+0x13c>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d108      	bne.n	8002cda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a35      	ldr	r2, [pc, #212]	@ (8002db4 <TIM_Base_SetConfig+0x12c>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d02b      	beq.n	8002d3a <TIM_Base_SetConfig+0xb2>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ce8:	d027      	beq.n	8002d3a <TIM_Base_SetConfig+0xb2>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a32      	ldr	r2, [pc, #200]	@ (8002db8 <TIM_Base_SetConfig+0x130>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d023      	beq.n	8002d3a <TIM_Base_SetConfig+0xb2>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a31      	ldr	r2, [pc, #196]	@ (8002dbc <TIM_Base_SetConfig+0x134>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d01f      	beq.n	8002d3a <TIM_Base_SetConfig+0xb2>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a30      	ldr	r2, [pc, #192]	@ (8002dc0 <TIM_Base_SetConfig+0x138>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d01b      	beq.n	8002d3a <TIM_Base_SetConfig+0xb2>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a2f      	ldr	r2, [pc, #188]	@ (8002dc4 <TIM_Base_SetConfig+0x13c>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d017      	beq.n	8002d3a <TIM_Base_SetConfig+0xb2>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a2e      	ldr	r2, [pc, #184]	@ (8002dc8 <TIM_Base_SetConfig+0x140>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d013      	beq.n	8002d3a <TIM_Base_SetConfig+0xb2>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a2d      	ldr	r2, [pc, #180]	@ (8002dcc <TIM_Base_SetConfig+0x144>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d00f      	beq.n	8002d3a <TIM_Base_SetConfig+0xb2>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a2c      	ldr	r2, [pc, #176]	@ (8002dd0 <TIM_Base_SetConfig+0x148>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d00b      	beq.n	8002d3a <TIM_Base_SetConfig+0xb2>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a2b      	ldr	r2, [pc, #172]	@ (8002dd4 <TIM_Base_SetConfig+0x14c>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d007      	beq.n	8002d3a <TIM_Base_SetConfig+0xb2>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a2a      	ldr	r2, [pc, #168]	@ (8002dd8 <TIM_Base_SetConfig+0x150>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d003      	beq.n	8002d3a <TIM_Base_SetConfig+0xb2>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a29      	ldr	r2, [pc, #164]	@ (8002ddc <TIM_Base_SetConfig+0x154>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d108      	bne.n	8002d4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a10      	ldr	r2, [pc, #64]	@ (8002db4 <TIM_Base_SetConfig+0x12c>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d003      	beq.n	8002d80 <TIM_Base_SetConfig+0xf8>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a12      	ldr	r2, [pc, #72]	@ (8002dc4 <TIM_Base_SetConfig+0x13c>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d103      	bne.n	8002d88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	691a      	ldr	r2, [r3, #16]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d105      	bne.n	8002da6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	f023 0201 	bic.w	r2, r3, #1
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	611a      	str	r2, [r3, #16]
  }
}
 8002da6:	bf00      	nop
 8002da8:	3714      	adds	r7, #20
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	40010000 	.word	0x40010000
 8002db8:	40000400 	.word	0x40000400
 8002dbc:	40000800 	.word	0x40000800
 8002dc0:	40000c00 	.word	0x40000c00
 8002dc4:	40010400 	.word	0x40010400
 8002dc8:	40014000 	.word	0x40014000
 8002dcc:	40014400 	.word	0x40014400
 8002dd0:	40014800 	.word	0x40014800
 8002dd4:	40001800 	.word	0x40001800
 8002dd8:	40001c00 	.word	0x40001c00
 8002ddc:	40002000 	.word	0x40002000

08002de0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b087      	sub	sp, #28
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	f023 0201 	bic.w	r2, r3, #1
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	011b      	lsls	r3, r3, #4
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	f023 030a 	bic.w	r3, r3, #10
 8002e1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	621a      	str	r2, [r3, #32]
}
 8002e32:	bf00      	nop
 8002e34:	371c      	adds	r7, #28
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b087      	sub	sp, #28
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	60f8      	str	r0, [r7, #12]
 8002e46:	60b9      	str	r1, [r7, #8]
 8002e48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	f023 0210 	bic.w	r2, r3, #16
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	699b      	ldr	r3, [r3, #24]
 8002e60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002e68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	031b      	lsls	r3, r3, #12
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002e7a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	011b      	lsls	r3, r3, #4
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	621a      	str	r2, [r3, #32]
}
 8002e92:	bf00      	nop
 8002e94:	371c      	adds	r7, #28
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr

08002e9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b085      	sub	sp, #20
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
 8002ea6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002eb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	f043 0307 	orr.w	r3, r3, #7
 8002ec0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	609a      	str	r2, [r3, #8]
}
 8002ec8:	bf00      	nop
 8002eca:	3714      	adds	r7, #20
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b087      	sub	sp, #28
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]
 8002ee0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002eee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	021a      	lsls	r2, r3, #8
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	697a      	ldr	r2, [r7, #20]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	609a      	str	r2, [r3, #8]
}
 8002f08:	bf00      	nop
 8002f0a:	371c      	adds	r7, #28
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d101      	bne.n	8002f2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f28:	2302      	movs	r3, #2
 8002f2a:	e05a      	b.n	8002fe2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2202      	movs	r2, #2
 8002f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a21      	ldr	r2, [pc, #132]	@ (8002ff0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d022      	beq.n	8002fb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f78:	d01d      	beq.n	8002fb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ff4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d018      	beq.n	8002fb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a1b      	ldr	r2, [pc, #108]	@ (8002ff8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d013      	beq.n	8002fb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a1a      	ldr	r2, [pc, #104]	@ (8002ffc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d00e      	beq.n	8002fb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a18      	ldr	r2, [pc, #96]	@ (8003000 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d009      	beq.n	8002fb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a17      	ldr	r2, [pc, #92]	@ (8003004 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d004      	beq.n	8002fb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a15      	ldr	r2, [pc, #84]	@ (8003008 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d10c      	bne.n	8002fd0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68ba      	ldr	r2, [r7, #8]
 8002fce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3714      	adds	r7, #20
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	40010000 	.word	0x40010000
 8002ff4:	40000400 	.word	0x40000400
 8002ff8:	40000800 	.word	0x40000800
 8002ffc:	40000c00 	.word	0x40000c00
 8003000:	40010400 	.word	0x40010400
 8003004:	40014000 	.word	0x40014000
 8003008:	40001800 	.word	0x40001800

0800300c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e042      	b.n	80030a4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d106      	bne.n	8003038 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7fd ff62 	bl	8000efc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2224      	movs	r2, #36	@ 0x24
 800303c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68da      	ldr	r2, [r3, #12]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800304e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 fe55 	bl	8003d00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	691a      	ldr	r2, [r3, #16]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003064:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	695a      	ldr	r2, [r3, #20]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003074:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68da      	ldr	r2, [r3, #12]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003084:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2220      	movs	r2, #32
 8003090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2220      	movs	r2, #32
 8003098:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3708      	adds	r7, #8
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b08a      	sub	sp, #40	@ 0x28
 80030b0:	af02      	add	r7, sp, #8
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	603b      	str	r3, [r7, #0]
 80030b8:	4613      	mov	r3, r2
 80030ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80030bc:	2300      	movs	r3, #0
 80030be:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b20      	cmp	r3, #32
 80030ca:	d175      	bne.n	80031b8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d002      	beq.n	80030d8 <HAL_UART_Transmit+0x2c>
 80030d2:	88fb      	ldrh	r3, [r7, #6]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d101      	bne.n	80030dc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e06e      	b.n	80031ba <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2221      	movs	r2, #33	@ 0x21
 80030e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030ea:	f7fe f869 	bl	80011c0 <HAL_GetTick>
 80030ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	88fa      	ldrh	r2, [r7, #6]
 80030f4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	88fa      	ldrh	r2, [r7, #6]
 80030fa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003104:	d108      	bne.n	8003118 <HAL_UART_Transmit+0x6c>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d104      	bne.n	8003118 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800310e:	2300      	movs	r3, #0
 8003110:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	61bb      	str	r3, [r7, #24]
 8003116:	e003      	b.n	8003120 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800311c:	2300      	movs	r3, #0
 800311e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003120:	e02e      	b.n	8003180 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	9300      	str	r3, [sp, #0]
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	2200      	movs	r2, #0
 800312a:	2180      	movs	r1, #128	@ 0x80
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f000 fbb7 	bl	80038a0 <UART_WaitOnFlagUntilTimeout>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d005      	beq.n	8003144 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2220      	movs	r2, #32
 800313c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e03a      	b.n	80031ba <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10b      	bne.n	8003162 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	881b      	ldrh	r3, [r3, #0]
 800314e:	461a      	mov	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003158:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	3302      	adds	r3, #2
 800315e:	61bb      	str	r3, [r7, #24]
 8003160:	e007      	b.n	8003172 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	781a      	ldrb	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	3301      	adds	r3, #1
 8003170:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003176:	b29b      	uxth	r3, r3
 8003178:	3b01      	subs	r3, #1
 800317a:	b29a      	uxth	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003184:	b29b      	uxth	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1cb      	bne.n	8003122 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	2200      	movs	r2, #0
 8003192:	2140      	movs	r1, #64	@ 0x40
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f000 fb83 	bl	80038a0 <UART_WaitOnFlagUntilTimeout>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d005      	beq.n	80031ac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2220      	movs	r2, #32
 80031a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e006      	b.n	80031ba <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2220      	movs	r2, #32
 80031b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80031b4:	2300      	movs	r3, #0
 80031b6:	e000      	b.n	80031ba <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80031b8:	2302      	movs	r3, #2
  }
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3720      	adds	r7, #32
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b08a      	sub	sp, #40	@ 0x28
 80031c6:	af02      	add	r7, sp, #8
 80031c8:	60f8      	str	r0, [r7, #12]
 80031ca:	60b9      	str	r1, [r7, #8]
 80031cc:	603b      	str	r3, [r7, #0]
 80031ce:	4613      	mov	r3, r2
 80031d0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031d2:	2300      	movs	r3, #0
 80031d4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b20      	cmp	r3, #32
 80031e0:	f040 8081 	bne.w	80032e6 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d002      	beq.n	80031f0 <HAL_UART_Receive+0x2e>
 80031ea:	88fb      	ldrh	r3, [r7, #6]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e079      	b.n	80032e8 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2222      	movs	r2, #34	@ 0x22
 80031fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003208:	f7fd ffda 	bl	80011c0 <HAL_GetTick>
 800320c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	88fa      	ldrh	r2, [r7, #6]
 8003212:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	88fa      	ldrh	r2, [r7, #6]
 8003218:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003222:	d108      	bne.n	8003236 <HAL_UART_Receive+0x74>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d104      	bne.n	8003236 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800322c:	2300      	movs	r3, #0
 800322e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	61bb      	str	r3, [r7, #24]
 8003234:	e003      	b.n	800323e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800323a:	2300      	movs	r3, #0
 800323c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800323e:	e047      	b.n	80032d0 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	9300      	str	r3, [sp, #0]
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	2200      	movs	r2, #0
 8003248:	2120      	movs	r1, #32
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f000 fb28 	bl	80038a0 <UART_WaitOnFlagUntilTimeout>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d005      	beq.n	8003262 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2220      	movs	r2, #32
 800325a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e042      	b.n	80032e8 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10c      	bne.n	8003282 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	b29b      	uxth	r3, r3
 8003270:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003274:	b29a      	uxth	r2, r3
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	3302      	adds	r3, #2
 800327e:	61bb      	str	r3, [r7, #24]
 8003280:	e01f      	b.n	80032c2 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800328a:	d007      	beq.n	800329c <HAL_UART_Receive+0xda>
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d10a      	bne.n	80032aa <HAL_UART_Receive+0xe8>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d106      	bne.n	80032aa <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	b2da      	uxtb	r2, r3
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	701a      	strb	r2, [r3, #0]
 80032a8:	e008      	b.n	80032bc <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80032b6:	b2da      	uxtb	r2, r3
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	3301      	adds	r3, #1
 80032c0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	3b01      	subs	r3, #1
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1b2      	bne.n	8003240 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2220      	movs	r2, #32
 80032de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80032e2:	2300      	movs	r3, #0
 80032e4:	e000      	b.n	80032e8 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80032e6:	2302      	movs	r3, #2
  }
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3720      	adds	r7, #32
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	4613      	mov	r3, r2
 80032fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b20      	cmp	r3, #32
 8003308:	d112      	bne.n	8003330 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d002      	beq.n	8003316 <HAL_UART_Receive_IT+0x26>
 8003310:	88fb      	ldrh	r3, [r7, #6]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e00b      	b.n	8003332 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003320:	88fb      	ldrh	r3, [r7, #6]
 8003322:	461a      	mov	r2, r3
 8003324:	68b9      	ldr	r1, [r7, #8]
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f000 fb13 	bl	8003952 <UART_Start_Receive_IT>
 800332c:	4603      	mov	r3, r0
 800332e:	e000      	b.n	8003332 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003330:	2302      	movs	r3, #2
  }
}
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
	...

0800333c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b0ba      	sub	sp, #232	@ 0xe8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003362:	2300      	movs	r3, #0
 8003364:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003368:	2300      	movs	r3, #0
 800336a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800336e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800337a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10f      	bne.n	80033a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003386:	f003 0320 	and.w	r3, r3, #32
 800338a:	2b00      	cmp	r3, #0
 800338c:	d009      	beq.n	80033a2 <HAL_UART_IRQHandler+0x66>
 800338e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003392:	f003 0320 	and.w	r3, r3, #32
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 fbf2 	bl	8003b84 <UART_Receive_IT>
      return;
 80033a0:	e25b      	b.n	800385a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80033a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f000 80de 	beq.w	8003568 <HAL_UART_IRQHandler+0x22c>
 80033ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d106      	bne.n	80033c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80033b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033bc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f000 80d1 	beq.w	8003568 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80033c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00b      	beq.n	80033ea <HAL_UART_IRQHandler+0xae>
 80033d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d005      	beq.n	80033ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033e2:	f043 0201 	orr.w	r2, r3, #1
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033ee:	f003 0304 	and.w	r3, r3, #4
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00b      	beq.n	800340e <HAL_UART_IRQHandler+0xd2>
 80033f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d005      	beq.n	800340e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003406:	f043 0202 	orr.w	r2, r3, #2
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800340e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00b      	beq.n	8003432 <HAL_UART_IRQHandler+0xf6>
 800341a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	d005      	beq.n	8003432 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800342a:	f043 0204 	orr.w	r2, r3, #4
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003436:	f003 0308 	and.w	r3, r3, #8
 800343a:	2b00      	cmp	r3, #0
 800343c:	d011      	beq.n	8003462 <HAL_UART_IRQHandler+0x126>
 800343e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003442:	f003 0320 	and.w	r3, r3, #32
 8003446:	2b00      	cmp	r3, #0
 8003448:	d105      	bne.n	8003456 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800344a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d005      	beq.n	8003462 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800345a:	f043 0208 	orr.w	r2, r3, #8
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 81f2 	beq.w	8003850 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800346c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003470:	f003 0320 	and.w	r3, r3, #32
 8003474:	2b00      	cmp	r3, #0
 8003476:	d008      	beq.n	800348a <HAL_UART_IRQHandler+0x14e>
 8003478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800347c:	f003 0320 	and.w	r3, r3, #32
 8003480:	2b00      	cmp	r3, #0
 8003482:	d002      	beq.n	800348a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 fb7d 	bl	8003b84 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003494:	2b40      	cmp	r3, #64	@ 0x40
 8003496:	bf0c      	ite	eq
 8003498:	2301      	moveq	r3, #1
 800349a:	2300      	movne	r3, #0
 800349c:	b2db      	uxtb	r3, r3
 800349e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d103      	bne.n	80034b6 <HAL_UART_IRQHandler+0x17a>
 80034ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d04f      	beq.n	8003556 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 fa85 	bl	80039c6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034c6:	2b40      	cmp	r3, #64	@ 0x40
 80034c8:	d141      	bne.n	800354e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	3314      	adds	r3, #20
 80034d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80034d8:	e853 3f00 	ldrex	r3, [r3]
 80034dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80034e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80034e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	3314      	adds	r3, #20
 80034f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80034f6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80034fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003502:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003506:	e841 2300 	strex	r3, r2, [r1]
 800350a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800350e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1d9      	bne.n	80034ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800351a:	2b00      	cmp	r3, #0
 800351c:	d013      	beq.n	8003546 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003522:	4a7e      	ldr	r2, [pc, #504]	@ (800371c <HAL_UART_IRQHandler+0x3e0>)
 8003524:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800352a:	4618      	mov	r0, r3
 800352c:	f7fd fff9 	bl	8001522 <HAL_DMA_Abort_IT>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d016      	beq.n	8003564 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800353a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003540:	4610      	mov	r0, r2
 8003542:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003544:	e00e      	b.n	8003564 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f994 	bl	8003874 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800354c:	e00a      	b.n	8003564 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f990 	bl	8003874 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003554:	e006      	b.n	8003564 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f98c 	bl	8003874 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003562:	e175      	b.n	8003850 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003564:	bf00      	nop
    return;
 8003566:	e173      	b.n	8003850 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800356c:	2b01      	cmp	r3, #1
 800356e:	f040 814f 	bne.w	8003810 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003576:	f003 0310 	and.w	r3, r3, #16
 800357a:	2b00      	cmp	r3, #0
 800357c:	f000 8148 	beq.w	8003810 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003584:	f003 0310 	and.w	r3, r3, #16
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 8141 	beq.w	8003810 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800358e:	2300      	movs	r3, #0
 8003590:	60bb      	str	r3, [r7, #8]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	60bb      	str	r3, [r7, #8]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	60bb      	str	r3, [r7, #8]
 80035a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035ae:	2b40      	cmp	r3, #64	@ 0x40
 80035b0:	f040 80b6 	bne.w	8003720 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80035c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 8145 	beq.w	8003854 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80035ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80035d2:	429a      	cmp	r2, r3
 80035d4:	f080 813e 	bcs.w	8003854 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80035de:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035ea:	f000 8088 	beq.w	80036fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	330c      	adds	r3, #12
 80035f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80035fc:	e853 3f00 	ldrex	r3, [r3]
 8003600:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003604:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003608:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800360c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	330c      	adds	r3, #12
 8003616:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800361a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800361e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003622:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003626:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800362a:	e841 2300 	strex	r3, r2, [r1]
 800362e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003632:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1d9      	bne.n	80035ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	3314      	adds	r3, #20
 8003640:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003642:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003644:	e853 3f00 	ldrex	r3, [r3]
 8003648:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800364a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800364c:	f023 0301 	bic.w	r3, r3, #1
 8003650:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	3314      	adds	r3, #20
 800365a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800365e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003662:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003664:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003666:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800366a:	e841 2300 	strex	r3, r2, [r1]
 800366e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003670:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1e1      	bne.n	800363a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	3314      	adds	r3, #20
 800367c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800367e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003680:	e853 3f00 	ldrex	r3, [r3]
 8003684:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003686:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003688:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800368c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	3314      	adds	r3, #20
 8003696:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800369a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800369c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800369e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80036a0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80036a2:	e841 2300 	strex	r3, r2, [r1]
 80036a6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80036a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1e3      	bne.n	8003676 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2220      	movs	r2, #32
 80036b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	330c      	adds	r3, #12
 80036c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036c6:	e853 3f00 	ldrex	r3, [r3]
 80036ca:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80036cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036ce:	f023 0310 	bic.w	r3, r3, #16
 80036d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	330c      	adds	r3, #12
 80036dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80036e0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80036e2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80036e6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80036e8:	e841 2300 	strex	r3, r2, [r1]
 80036ec:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80036ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d1e3      	bne.n	80036bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7fd fea2 	bl	8001442 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2202      	movs	r2, #2
 8003702:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800370c:	b29b      	uxth	r3, r3
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	b29b      	uxth	r3, r3
 8003712:	4619      	mov	r1, r3
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 f8b7 	bl	8003888 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800371a:	e09b      	b.n	8003854 <HAL_UART_IRQHandler+0x518>
 800371c:	08003a8d 	.word	0x08003a8d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003728:	b29b      	uxth	r3, r3
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003734:	b29b      	uxth	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	f000 808e 	beq.w	8003858 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800373c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 8089 	beq.w	8003858 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	330c      	adds	r3, #12
 800374c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003750:	e853 3f00 	ldrex	r3, [r3]
 8003754:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003756:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003758:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800375c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	330c      	adds	r3, #12
 8003766:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800376a:	647a      	str	r2, [r7, #68]	@ 0x44
 800376c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003770:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003772:	e841 2300 	strex	r3, r2, [r1]
 8003776:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003778:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1e3      	bne.n	8003746 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	3314      	adds	r3, #20
 8003784:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003788:	e853 3f00 	ldrex	r3, [r3]
 800378c:	623b      	str	r3, [r7, #32]
   return(result);
 800378e:	6a3b      	ldr	r3, [r7, #32]
 8003790:	f023 0301 	bic.w	r3, r3, #1
 8003794:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	3314      	adds	r3, #20
 800379e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80037a2:	633a      	str	r2, [r7, #48]	@ 0x30
 80037a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80037a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037aa:	e841 2300 	strex	r3, r2, [r1]
 80037ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80037b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1e3      	bne.n	800377e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2220      	movs	r2, #32
 80037ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	330c      	adds	r3, #12
 80037ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	e853 3f00 	ldrex	r3, [r3]
 80037d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f023 0310 	bic.w	r3, r3, #16
 80037da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	330c      	adds	r3, #12
 80037e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80037e8:	61fa      	str	r2, [r7, #28]
 80037ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ec:	69b9      	ldr	r1, [r7, #24]
 80037ee:	69fa      	ldr	r2, [r7, #28]
 80037f0:	e841 2300 	strex	r3, r2, [r1]
 80037f4:	617b      	str	r3, [r7, #20]
   return(result);
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1e3      	bne.n	80037c4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2202      	movs	r2, #2
 8003800:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003802:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003806:	4619      	mov	r1, r3
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 f83d 	bl	8003888 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800380e:	e023      	b.n	8003858 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003814:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003818:	2b00      	cmp	r3, #0
 800381a:	d009      	beq.n	8003830 <HAL_UART_IRQHandler+0x4f4>
 800381c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003820:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003824:	2b00      	cmp	r3, #0
 8003826:	d003      	beq.n	8003830 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 f943 	bl	8003ab4 <UART_Transmit_IT>
    return;
 800382e:	e014      	b.n	800385a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00e      	beq.n	800385a <HAL_UART_IRQHandler+0x51e>
 800383c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003840:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003844:	2b00      	cmp	r3, #0
 8003846:	d008      	beq.n	800385a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 f983 	bl	8003b54 <UART_EndTransmit_IT>
    return;
 800384e:	e004      	b.n	800385a <HAL_UART_IRQHandler+0x51e>
    return;
 8003850:	bf00      	nop
 8003852:	e002      	b.n	800385a <HAL_UART_IRQHandler+0x51e>
      return;
 8003854:	bf00      	nop
 8003856:	e000      	b.n	800385a <HAL_UART_IRQHandler+0x51e>
      return;
 8003858:	bf00      	nop
  }
}
 800385a:	37e8      	adds	r7, #232	@ 0xe8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800387c:	bf00      	nop
 800387e:	370c      	adds	r7, #12
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	460b      	mov	r3, r1
 8003892:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	603b      	str	r3, [r7, #0]
 80038ac:	4613      	mov	r3, r2
 80038ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038b0:	e03b      	b.n	800392a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038b2:	6a3b      	ldr	r3, [r7, #32]
 80038b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b8:	d037      	beq.n	800392a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ba:	f7fd fc81 	bl	80011c0 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	6a3a      	ldr	r2, [r7, #32]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d302      	bcc.n	80038d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80038ca:	6a3b      	ldr	r3, [r7, #32]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d101      	bne.n	80038d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e03a      	b.n	800394a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	f003 0304 	and.w	r3, r3, #4
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d023      	beq.n	800392a <UART_WaitOnFlagUntilTimeout+0x8a>
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	2b80      	cmp	r3, #128	@ 0x80
 80038e6:	d020      	beq.n	800392a <UART_WaitOnFlagUntilTimeout+0x8a>
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	2b40      	cmp	r3, #64	@ 0x40
 80038ec:	d01d      	beq.n	800392a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0308 	and.w	r3, r3, #8
 80038f8:	2b08      	cmp	r3, #8
 80038fa:	d116      	bne.n	800392a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80038fc:	2300      	movs	r3, #0
 80038fe:	617b      	str	r3, [r7, #20]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	617b      	str	r3, [r7, #20]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	617b      	str	r3, [r7, #20]
 8003910:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f000 f857 	bl	80039c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2208      	movs	r2, #8
 800391c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e00f      	b.n	800394a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	4013      	ands	r3, r2
 8003934:	68ba      	ldr	r2, [r7, #8]
 8003936:	429a      	cmp	r2, r3
 8003938:	bf0c      	ite	eq
 800393a:	2301      	moveq	r3, #1
 800393c:	2300      	movne	r3, #0
 800393e:	b2db      	uxtb	r3, r3
 8003940:	461a      	mov	r2, r3
 8003942:	79fb      	ldrb	r3, [r7, #7]
 8003944:	429a      	cmp	r2, r3
 8003946:	d0b4      	beq.n	80038b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3718      	adds	r7, #24
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003952:	b480      	push	{r7}
 8003954:	b085      	sub	sp, #20
 8003956:	af00      	add	r7, sp, #0
 8003958:	60f8      	str	r0, [r7, #12]
 800395a:	60b9      	str	r1, [r7, #8]
 800395c:	4613      	mov	r3, r2
 800395e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	68ba      	ldr	r2, [r7, #8]
 8003964:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	88fa      	ldrh	r2, [r7, #6]
 800396a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	88fa      	ldrh	r2, [r7, #6]
 8003970:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2222      	movs	r2, #34	@ 0x22
 800397c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d007      	beq.n	8003998 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68da      	ldr	r2, [r3, #12]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003996:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	695a      	ldr	r2, [r3, #20]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f042 0201 	orr.w	r2, r2, #1
 80039a6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68da      	ldr	r2, [r3, #12]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f042 0220 	orr.w	r2, r2, #32
 80039b6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3714      	adds	r7, #20
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr

080039c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039c6:	b480      	push	{r7}
 80039c8:	b095      	sub	sp, #84	@ 0x54
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	330c      	adds	r3, #12
 80039d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039d8:	e853 3f00 	ldrex	r3, [r3]
 80039dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80039de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80039e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	330c      	adds	r3, #12
 80039ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80039ee:	643a      	str	r2, [r7, #64]	@ 0x40
 80039f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80039f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80039f6:	e841 2300 	strex	r3, r2, [r1]
 80039fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80039fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1e5      	bne.n	80039ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	3314      	adds	r3, #20
 8003a08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a0a:	6a3b      	ldr	r3, [r7, #32]
 8003a0c:	e853 3f00 	ldrex	r3, [r3]
 8003a10:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	f023 0301 	bic.w	r3, r3, #1
 8003a18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	3314      	adds	r3, #20
 8003a20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a24:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a2a:	e841 2300 	strex	r3, r2, [r1]
 8003a2e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1e5      	bne.n	8003a02 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d119      	bne.n	8003a72 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	330c      	adds	r3, #12
 8003a44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	e853 3f00 	ldrex	r3, [r3]
 8003a4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	f023 0310 	bic.w	r3, r3, #16
 8003a54:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	330c      	adds	r3, #12
 8003a5c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a5e:	61ba      	str	r2, [r7, #24]
 8003a60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a62:	6979      	ldr	r1, [r7, #20]
 8003a64:	69ba      	ldr	r2, [r7, #24]
 8003a66:	e841 2300 	strex	r3, r2, [r1]
 8003a6a:	613b      	str	r3, [r7, #16]
   return(result);
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1e5      	bne.n	8003a3e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2220      	movs	r2, #32
 8003a76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003a80:	bf00      	nop
 8003a82:	3754      	adds	r7, #84	@ 0x54
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a98:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f7ff fee4 	bl	8003874 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003aac:	bf00      	nop
 8003aae:	3710      	adds	r7, #16
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b21      	cmp	r3, #33	@ 0x21
 8003ac6:	d13e      	bne.n	8003b46 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ad0:	d114      	bne.n	8003afc <UART_Transmit_IT+0x48>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d110      	bne.n	8003afc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	881b      	ldrh	r3, [r3, #0]
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003aee:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	1c9a      	adds	r2, r3, #2
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	621a      	str	r2, [r3, #32]
 8003afa:	e008      	b.n	8003b0e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	1c59      	adds	r1, r3, #1
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	6211      	str	r1, [r2, #32]
 8003b06:	781a      	ldrb	r2, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10f      	bne.n	8003b42 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68da      	ldr	r2, [r3, #12]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b30:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68da      	ldr	r2, [r3, #12]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b40:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003b42:	2300      	movs	r3, #0
 8003b44:	e000      	b.n	8003b48 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003b46:	2302      	movs	r3, #2
  }
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3714      	adds	r7, #20
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68da      	ldr	r2, [r3, #12]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b6a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2220      	movs	r2, #32
 8003b70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f7ff fe73 	bl	8003860 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3708      	adds	r7, #8
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b08c      	sub	sp, #48	@ 0x30
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	2b22      	cmp	r3, #34	@ 0x22
 8003b96:	f040 80ae 	bne.w	8003cf6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ba2:	d117      	bne.n	8003bd4 <UART_Receive_IT+0x50>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d113      	bne.n	8003bd4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003bac:	2300      	movs	r3, #0
 8003bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bc6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bcc:	1c9a      	adds	r2, r3, #2
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	629a      	str	r2, [r3, #40]	@ 0x28
 8003bd2:	e026      	b.n	8003c22 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003be6:	d007      	beq.n	8003bf8 <UART_Receive_IT+0x74>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d10a      	bne.n	8003c06 <UART_Receive_IT+0x82>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d106      	bne.n	8003c06 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	b2da      	uxtb	r2, r3
 8003c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c02:	701a      	strb	r2, [r3, #0]
 8003c04:	e008      	b.n	8003c18 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c12:	b2da      	uxtb	r2, r3
 8003c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c16:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c1c:	1c5a      	adds	r2, r3, #1
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	4619      	mov	r1, r3
 8003c30:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d15d      	bne.n	8003cf2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68da      	ldr	r2, [r3, #12]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 0220 	bic.w	r2, r2, #32
 8003c44:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68da      	ldr	r2, [r3, #12]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c54:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	695a      	ldr	r2, [r3, #20]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 0201 	bic.w	r2, r2, #1
 8003c64:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2220      	movs	r2, #32
 8003c6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d135      	bne.n	8003ce8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	330c      	adds	r3, #12
 8003c88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	e853 3f00 	ldrex	r3, [r3]
 8003c90:	613b      	str	r3, [r7, #16]
   return(result);
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	f023 0310 	bic.w	r3, r3, #16
 8003c98:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	330c      	adds	r3, #12
 8003ca0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ca2:	623a      	str	r2, [r7, #32]
 8003ca4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca6:	69f9      	ldr	r1, [r7, #28]
 8003ca8:	6a3a      	ldr	r2, [r7, #32]
 8003caa:	e841 2300 	strex	r3, r2, [r1]
 8003cae:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1e5      	bne.n	8003c82 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0310 	and.w	r3, r3, #16
 8003cc0:	2b10      	cmp	r3, #16
 8003cc2:	d10a      	bne.n	8003cda <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	60fb      	str	r3, [r7, #12]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	60fb      	str	r3, [r7, #12]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003cde:	4619      	mov	r1, r3
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f7ff fdd1 	bl	8003888 <HAL_UARTEx_RxEventCallback>
 8003ce6:	e002      	b.n	8003cee <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f7fc fe91 	bl	8000a10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	e002      	b.n	8003cf8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	e000      	b.n	8003cf8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003cf6:	2302      	movs	r3, #2
  }
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3730      	adds	r7, #48	@ 0x30
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d04:	b0c0      	sub	sp, #256	@ 0x100
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d1c:	68d9      	ldr	r1, [r3, #12]
 8003d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	ea40 0301 	orr.w	r3, r0, r1
 8003d28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d2e:	689a      	ldr	r2, [r3, #8]
 8003d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	431a      	orrs	r2, r3
 8003d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003d58:	f021 010c 	bic.w	r1, r1, #12
 8003d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003d66:	430b      	orrs	r3, r1
 8003d68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003d76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d7a:	6999      	ldr	r1, [r3, #24]
 8003d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	ea40 0301 	orr.w	r3, r0, r1
 8003d86:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	4b8f      	ldr	r3, [pc, #572]	@ (8003fcc <UART_SetConfig+0x2cc>)
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d005      	beq.n	8003da0 <UART_SetConfig+0xa0>
 8003d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	4b8d      	ldr	r3, [pc, #564]	@ (8003fd0 <UART_SetConfig+0x2d0>)
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d104      	bne.n	8003daa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003da0:	f7fe f996 	bl	80020d0 <HAL_RCC_GetPCLK2Freq>
 8003da4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003da8:	e003      	b.n	8003db2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003daa:	f7fe f97d 	bl	80020a8 <HAL_RCC_GetPCLK1Freq>
 8003dae:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db6:	69db      	ldr	r3, [r3, #28]
 8003db8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dbc:	f040 810c 	bne.w	8003fd8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003dc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003dca:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003dce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003dd2:	4622      	mov	r2, r4
 8003dd4:	462b      	mov	r3, r5
 8003dd6:	1891      	adds	r1, r2, r2
 8003dd8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003dda:	415b      	adcs	r3, r3
 8003ddc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003dde:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003de2:	4621      	mov	r1, r4
 8003de4:	eb12 0801 	adds.w	r8, r2, r1
 8003de8:	4629      	mov	r1, r5
 8003dea:	eb43 0901 	adc.w	r9, r3, r1
 8003dee:	f04f 0200 	mov.w	r2, #0
 8003df2:	f04f 0300 	mov.w	r3, #0
 8003df6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003dfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003dfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e02:	4690      	mov	r8, r2
 8003e04:	4699      	mov	r9, r3
 8003e06:	4623      	mov	r3, r4
 8003e08:	eb18 0303 	adds.w	r3, r8, r3
 8003e0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003e10:	462b      	mov	r3, r5
 8003e12:	eb49 0303 	adc.w	r3, r9, r3
 8003e16:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e26:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003e2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003e2e:	460b      	mov	r3, r1
 8003e30:	18db      	adds	r3, r3, r3
 8003e32:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e34:	4613      	mov	r3, r2
 8003e36:	eb42 0303 	adc.w	r3, r2, r3
 8003e3a:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003e40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003e44:	f7fc fa3c 	bl	80002c0 <__aeabi_uldivmod>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	4b61      	ldr	r3, [pc, #388]	@ (8003fd4 <UART_SetConfig+0x2d4>)
 8003e4e:	fba3 2302 	umull	r2, r3, r3, r2
 8003e52:	095b      	lsrs	r3, r3, #5
 8003e54:	011c      	lsls	r4, r3, #4
 8003e56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e60:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003e64:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003e68:	4642      	mov	r2, r8
 8003e6a:	464b      	mov	r3, r9
 8003e6c:	1891      	adds	r1, r2, r2
 8003e6e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003e70:	415b      	adcs	r3, r3
 8003e72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003e78:	4641      	mov	r1, r8
 8003e7a:	eb12 0a01 	adds.w	sl, r2, r1
 8003e7e:	4649      	mov	r1, r9
 8003e80:	eb43 0b01 	adc.w	fp, r3, r1
 8003e84:	f04f 0200 	mov.w	r2, #0
 8003e88:	f04f 0300 	mov.w	r3, #0
 8003e8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003e90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003e94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e98:	4692      	mov	sl, r2
 8003e9a:	469b      	mov	fp, r3
 8003e9c:	4643      	mov	r3, r8
 8003e9e:	eb1a 0303 	adds.w	r3, sl, r3
 8003ea2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ea6:	464b      	mov	r3, r9
 8003ea8:	eb4b 0303 	adc.w	r3, fp, r3
 8003eac:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ebc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003ec0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	18db      	adds	r3, r3, r3
 8003ec8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003eca:	4613      	mov	r3, r2
 8003ecc:	eb42 0303 	adc.w	r3, r2, r3
 8003ed0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ed2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003ed6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003eda:	f7fc f9f1 	bl	80002c0 <__aeabi_uldivmod>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	4611      	mov	r1, r2
 8003ee4:	4b3b      	ldr	r3, [pc, #236]	@ (8003fd4 <UART_SetConfig+0x2d4>)
 8003ee6:	fba3 2301 	umull	r2, r3, r3, r1
 8003eea:	095b      	lsrs	r3, r3, #5
 8003eec:	2264      	movs	r2, #100	@ 0x64
 8003eee:	fb02 f303 	mul.w	r3, r2, r3
 8003ef2:	1acb      	subs	r3, r1, r3
 8003ef4:	00db      	lsls	r3, r3, #3
 8003ef6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003efa:	4b36      	ldr	r3, [pc, #216]	@ (8003fd4 <UART_SetConfig+0x2d4>)
 8003efc:	fba3 2302 	umull	r2, r3, r3, r2
 8003f00:	095b      	lsrs	r3, r3, #5
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003f08:	441c      	add	r4, r3
 8003f0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f14:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003f18:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003f1c:	4642      	mov	r2, r8
 8003f1e:	464b      	mov	r3, r9
 8003f20:	1891      	adds	r1, r2, r2
 8003f22:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003f24:	415b      	adcs	r3, r3
 8003f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003f2c:	4641      	mov	r1, r8
 8003f2e:	1851      	adds	r1, r2, r1
 8003f30:	6339      	str	r1, [r7, #48]	@ 0x30
 8003f32:	4649      	mov	r1, r9
 8003f34:	414b      	adcs	r3, r1
 8003f36:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f38:	f04f 0200 	mov.w	r2, #0
 8003f3c:	f04f 0300 	mov.w	r3, #0
 8003f40:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003f44:	4659      	mov	r1, fp
 8003f46:	00cb      	lsls	r3, r1, #3
 8003f48:	4651      	mov	r1, sl
 8003f4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f4e:	4651      	mov	r1, sl
 8003f50:	00ca      	lsls	r2, r1, #3
 8003f52:	4610      	mov	r0, r2
 8003f54:	4619      	mov	r1, r3
 8003f56:	4603      	mov	r3, r0
 8003f58:	4642      	mov	r2, r8
 8003f5a:	189b      	adds	r3, r3, r2
 8003f5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f60:	464b      	mov	r3, r9
 8003f62:	460a      	mov	r2, r1
 8003f64:	eb42 0303 	adc.w	r3, r2, r3
 8003f68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003f78:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003f7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003f80:	460b      	mov	r3, r1
 8003f82:	18db      	adds	r3, r3, r3
 8003f84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f86:	4613      	mov	r3, r2
 8003f88:	eb42 0303 	adc.w	r3, r2, r3
 8003f8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f92:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003f96:	f7fc f993 	bl	80002c0 <__aeabi_uldivmod>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003fd4 <UART_SetConfig+0x2d4>)
 8003fa0:	fba3 1302 	umull	r1, r3, r3, r2
 8003fa4:	095b      	lsrs	r3, r3, #5
 8003fa6:	2164      	movs	r1, #100	@ 0x64
 8003fa8:	fb01 f303 	mul.w	r3, r1, r3
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	3332      	adds	r3, #50	@ 0x32
 8003fb2:	4a08      	ldr	r2, [pc, #32]	@ (8003fd4 <UART_SetConfig+0x2d4>)
 8003fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb8:	095b      	lsrs	r3, r3, #5
 8003fba:	f003 0207 	and.w	r2, r3, #7
 8003fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4422      	add	r2, r4
 8003fc6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003fc8:	e106      	b.n	80041d8 <UART_SetConfig+0x4d8>
 8003fca:	bf00      	nop
 8003fcc:	40011000 	.word	0x40011000
 8003fd0:	40011400 	.word	0x40011400
 8003fd4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003fe2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003fe6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003fea:	4642      	mov	r2, r8
 8003fec:	464b      	mov	r3, r9
 8003fee:	1891      	adds	r1, r2, r2
 8003ff0:	6239      	str	r1, [r7, #32]
 8003ff2:	415b      	adcs	r3, r3
 8003ff4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ff6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ffa:	4641      	mov	r1, r8
 8003ffc:	1854      	adds	r4, r2, r1
 8003ffe:	4649      	mov	r1, r9
 8004000:	eb43 0501 	adc.w	r5, r3, r1
 8004004:	f04f 0200 	mov.w	r2, #0
 8004008:	f04f 0300 	mov.w	r3, #0
 800400c:	00eb      	lsls	r3, r5, #3
 800400e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004012:	00e2      	lsls	r2, r4, #3
 8004014:	4614      	mov	r4, r2
 8004016:	461d      	mov	r5, r3
 8004018:	4643      	mov	r3, r8
 800401a:	18e3      	adds	r3, r4, r3
 800401c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004020:	464b      	mov	r3, r9
 8004022:	eb45 0303 	adc.w	r3, r5, r3
 8004026:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800402a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004036:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800403a:	f04f 0200 	mov.w	r2, #0
 800403e:	f04f 0300 	mov.w	r3, #0
 8004042:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004046:	4629      	mov	r1, r5
 8004048:	008b      	lsls	r3, r1, #2
 800404a:	4621      	mov	r1, r4
 800404c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004050:	4621      	mov	r1, r4
 8004052:	008a      	lsls	r2, r1, #2
 8004054:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004058:	f7fc f932 	bl	80002c0 <__aeabi_uldivmod>
 800405c:	4602      	mov	r2, r0
 800405e:	460b      	mov	r3, r1
 8004060:	4b60      	ldr	r3, [pc, #384]	@ (80041e4 <UART_SetConfig+0x4e4>)
 8004062:	fba3 2302 	umull	r2, r3, r3, r2
 8004066:	095b      	lsrs	r3, r3, #5
 8004068:	011c      	lsls	r4, r3, #4
 800406a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800406e:	2200      	movs	r2, #0
 8004070:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004074:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004078:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800407c:	4642      	mov	r2, r8
 800407e:	464b      	mov	r3, r9
 8004080:	1891      	adds	r1, r2, r2
 8004082:	61b9      	str	r1, [r7, #24]
 8004084:	415b      	adcs	r3, r3
 8004086:	61fb      	str	r3, [r7, #28]
 8004088:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800408c:	4641      	mov	r1, r8
 800408e:	1851      	adds	r1, r2, r1
 8004090:	6139      	str	r1, [r7, #16]
 8004092:	4649      	mov	r1, r9
 8004094:	414b      	adcs	r3, r1
 8004096:	617b      	str	r3, [r7, #20]
 8004098:	f04f 0200 	mov.w	r2, #0
 800409c:	f04f 0300 	mov.w	r3, #0
 80040a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040a4:	4659      	mov	r1, fp
 80040a6:	00cb      	lsls	r3, r1, #3
 80040a8:	4651      	mov	r1, sl
 80040aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040ae:	4651      	mov	r1, sl
 80040b0:	00ca      	lsls	r2, r1, #3
 80040b2:	4610      	mov	r0, r2
 80040b4:	4619      	mov	r1, r3
 80040b6:	4603      	mov	r3, r0
 80040b8:	4642      	mov	r2, r8
 80040ba:	189b      	adds	r3, r3, r2
 80040bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80040c0:	464b      	mov	r3, r9
 80040c2:	460a      	mov	r2, r1
 80040c4:	eb42 0303 	adc.w	r3, r2, r3
 80040c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80040cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80040d6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80040d8:	f04f 0200 	mov.w	r2, #0
 80040dc:	f04f 0300 	mov.w	r3, #0
 80040e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80040e4:	4649      	mov	r1, r9
 80040e6:	008b      	lsls	r3, r1, #2
 80040e8:	4641      	mov	r1, r8
 80040ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040ee:	4641      	mov	r1, r8
 80040f0:	008a      	lsls	r2, r1, #2
 80040f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80040f6:	f7fc f8e3 	bl	80002c0 <__aeabi_uldivmod>
 80040fa:	4602      	mov	r2, r0
 80040fc:	460b      	mov	r3, r1
 80040fe:	4611      	mov	r1, r2
 8004100:	4b38      	ldr	r3, [pc, #224]	@ (80041e4 <UART_SetConfig+0x4e4>)
 8004102:	fba3 2301 	umull	r2, r3, r3, r1
 8004106:	095b      	lsrs	r3, r3, #5
 8004108:	2264      	movs	r2, #100	@ 0x64
 800410a:	fb02 f303 	mul.w	r3, r2, r3
 800410e:	1acb      	subs	r3, r1, r3
 8004110:	011b      	lsls	r3, r3, #4
 8004112:	3332      	adds	r3, #50	@ 0x32
 8004114:	4a33      	ldr	r2, [pc, #204]	@ (80041e4 <UART_SetConfig+0x4e4>)
 8004116:	fba2 2303 	umull	r2, r3, r2, r3
 800411a:	095b      	lsrs	r3, r3, #5
 800411c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004120:	441c      	add	r4, r3
 8004122:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004126:	2200      	movs	r2, #0
 8004128:	673b      	str	r3, [r7, #112]	@ 0x70
 800412a:	677a      	str	r2, [r7, #116]	@ 0x74
 800412c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004130:	4642      	mov	r2, r8
 8004132:	464b      	mov	r3, r9
 8004134:	1891      	adds	r1, r2, r2
 8004136:	60b9      	str	r1, [r7, #8]
 8004138:	415b      	adcs	r3, r3
 800413a:	60fb      	str	r3, [r7, #12]
 800413c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004140:	4641      	mov	r1, r8
 8004142:	1851      	adds	r1, r2, r1
 8004144:	6039      	str	r1, [r7, #0]
 8004146:	4649      	mov	r1, r9
 8004148:	414b      	adcs	r3, r1
 800414a:	607b      	str	r3, [r7, #4]
 800414c:	f04f 0200 	mov.w	r2, #0
 8004150:	f04f 0300 	mov.w	r3, #0
 8004154:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004158:	4659      	mov	r1, fp
 800415a:	00cb      	lsls	r3, r1, #3
 800415c:	4651      	mov	r1, sl
 800415e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004162:	4651      	mov	r1, sl
 8004164:	00ca      	lsls	r2, r1, #3
 8004166:	4610      	mov	r0, r2
 8004168:	4619      	mov	r1, r3
 800416a:	4603      	mov	r3, r0
 800416c:	4642      	mov	r2, r8
 800416e:	189b      	adds	r3, r3, r2
 8004170:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004172:	464b      	mov	r3, r9
 8004174:	460a      	mov	r2, r1
 8004176:	eb42 0303 	adc.w	r3, r2, r3
 800417a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800417c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	663b      	str	r3, [r7, #96]	@ 0x60
 8004186:	667a      	str	r2, [r7, #100]	@ 0x64
 8004188:	f04f 0200 	mov.w	r2, #0
 800418c:	f04f 0300 	mov.w	r3, #0
 8004190:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004194:	4649      	mov	r1, r9
 8004196:	008b      	lsls	r3, r1, #2
 8004198:	4641      	mov	r1, r8
 800419a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800419e:	4641      	mov	r1, r8
 80041a0:	008a      	lsls	r2, r1, #2
 80041a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80041a6:	f7fc f88b 	bl	80002c0 <__aeabi_uldivmod>
 80041aa:	4602      	mov	r2, r0
 80041ac:	460b      	mov	r3, r1
 80041ae:	4b0d      	ldr	r3, [pc, #52]	@ (80041e4 <UART_SetConfig+0x4e4>)
 80041b0:	fba3 1302 	umull	r1, r3, r3, r2
 80041b4:	095b      	lsrs	r3, r3, #5
 80041b6:	2164      	movs	r1, #100	@ 0x64
 80041b8:	fb01 f303 	mul.w	r3, r1, r3
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	011b      	lsls	r3, r3, #4
 80041c0:	3332      	adds	r3, #50	@ 0x32
 80041c2:	4a08      	ldr	r2, [pc, #32]	@ (80041e4 <UART_SetConfig+0x4e4>)
 80041c4:	fba2 2303 	umull	r2, r3, r2, r3
 80041c8:	095b      	lsrs	r3, r3, #5
 80041ca:	f003 020f 	and.w	r2, r3, #15
 80041ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4422      	add	r2, r4
 80041d6:	609a      	str	r2, [r3, #8]
}
 80041d8:	bf00      	nop
 80041da:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80041de:	46bd      	mov	sp, r7
 80041e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041e4:	51eb851f 	.word	0x51eb851f

080041e8 <malloc>:
 80041e8:	4b02      	ldr	r3, [pc, #8]	@ (80041f4 <malloc+0xc>)
 80041ea:	4601      	mov	r1, r0
 80041ec:	6818      	ldr	r0, [r3, #0]
 80041ee:	f000 b82d 	b.w	800424c <_malloc_r>
 80041f2:	bf00      	nop
 80041f4:	2000000c 	.word	0x2000000c

080041f8 <free>:
 80041f8:	4b02      	ldr	r3, [pc, #8]	@ (8004204 <free+0xc>)
 80041fa:	4601      	mov	r1, r0
 80041fc:	6818      	ldr	r0, [r3, #0]
 80041fe:	f000 b99b 	b.w	8004538 <_free_r>
 8004202:	bf00      	nop
 8004204:	2000000c 	.word	0x2000000c

08004208 <sbrk_aligned>:
 8004208:	b570      	push	{r4, r5, r6, lr}
 800420a:	4e0f      	ldr	r6, [pc, #60]	@ (8004248 <sbrk_aligned+0x40>)
 800420c:	460c      	mov	r4, r1
 800420e:	6831      	ldr	r1, [r6, #0]
 8004210:	4605      	mov	r5, r0
 8004212:	b911      	cbnz	r1, 800421a <sbrk_aligned+0x12>
 8004214:	f000 f946 	bl	80044a4 <_sbrk_r>
 8004218:	6030      	str	r0, [r6, #0]
 800421a:	4621      	mov	r1, r4
 800421c:	4628      	mov	r0, r5
 800421e:	f000 f941 	bl	80044a4 <_sbrk_r>
 8004222:	1c43      	adds	r3, r0, #1
 8004224:	d103      	bne.n	800422e <sbrk_aligned+0x26>
 8004226:	f04f 34ff 	mov.w	r4, #4294967295
 800422a:	4620      	mov	r0, r4
 800422c:	bd70      	pop	{r4, r5, r6, pc}
 800422e:	1cc4      	adds	r4, r0, #3
 8004230:	f024 0403 	bic.w	r4, r4, #3
 8004234:	42a0      	cmp	r0, r4
 8004236:	d0f8      	beq.n	800422a <sbrk_aligned+0x22>
 8004238:	1a21      	subs	r1, r4, r0
 800423a:	4628      	mov	r0, r5
 800423c:	f000 f932 	bl	80044a4 <_sbrk_r>
 8004240:	3001      	adds	r0, #1
 8004242:	d1f2      	bne.n	800422a <sbrk_aligned+0x22>
 8004244:	e7ef      	b.n	8004226 <sbrk_aligned+0x1e>
 8004246:	bf00      	nop
 8004248:	20000138 	.word	0x20000138

0800424c <_malloc_r>:
 800424c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004250:	1ccd      	adds	r5, r1, #3
 8004252:	f025 0503 	bic.w	r5, r5, #3
 8004256:	3508      	adds	r5, #8
 8004258:	2d0c      	cmp	r5, #12
 800425a:	bf38      	it	cc
 800425c:	250c      	movcc	r5, #12
 800425e:	2d00      	cmp	r5, #0
 8004260:	4606      	mov	r6, r0
 8004262:	db01      	blt.n	8004268 <_malloc_r+0x1c>
 8004264:	42a9      	cmp	r1, r5
 8004266:	d904      	bls.n	8004272 <_malloc_r+0x26>
 8004268:	230c      	movs	r3, #12
 800426a:	6033      	str	r3, [r6, #0]
 800426c:	2000      	movs	r0, #0
 800426e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004272:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004348 <_malloc_r+0xfc>
 8004276:	f000 f869 	bl	800434c <__malloc_lock>
 800427a:	f8d8 3000 	ldr.w	r3, [r8]
 800427e:	461c      	mov	r4, r3
 8004280:	bb44      	cbnz	r4, 80042d4 <_malloc_r+0x88>
 8004282:	4629      	mov	r1, r5
 8004284:	4630      	mov	r0, r6
 8004286:	f7ff ffbf 	bl	8004208 <sbrk_aligned>
 800428a:	1c43      	adds	r3, r0, #1
 800428c:	4604      	mov	r4, r0
 800428e:	d158      	bne.n	8004342 <_malloc_r+0xf6>
 8004290:	f8d8 4000 	ldr.w	r4, [r8]
 8004294:	4627      	mov	r7, r4
 8004296:	2f00      	cmp	r7, #0
 8004298:	d143      	bne.n	8004322 <_malloc_r+0xd6>
 800429a:	2c00      	cmp	r4, #0
 800429c:	d04b      	beq.n	8004336 <_malloc_r+0xea>
 800429e:	6823      	ldr	r3, [r4, #0]
 80042a0:	4639      	mov	r1, r7
 80042a2:	4630      	mov	r0, r6
 80042a4:	eb04 0903 	add.w	r9, r4, r3
 80042a8:	f000 f8fc 	bl	80044a4 <_sbrk_r>
 80042ac:	4581      	cmp	r9, r0
 80042ae:	d142      	bne.n	8004336 <_malloc_r+0xea>
 80042b0:	6821      	ldr	r1, [r4, #0]
 80042b2:	1a6d      	subs	r5, r5, r1
 80042b4:	4629      	mov	r1, r5
 80042b6:	4630      	mov	r0, r6
 80042b8:	f7ff ffa6 	bl	8004208 <sbrk_aligned>
 80042bc:	3001      	adds	r0, #1
 80042be:	d03a      	beq.n	8004336 <_malloc_r+0xea>
 80042c0:	6823      	ldr	r3, [r4, #0]
 80042c2:	442b      	add	r3, r5
 80042c4:	6023      	str	r3, [r4, #0]
 80042c6:	f8d8 3000 	ldr.w	r3, [r8]
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	bb62      	cbnz	r2, 8004328 <_malloc_r+0xdc>
 80042ce:	f8c8 7000 	str.w	r7, [r8]
 80042d2:	e00f      	b.n	80042f4 <_malloc_r+0xa8>
 80042d4:	6822      	ldr	r2, [r4, #0]
 80042d6:	1b52      	subs	r2, r2, r5
 80042d8:	d420      	bmi.n	800431c <_malloc_r+0xd0>
 80042da:	2a0b      	cmp	r2, #11
 80042dc:	d917      	bls.n	800430e <_malloc_r+0xc2>
 80042de:	1961      	adds	r1, r4, r5
 80042e0:	42a3      	cmp	r3, r4
 80042e2:	6025      	str	r5, [r4, #0]
 80042e4:	bf18      	it	ne
 80042e6:	6059      	strne	r1, [r3, #4]
 80042e8:	6863      	ldr	r3, [r4, #4]
 80042ea:	bf08      	it	eq
 80042ec:	f8c8 1000 	streq.w	r1, [r8]
 80042f0:	5162      	str	r2, [r4, r5]
 80042f2:	604b      	str	r3, [r1, #4]
 80042f4:	4630      	mov	r0, r6
 80042f6:	f000 f82f 	bl	8004358 <__malloc_unlock>
 80042fa:	f104 000b 	add.w	r0, r4, #11
 80042fe:	1d23      	adds	r3, r4, #4
 8004300:	f020 0007 	bic.w	r0, r0, #7
 8004304:	1ac2      	subs	r2, r0, r3
 8004306:	bf1c      	itt	ne
 8004308:	1a1b      	subne	r3, r3, r0
 800430a:	50a3      	strne	r3, [r4, r2]
 800430c:	e7af      	b.n	800426e <_malloc_r+0x22>
 800430e:	6862      	ldr	r2, [r4, #4]
 8004310:	42a3      	cmp	r3, r4
 8004312:	bf0c      	ite	eq
 8004314:	f8c8 2000 	streq.w	r2, [r8]
 8004318:	605a      	strne	r2, [r3, #4]
 800431a:	e7eb      	b.n	80042f4 <_malloc_r+0xa8>
 800431c:	4623      	mov	r3, r4
 800431e:	6864      	ldr	r4, [r4, #4]
 8004320:	e7ae      	b.n	8004280 <_malloc_r+0x34>
 8004322:	463c      	mov	r4, r7
 8004324:	687f      	ldr	r7, [r7, #4]
 8004326:	e7b6      	b.n	8004296 <_malloc_r+0x4a>
 8004328:	461a      	mov	r2, r3
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	42a3      	cmp	r3, r4
 800432e:	d1fb      	bne.n	8004328 <_malloc_r+0xdc>
 8004330:	2300      	movs	r3, #0
 8004332:	6053      	str	r3, [r2, #4]
 8004334:	e7de      	b.n	80042f4 <_malloc_r+0xa8>
 8004336:	230c      	movs	r3, #12
 8004338:	6033      	str	r3, [r6, #0]
 800433a:	4630      	mov	r0, r6
 800433c:	f000 f80c 	bl	8004358 <__malloc_unlock>
 8004340:	e794      	b.n	800426c <_malloc_r+0x20>
 8004342:	6005      	str	r5, [r0, #0]
 8004344:	e7d6      	b.n	80042f4 <_malloc_r+0xa8>
 8004346:	bf00      	nop
 8004348:	2000013c 	.word	0x2000013c

0800434c <__malloc_lock>:
 800434c:	4801      	ldr	r0, [pc, #4]	@ (8004354 <__malloc_lock+0x8>)
 800434e:	f000 b8e3 	b.w	8004518 <__retarget_lock_acquire_recursive>
 8004352:	bf00      	nop
 8004354:	2000027c 	.word	0x2000027c

08004358 <__malloc_unlock>:
 8004358:	4801      	ldr	r0, [pc, #4]	@ (8004360 <__malloc_unlock+0x8>)
 800435a:	f000 b8de 	b.w	800451a <__retarget_lock_release_recursive>
 800435e:	bf00      	nop
 8004360:	2000027c 	.word	0x2000027c

08004364 <realloc>:
 8004364:	4b02      	ldr	r3, [pc, #8]	@ (8004370 <realloc+0xc>)
 8004366:	460a      	mov	r2, r1
 8004368:	4601      	mov	r1, r0
 800436a:	6818      	ldr	r0, [r3, #0]
 800436c:	f000 b802 	b.w	8004374 <_realloc_r>
 8004370:	2000000c 	.word	0x2000000c

08004374 <_realloc_r>:
 8004374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004378:	4680      	mov	r8, r0
 800437a:	4615      	mov	r5, r2
 800437c:	460c      	mov	r4, r1
 800437e:	b921      	cbnz	r1, 800438a <_realloc_r+0x16>
 8004380:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004384:	4611      	mov	r1, r2
 8004386:	f7ff bf61 	b.w	800424c <_malloc_r>
 800438a:	b92a      	cbnz	r2, 8004398 <_realloc_r+0x24>
 800438c:	f000 f8d4 	bl	8004538 <_free_r>
 8004390:	2400      	movs	r4, #0
 8004392:	4620      	mov	r0, r4
 8004394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004398:	f000 f918 	bl	80045cc <_malloc_usable_size_r>
 800439c:	4285      	cmp	r5, r0
 800439e:	4606      	mov	r6, r0
 80043a0:	d802      	bhi.n	80043a8 <_realloc_r+0x34>
 80043a2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80043a6:	d8f4      	bhi.n	8004392 <_realloc_r+0x1e>
 80043a8:	4629      	mov	r1, r5
 80043aa:	4640      	mov	r0, r8
 80043ac:	f7ff ff4e 	bl	800424c <_malloc_r>
 80043b0:	4607      	mov	r7, r0
 80043b2:	2800      	cmp	r0, #0
 80043b4:	d0ec      	beq.n	8004390 <_realloc_r+0x1c>
 80043b6:	42b5      	cmp	r5, r6
 80043b8:	462a      	mov	r2, r5
 80043ba:	4621      	mov	r1, r4
 80043bc:	bf28      	it	cs
 80043be:	4632      	movcs	r2, r6
 80043c0:	f000 f8ac 	bl	800451c <memcpy>
 80043c4:	4621      	mov	r1, r4
 80043c6:	4640      	mov	r0, r8
 80043c8:	f000 f8b6 	bl	8004538 <_free_r>
 80043cc:	463c      	mov	r4, r7
 80043ce:	e7e0      	b.n	8004392 <_realloc_r+0x1e>

080043d0 <siprintf>:
 80043d0:	b40e      	push	{r1, r2, r3}
 80043d2:	b500      	push	{lr}
 80043d4:	b09c      	sub	sp, #112	@ 0x70
 80043d6:	ab1d      	add	r3, sp, #116	@ 0x74
 80043d8:	9002      	str	r0, [sp, #8]
 80043da:	9006      	str	r0, [sp, #24]
 80043dc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80043e0:	4809      	ldr	r0, [pc, #36]	@ (8004408 <siprintf+0x38>)
 80043e2:	9107      	str	r1, [sp, #28]
 80043e4:	9104      	str	r1, [sp, #16]
 80043e6:	4909      	ldr	r1, [pc, #36]	@ (800440c <siprintf+0x3c>)
 80043e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80043ec:	9105      	str	r1, [sp, #20]
 80043ee:	6800      	ldr	r0, [r0, #0]
 80043f0:	9301      	str	r3, [sp, #4]
 80043f2:	a902      	add	r1, sp, #8
 80043f4:	f000 f94e 	bl	8004694 <_svfiprintf_r>
 80043f8:	9b02      	ldr	r3, [sp, #8]
 80043fa:	2200      	movs	r2, #0
 80043fc:	701a      	strb	r2, [r3, #0]
 80043fe:	b01c      	add	sp, #112	@ 0x70
 8004400:	f85d eb04 	ldr.w	lr, [sp], #4
 8004404:	b003      	add	sp, #12
 8004406:	4770      	bx	lr
 8004408:	2000000c 	.word	0x2000000c
 800440c:	ffff0208 	.word	0xffff0208

08004410 <siscanf>:
 8004410:	b40e      	push	{r1, r2, r3}
 8004412:	b530      	push	{r4, r5, lr}
 8004414:	b09c      	sub	sp, #112	@ 0x70
 8004416:	ac1f      	add	r4, sp, #124	@ 0x7c
 8004418:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800441c:	f854 5b04 	ldr.w	r5, [r4], #4
 8004420:	f8ad 2014 	strh.w	r2, [sp, #20]
 8004424:	9002      	str	r0, [sp, #8]
 8004426:	9006      	str	r0, [sp, #24]
 8004428:	f7fb fef2 	bl	8000210 <strlen>
 800442c:	4b0b      	ldr	r3, [pc, #44]	@ (800445c <siscanf+0x4c>)
 800442e:	9003      	str	r0, [sp, #12]
 8004430:	9007      	str	r0, [sp, #28]
 8004432:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004434:	480a      	ldr	r0, [pc, #40]	@ (8004460 <siscanf+0x50>)
 8004436:	9401      	str	r4, [sp, #4]
 8004438:	2300      	movs	r3, #0
 800443a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800443c:	9314      	str	r3, [sp, #80]	@ 0x50
 800443e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004442:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004446:	462a      	mov	r2, r5
 8004448:	4623      	mov	r3, r4
 800444a:	a902      	add	r1, sp, #8
 800444c:	6800      	ldr	r0, [r0, #0]
 800444e:	f000 fa75 	bl	800493c <__ssvfiscanf_r>
 8004452:	b01c      	add	sp, #112	@ 0x70
 8004454:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004458:	b003      	add	sp, #12
 800445a:	4770      	bx	lr
 800445c:	08004465 	.word	0x08004465
 8004460:	2000000c 	.word	0x2000000c

08004464 <__seofread>:
 8004464:	2000      	movs	r0, #0
 8004466:	4770      	bx	lr

08004468 <memset>:
 8004468:	4402      	add	r2, r0
 800446a:	4603      	mov	r3, r0
 800446c:	4293      	cmp	r3, r2
 800446e:	d100      	bne.n	8004472 <memset+0xa>
 8004470:	4770      	bx	lr
 8004472:	f803 1b01 	strb.w	r1, [r3], #1
 8004476:	e7f9      	b.n	800446c <memset+0x4>

08004478 <strstr>:
 8004478:	780a      	ldrb	r2, [r1, #0]
 800447a:	b570      	push	{r4, r5, r6, lr}
 800447c:	b96a      	cbnz	r2, 800449a <strstr+0x22>
 800447e:	bd70      	pop	{r4, r5, r6, pc}
 8004480:	429a      	cmp	r2, r3
 8004482:	d109      	bne.n	8004498 <strstr+0x20>
 8004484:	460c      	mov	r4, r1
 8004486:	4605      	mov	r5, r0
 8004488:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800448c:	2b00      	cmp	r3, #0
 800448e:	d0f6      	beq.n	800447e <strstr+0x6>
 8004490:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8004494:	429e      	cmp	r6, r3
 8004496:	d0f7      	beq.n	8004488 <strstr+0x10>
 8004498:	3001      	adds	r0, #1
 800449a:	7803      	ldrb	r3, [r0, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1ef      	bne.n	8004480 <strstr+0x8>
 80044a0:	4618      	mov	r0, r3
 80044a2:	e7ec      	b.n	800447e <strstr+0x6>

080044a4 <_sbrk_r>:
 80044a4:	b538      	push	{r3, r4, r5, lr}
 80044a6:	4d06      	ldr	r5, [pc, #24]	@ (80044c0 <_sbrk_r+0x1c>)
 80044a8:	2300      	movs	r3, #0
 80044aa:	4604      	mov	r4, r0
 80044ac:	4608      	mov	r0, r1
 80044ae:	602b      	str	r3, [r5, #0]
 80044b0:	f7fc fdae 	bl	8001010 <_sbrk>
 80044b4:	1c43      	adds	r3, r0, #1
 80044b6:	d102      	bne.n	80044be <_sbrk_r+0x1a>
 80044b8:	682b      	ldr	r3, [r5, #0]
 80044ba:	b103      	cbz	r3, 80044be <_sbrk_r+0x1a>
 80044bc:	6023      	str	r3, [r4, #0]
 80044be:	bd38      	pop	{r3, r4, r5, pc}
 80044c0:	20000278 	.word	0x20000278

080044c4 <__errno>:
 80044c4:	4b01      	ldr	r3, [pc, #4]	@ (80044cc <__errno+0x8>)
 80044c6:	6818      	ldr	r0, [r3, #0]
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	2000000c 	.word	0x2000000c

080044d0 <__libc_init_array>:
 80044d0:	b570      	push	{r4, r5, r6, lr}
 80044d2:	4d0d      	ldr	r5, [pc, #52]	@ (8004508 <__libc_init_array+0x38>)
 80044d4:	4c0d      	ldr	r4, [pc, #52]	@ (800450c <__libc_init_array+0x3c>)
 80044d6:	1b64      	subs	r4, r4, r5
 80044d8:	10a4      	asrs	r4, r4, #2
 80044da:	2600      	movs	r6, #0
 80044dc:	42a6      	cmp	r6, r4
 80044de:	d109      	bne.n	80044f4 <__libc_init_array+0x24>
 80044e0:	4d0b      	ldr	r5, [pc, #44]	@ (8004510 <__libc_init_array+0x40>)
 80044e2:	4c0c      	ldr	r4, [pc, #48]	@ (8004514 <__libc_init_array+0x44>)
 80044e4:	f000 fff4 	bl	80054d0 <_init>
 80044e8:	1b64      	subs	r4, r4, r5
 80044ea:	10a4      	asrs	r4, r4, #2
 80044ec:	2600      	movs	r6, #0
 80044ee:	42a6      	cmp	r6, r4
 80044f0:	d105      	bne.n	80044fe <__libc_init_array+0x2e>
 80044f2:	bd70      	pop	{r4, r5, r6, pc}
 80044f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80044f8:	4798      	blx	r3
 80044fa:	3601      	adds	r6, #1
 80044fc:	e7ee      	b.n	80044dc <__libc_init_array+0xc>
 80044fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004502:	4798      	blx	r3
 8004504:	3601      	adds	r6, #1
 8004506:	e7f2      	b.n	80044ee <__libc_init_array+0x1e>
 8004508:	080056dc 	.word	0x080056dc
 800450c:	080056dc 	.word	0x080056dc
 8004510:	080056dc 	.word	0x080056dc
 8004514:	080056e0 	.word	0x080056e0

08004518 <__retarget_lock_acquire_recursive>:
 8004518:	4770      	bx	lr

0800451a <__retarget_lock_release_recursive>:
 800451a:	4770      	bx	lr

0800451c <memcpy>:
 800451c:	440a      	add	r2, r1
 800451e:	4291      	cmp	r1, r2
 8004520:	f100 33ff 	add.w	r3, r0, #4294967295
 8004524:	d100      	bne.n	8004528 <memcpy+0xc>
 8004526:	4770      	bx	lr
 8004528:	b510      	push	{r4, lr}
 800452a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800452e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004532:	4291      	cmp	r1, r2
 8004534:	d1f9      	bne.n	800452a <memcpy+0xe>
 8004536:	bd10      	pop	{r4, pc}

08004538 <_free_r>:
 8004538:	b538      	push	{r3, r4, r5, lr}
 800453a:	4605      	mov	r5, r0
 800453c:	2900      	cmp	r1, #0
 800453e:	d041      	beq.n	80045c4 <_free_r+0x8c>
 8004540:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004544:	1f0c      	subs	r4, r1, #4
 8004546:	2b00      	cmp	r3, #0
 8004548:	bfb8      	it	lt
 800454a:	18e4      	addlt	r4, r4, r3
 800454c:	f7ff fefe 	bl	800434c <__malloc_lock>
 8004550:	4a1d      	ldr	r2, [pc, #116]	@ (80045c8 <_free_r+0x90>)
 8004552:	6813      	ldr	r3, [r2, #0]
 8004554:	b933      	cbnz	r3, 8004564 <_free_r+0x2c>
 8004556:	6063      	str	r3, [r4, #4]
 8004558:	6014      	str	r4, [r2, #0]
 800455a:	4628      	mov	r0, r5
 800455c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004560:	f7ff befa 	b.w	8004358 <__malloc_unlock>
 8004564:	42a3      	cmp	r3, r4
 8004566:	d908      	bls.n	800457a <_free_r+0x42>
 8004568:	6820      	ldr	r0, [r4, #0]
 800456a:	1821      	adds	r1, r4, r0
 800456c:	428b      	cmp	r3, r1
 800456e:	bf01      	itttt	eq
 8004570:	6819      	ldreq	r1, [r3, #0]
 8004572:	685b      	ldreq	r3, [r3, #4]
 8004574:	1809      	addeq	r1, r1, r0
 8004576:	6021      	streq	r1, [r4, #0]
 8004578:	e7ed      	b.n	8004556 <_free_r+0x1e>
 800457a:	461a      	mov	r2, r3
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	b10b      	cbz	r3, 8004584 <_free_r+0x4c>
 8004580:	42a3      	cmp	r3, r4
 8004582:	d9fa      	bls.n	800457a <_free_r+0x42>
 8004584:	6811      	ldr	r1, [r2, #0]
 8004586:	1850      	adds	r0, r2, r1
 8004588:	42a0      	cmp	r0, r4
 800458a:	d10b      	bne.n	80045a4 <_free_r+0x6c>
 800458c:	6820      	ldr	r0, [r4, #0]
 800458e:	4401      	add	r1, r0
 8004590:	1850      	adds	r0, r2, r1
 8004592:	4283      	cmp	r3, r0
 8004594:	6011      	str	r1, [r2, #0]
 8004596:	d1e0      	bne.n	800455a <_free_r+0x22>
 8004598:	6818      	ldr	r0, [r3, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	6053      	str	r3, [r2, #4]
 800459e:	4408      	add	r0, r1
 80045a0:	6010      	str	r0, [r2, #0]
 80045a2:	e7da      	b.n	800455a <_free_r+0x22>
 80045a4:	d902      	bls.n	80045ac <_free_r+0x74>
 80045a6:	230c      	movs	r3, #12
 80045a8:	602b      	str	r3, [r5, #0]
 80045aa:	e7d6      	b.n	800455a <_free_r+0x22>
 80045ac:	6820      	ldr	r0, [r4, #0]
 80045ae:	1821      	adds	r1, r4, r0
 80045b0:	428b      	cmp	r3, r1
 80045b2:	bf04      	itt	eq
 80045b4:	6819      	ldreq	r1, [r3, #0]
 80045b6:	685b      	ldreq	r3, [r3, #4]
 80045b8:	6063      	str	r3, [r4, #4]
 80045ba:	bf04      	itt	eq
 80045bc:	1809      	addeq	r1, r1, r0
 80045be:	6021      	streq	r1, [r4, #0]
 80045c0:	6054      	str	r4, [r2, #4]
 80045c2:	e7ca      	b.n	800455a <_free_r+0x22>
 80045c4:	bd38      	pop	{r3, r4, r5, pc}
 80045c6:	bf00      	nop
 80045c8:	2000013c 	.word	0x2000013c

080045cc <_malloc_usable_size_r>:
 80045cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045d0:	1f18      	subs	r0, r3, #4
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	bfbc      	itt	lt
 80045d6:	580b      	ldrlt	r3, [r1, r0]
 80045d8:	18c0      	addlt	r0, r0, r3
 80045da:	4770      	bx	lr

080045dc <__ssputs_r>:
 80045dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045e0:	688e      	ldr	r6, [r1, #8]
 80045e2:	461f      	mov	r7, r3
 80045e4:	42be      	cmp	r6, r7
 80045e6:	680b      	ldr	r3, [r1, #0]
 80045e8:	4682      	mov	sl, r0
 80045ea:	460c      	mov	r4, r1
 80045ec:	4690      	mov	r8, r2
 80045ee:	d82d      	bhi.n	800464c <__ssputs_r+0x70>
 80045f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80045f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80045f8:	d026      	beq.n	8004648 <__ssputs_r+0x6c>
 80045fa:	6965      	ldr	r5, [r4, #20]
 80045fc:	6909      	ldr	r1, [r1, #16]
 80045fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004602:	eba3 0901 	sub.w	r9, r3, r1
 8004606:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800460a:	1c7b      	adds	r3, r7, #1
 800460c:	444b      	add	r3, r9
 800460e:	106d      	asrs	r5, r5, #1
 8004610:	429d      	cmp	r5, r3
 8004612:	bf38      	it	cc
 8004614:	461d      	movcc	r5, r3
 8004616:	0553      	lsls	r3, r2, #21
 8004618:	d527      	bpl.n	800466a <__ssputs_r+0x8e>
 800461a:	4629      	mov	r1, r5
 800461c:	f7ff fe16 	bl	800424c <_malloc_r>
 8004620:	4606      	mov	r6, r0
 8004622:	b360      	cbz	r0, 800467e <__ssputs_r+0xa2>
 8004624:	6921      	ldr	r1, [r4, #16]
 8004626:	464a      	mov	r2, r9
 8004628:	f7ff ff78 	bl	800451c <memcpy>
 800462c:	89a3      	ldrh	r3, [r4, #12]
 800462e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004632:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004636:	81a3      	strh	r3, [r4, #12]
 8004638:	6126      	str	r6, [r4, #16]
 800463a:	6165      	str	r5, [r4, #20]
 800463c:	444e      	add	r6, r9
 800463e:	eba5 0509 	sub.w	r5, r5, r9
 8004642:	6026      	str	r6, [r4, #0]
 8004644:	60a5      	str	r5, [r4, #8]
 8004646:	463e      	mov	r6, r7
 8004648:	42be      	cmp	r6, r7
 800464a:	d900      	bls.n	800464e <__ssputs_r+0x72>
 800464c:	463e      	mov	r6, r7
 800464e:	6820      	ldr	r0, [r4, #0]
 8004650:	4632      	mov	r2, r6
 8004652:	4641      	mov	r1, r8
 8004654:	f000 fe35 	bl	80052c2 <memmove>
 8004658:	68a3      	ldr	r3, [r4, #8]
 800465a:	1b9b      	subs	r3, r3, r6
 800465c:	60a3      	str	r3, [r4, #8]
 800465e:	6823      	ldr	r3, [r4, #0]
 8004660:	4433      	add	r3, r6
 8004662:	6023      	str	r3, [r4, #0]
 8004664:	2000      	movs	r0, #0
 8004666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800466a:	462a      	mov	r2, r5
 800466c:	f7ff fe82 	bl	8004374 <_realloc_r>
 8004670:	4606      	mov	r6, r0
 8004672:	2800      	cmp	r0, #0
 8004674:	d1e0      	bne.n	8004638 <__ssputs_r+0x5c>
 8004676:	6921      	ldr	r1, [r4, #16]
 8004678:	4650      	mov	r0, sl
 800467a:	f7ff ff5d 	bl	8004538 <_free_r>
 800467e:	230c      	movs	r3, #12
 8004680:	f8ca 3000 	str.w	r3, [sl]
 8004684:	89a3      	ldrh	r3, [r4, #12]
 8004686:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800468a:	81a3      	strh	r3, [r4, #12]
 800468c:	f04f 30ff 	mov.w	r0, #4294967295
 8004690:	e7e9      	b.n	8004666 <__ssputs_r+0x8a>
	...

08004694 <_svfiprintf_r>:
 8004694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004698:	4698      	mov	r8, r3
 800469a:	898b      	ldrh	r3, [r1, #12]
 800469c:	061b      	lsls	r3, r3, #24
 800469e:	b09d      	sub	sp, #116	@ 0x74
 80046a0:	4607      	mov	r7, r0
 80046a2:	460d      	mov	r5, r1
 80046a4:	4614      	mov	r4, r2
 80046a6:	d510      	bpl.n	80046ca <_svfiprintf_r+0x36>
 80046a8:	690b      	ldr	r3, [r1, #16]
 80046aa:	b973      	cbnz	r3, 80046ca <_svfiprintf_r+0x36>
 80046ac:	2140      	movs	r1, #64	@ 0x40
 80046ae:	f7ff fdcd 	bl	800424c <_malloc_r>
 80046b2:	6028      	str	r0, [r5, #0]
 80046b4:	6128      	str	r0, [r5, #16]
 80046b6:	b930      	cbnz	r0, 80046c6 <_svfiprintf_r+0x32>
 80046b8:	230c      	movs	r3, #12
 80046ba:	603b      	str	r3, [r7, #0]
 80046bc:	f04f 30ff 	mov.w	r0, #4294967295
 80046c0:	b01d      	add	sp, #116	@ 0x74
 80046c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046c6:	2340      	movs	r3, #64	@ 0x40
 80046c8:	616b      	str	r3, [r5, #20]
 80046ca:	2300      	movs	r3, #0
 80046cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80046ce:	2320      	movs	r3, #32
 80046d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80046d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80046d8:	2330      	movs	r3, #48	@ 0x30
 80046da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004878 <_svfiprintf_r+0x1e4>
 80046de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80046e2:	f04f 0901 	mov.w	r9, #1
 80046e6:	4623      	mov	r3, r4
 80046e8:	469a      	mov	sl, r3
 80046ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046ee:	b10a      	cbz	r2, 80046f4 <_svfiprintf_r+0x60>
 80046f0:	2a25      	cmp	r2, #37	@ 0x25
 80046f2:	d1f9      	bne.n	80046e8 <_svfiprintf_r+0x54>
 80046f4:	ebba 0b04 	subs.w	fp, sl, r4
 80046f8:	d00b      	beq.n	8004712 <_svfiprintf_r+0x7e>
 80046fa:	465b      	mov	r3, fp
 80046fc:	4622      	mov	r2, r4
 80046fe:	4629      	mov	r1, r5
 8004700:	4638      	mov	r0, r7
 8004702:	f7ff ff6b 	bl	80045dc <__ssputs_r>
 8004706:	3001      	adds	r0, #1
 8004708:	f000 80a7 	beq.w	800485a <_svfiprintf_r+0x1c6>
 800470c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800470e:	445a      	add	r2, fp
 8004710:	9209      	str	r2, [sp, #36]	@ 0x24
 8004712:	f89a 3000 	ldrb.w	r3, [sl]
 8004716:	2b00      	cmp	r3, #0
 8004718:	f000 809f 	beq.w	800485a <_svfiprintf_r+0x1c6>
 800471c:	2300      	movs	r3, #0
 800471e:	f04f 32ff 	mov.w	r2, #4294967295
 8004722:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004726:	f10a 0a01 	add.w	sl, sl, #1
 800472a:	9304      	str	r3, [sp, #16]
 800472c:	9307      	str	r3, [sp, #28]
 800472e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004732:	931a      	str	r3, [sp, #104]	@ 0x68
 8004734:	4654      	mov	r4, sl
 8004736:	2205      	movs	r2, #5
 8004738:	f814 1b01 	ldrb.w	r1, [r4], #1
 800473c:	484e      	ldr	r0, [pc, #312]	@ (8004878 <_svfiprintf_r+0x1e4>)
 800473e:	f7fb fd6f 	bl	8000220 <memchr>
 8004742:	9a04      	ldr	r2, [sp, #16]
 8004744:	b9d8      	cbnz	r0, 800477e <_svfiprintf_r+0xea>
 8004746:	06d0      	lsls	r0, r2, #27
 8004748:	bf44      	itt	mi
 800474a:	2320      	movmi	r3, #32
 800474c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004750:	0711      	lsls	r1, r2, #28
 8004752:	bf44      	itt	mi
 8004754:	232b      	movmi	r3, #43	@ 0x2b
 8004756:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800475a:	f89a 3000 	ldrb.w	r3, [sl]
 800475e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004760:	d015      	beq.n	800478e <_svfiprintf_r+0xfa>
 8004762:	9a07      	ldr	r2, [sp, #28]
 8004764:	4654      	mov	r4, sl
 8004766:	2000      	movs	r0, #0
 8004768:	f04f 0c0a 	mov.w	ip, #10
 800476c:	4621      	mov	r1, r4
 800476e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004772:	3b30      	subs	r3, #48	@ 0x30
 8004774:	2b09      	cmp	r3, #9
 8004776:	d94b      	bls.n	8004810 <_svfiprintf_r+0x17c>
 8004778:	b1b0      	cbz	r0, 80047a8 <_svfiprintf_r+0x114>
 800477a:	9207      	str	r2, [sp, #28]
 800477c:	e014      	b.n	80047a8 <_svfiprintf_r+0x114>
 800477e:	eba0 0308 	sub.w	r3, r0, r8
 8004782:	fa09 f303 	lsl.w	r3, r9, r3
 8004786:	4313      	orrs	r3, r2
 8004788:	9304      	str	r3, [sp, #16]
 800478a:	46a2      	mov	sl, r4
 800478c:	e7d2      	b.n	8004734 <_svfiprintf_r+0xa0>
 800478e:	9b03      	ldr	r3, [sp, #12]
 8004790:	1d19      	adds	r1, r3, #4
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	9103      	str	r1, [sp, #12]
 8004796:	2b00      	cmp	r3, #0
 8004798:	bfbb      	ittet	lt
 800479a:	425b      	neglt	r3, r3
 800479c:	f042 0202 	orrlt.w	r2, r2, #2
 80047a0:	9307      	strge	r3, [sp, #28]
 80047a2:	9307      	strlt	r3, [sp, #28]
 80047a4:	bfb8      	it	lt
 80047a6:	9204      	strlt	r2, [sp, #16]
 80047a8:	7823      	ldrb	r3, [r4, #0]
 80047aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80047ac:	d10a      	bne.n	80047c4 <_svfiprintf_r+0x130>
 80047ae:	7863      	ldrb	r3, [r4, #1]
 80047b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80047b2:	d132      	bne.n	800481a <_svfiprintf_r+0x186>
 80047b4:	9b03      	ldr	r3, [sp, #12]
 80047b6:	1d1a      	adds	r2, r3, #4
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	9203      	str	r2, [sp, #12]
 80047bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80047c0:	3402      	adds	r4, #2
 80047c2:	9305      	str	r3, [sp, #20]
 80047c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004888 <_svfiprintf_r+0x1f4>
 80047c8:	7821      	ldrb	r1, [r4, #0]
 80047ca:	2203      	movs	r2, #3
 80047cc:	4650      	mov	r0, sl
 80047ce:	f7fb fd27 	bl	8000220 <memchr>
 80047d2:	b138      	cbz	r0, 80047e4 <_svfiprintf_r+0x150>
 80047d4:	9b04      	ldr	r3, [sp, #16]
 80047d6:	eba0 000a 	sub.w	r0, r0, sl
 80047da:	2240      	movs	r2, #64	@ 0x40
 80047dc:	4082      	lsls	r2, r0
 80047de:	4313      	orrs	r3, r2
 80047e0:	3401      	adds	r4, #1
 80047e2:	9304      	str	r3, [sp, #16]
 80047e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047e8:	4824      	ldr	r0, [pc, #144]	@ (800487c <_svfiprintf_r+0x1e8>)
 80047ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80047ee:	2206      	movs	r2, #6
 80047f0:	f7fb fd16 	bl	8000220 <memchr>
 80047f4:	2800      	cmp	r0, #0
 80047f6:	d036      	beq.n	8004866 <_svfiprintf_r+0x1d2>
 80047f8:	4b21      	ldr	r3, [pc, #132]	@ (8004880 <_svfiprintf_r+0x1ec>)
 80047fa:	bb1b      	cbnz	r3, 8004844 <_svfiprintf_r+0x1b0>
 80047fc:	9b03      	ldr	r3, [sp, #12]
 80047fe:	3307      	adds	r3, #7
 8004800:	f023 0307 	bic.w	r3, r3, #7
 8004804:	3308      	adds	r3, #8
 8004806:	9303      	str	r3, [sp, #12]
 8004808:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800480a:	4433      	add	r3, r6
 800480c:	9309      	str	r3, [sp, #36]	@ 0x24
 800480e:	e76a      	b.n	80046e6 <_svfiprintf_r+0x52>
 8004810:	fb0c 3202 	mla	r2, ip, r2, r3
 8004814:	460c      	mov	r4, r1
 8004816:	2001      	movs	r0, #1
 8004818:	e7a8      	b.n	800476c <_svfiprintf_r+0xd8>
 800481a:	2300      	movs	r3, #0
 800481c:	3401      	adds	r4, #1
 800481e:	9305      	str	r3, [sp, #20]
 8004820:	4619      	mov	r1, r3
 8004822:	f04f 0c0a 	mov.w	ip, #10
 8004826:	4620      	mov	r0, r4
 8004828:	f810 2b01 	ldrb.w	r2, [r0], #1
 800482c:	3a30      	subs	r2, #48	@ 0x30
 800482e:	2a09      	cmp	r2, #9
 8004830:	d903      	bls.n	800483a <_svfiprintf_r+0x1a6>
 8004832:	2b00      	cmp	r3, #0
 8004834:	d0c6      	beq.n	80047c4 <_svfiprintf_r+0x130>
 8004836:	9105      	str	r1, [sp, #20]
 8004838:	e7c4      	b.n	80047c4 <_svfiprintf_r+0x130>
 800483a:	fb0c 2101 	mla	r1, ip, r1, r2
 800483e:	4604      	mov	r4, r0
 8004840:	2301      	movs	r3, #1
 8004842:	e7f0      	b.n	8004826 <_svfiprintf_r+0x192>
 8004844:	ab03      	add	r3, sp, #12
 8004846:	9300      	str	r3, [sp, #0]
 8004848:	462a      	mov	r2, r5
 800484a:	4b0e      	ldr	r3, [pc, #56]	@ (8004884 <_svfiprintf_r+0x1f0>)
 800484c:	a904      	add	r1, sp, #16
 800484e:	4638      	mov	r0, r7
 8004850:	f3af 8000 	nop.w
 8004854:	1c42      	adds	r2, r0, #1
 8004856:	4606      	mov	r6, r0
 8004858:	d1d6      	bne.n	8004808 <_svfiprintf_r+0x174>
 800485a:	89ab      	ldrh	r3, [r5, #12]
 800485c:	065b      	lsls	r3, r3, #25
 800485e:	f53f af2d 	bmi.w	80046bc <_svfiprintf_r+0x28>
 8004862:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004864:	e72c      	b.n	80046c0 <_svfiprintf_r+0x2c>
 8004866:	ab03      	add	r3, sp, #12
 8004868:	9300      	str	r3, [sp, #0]
 800486a:	462a      	mov	r2, r5
 800486c:	4b05      	ldr	r3, [pc, #20]	@ (8004884 <_svfiprintf_r+0x1f0>)
 800486e:	a904      	add	r1, sp, #16
 8004870:	4638      	mov	r0, r7
 8004872:	f000 fa45 	bl	8004d00 <_printf_i>
 8004876:	e7ed      	b.n	8004854 <_svfiprintf_r+0x1c0>
 8004878:	08005584 	.word	0x08005584
 800487c:	0800558e 	.word	0x0800558e
 8004880:	00000000 	.word	0x00000000
 8004884:	080045dd 	.word	0x080045dd
 8004888:	0800558a 	.word	0x0800558a

0800488c <_sungetc_r>:
 800488c:	b538      	push	{r3, r4, r5, lr}
 800488e:	1c4b      	adds	r3, r1, #1
 8004890:	4614      	mov	r4, r2
 8004892:	d103      	bne.n	800489c <_sungetc_r+0x10>
 8004894:	f04f 35ff 	mov.w	r5, #4294967295
 8004898:	4628      	mov	r0, r5
 800489a:	bd38      	pop	{r3, r4, r5, pc}
 800489c:	8993      	ldrh	r3, [r2, #12]
 800489e:	f023 0320 	bic.w	r3, r3, #32
 80048a2:	8193      	strh	r3, [r2, #12]
 80048a4:	6853      	ldr	r3, [r2, #4]
 80048a6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80048a8:	b2cd      	uxtb	r5, r1
 80048aa:	b18a      	cbz	r2, 80048d0 <_sungetc_r+0x44>
 80048ac:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80048ae:	429a      	cmp	r2, r3
 80048b0:	dd08      	ble.n	80048c4 <_sungetc_r+0x38>
 80048b2:	6823      	ldr	r3, [r4, #0]
 80048b4:	1e5a      	subs	r2, r3, #1
 80048b6:	6022      	str	r2, [r4, #0]
 80048b8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80048bc:	6863      	ldr	r3, [r4, #4]
 80048be:	3301      	adds	r3, #1
 80048c0:	6063      	str	r3, [r4, #4]
 80048c2:	e7e9      	b.n	8004898 <_sungetc_r+0xc>
 80048c4:	4621      	mov	r1, r4
 80048c6:	f000 fcc2 	bl	800524e <__submore>
 80048ca:	2800      	cmp	r0, #0
 80048cc:	d0f1      	beq.n	80048b2 <_sungetc_r+0x26>
 80048ce:	e7e1      	b.n	8004894 <_sungetc_r+0x8>
 80048d0:	6921      	ldr	r1, [r4, #16]
 80048d2:	6822      	ldr	r2, [r4, #0]
 80048d4:	b141      	cbz	r1, 80048e8 <_sungetc_r+0x5c>
 80048d6:	4291      	cmp	r1, r2
 80048d8:	d206      	bcs.n	80048e8 <_sungetc_r+0x5c>
 80048da:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80048de:	42a9      	cmp	r1, r5
 80048e0:	d102      	bne.n	80048e8 <_sungetc_r+0x5c>
 80048e2:	3a01      	subs	r2, #1
 80048e4:	6022      	str	r2, [r4, #0]
 80048e6:	e7ea      	b.n	80048be <_sungetc_r+0x32>
 80048e8:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80048ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80048f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80048f2:	2303      	movs	r3, #3
 80048f4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80048f6:	4623      	mov	r3, r4
 80048f8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80048fc:	6023      	str	r3, [r4, #0]
 80048fe:	2301      	movs	r3, #1
 8004900:	e7de      	b.n	80048c0 <_sungetc_r+0x34>

08004902 <__ssrefill_r>:
 8004902:	b510      	push	{r4, lr}
 8004904:	460c      	mov	r4, r1
 8004906:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8004908:	b169      	cbz	r1, 8004926 <__ssrefill_r+0x24>
 800490a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800490e:	4299      	cmp	r1, r3
 8004910:	d001      	beq.n	8004916 <__ssrefill_r+0x14>
 8004912:	f7ff fe11 	bl	8004538 <_free_r>
 8004916:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004918:	6063      	str	r3, [r4, #4]
 800491a:	2000      	movs	r0, #0
 800491c:	6360      	str	r0, [r4, #52]	@ 0x34
 800491e:	b113      	cbz	r3, 8004926 <__ssrefill_r+0x24>
 8004920:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004922:	6023      	str	r3, [r4, #0]
 8004924:	bd10      	pop	{r4, pc}
 8004926:	6923      	ldr	r3, [r4, #16]
 8004928:	6023      	str	r3, [r4, #0]
 800492a:	2300      	movs	r3, #0
 800492c:	6063      	str	r3, [r4, #4]
 800492e:	89a3      	ldrh	r3, [r4, #12]
 8004930:	f043 0320 	orr.w	r3, r3, #32
 8004934:	81a3      	strh	r3, [r4, #12]
 8004936:	f04f 30ff 	mov.w	r0, #4294967295
 800493a:	e7f3      	b.n	8004924 <__ssrefill_r+0x22>

0800493c <__ssvfiscanf_r>:
 800493c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004940:	460c      	mov	r4, r1
 8004942:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8004946:	2100      	movs	r1, #0
 8004948:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800494c:	49a5      	ldr	r1, [pc, #660]	@ (8004be4 <__ssvfiscanf_r+0x2a8>)
 800494e:	91a0      	str	r1, [sp, #640]	@ 0x280
 8004950:	f10d 0804 	add.w	r8, sp, #4
 8004954:	49a4      	ldr	r1, [pc, #656]	@ (8004be8 <__ssvfiscanf_r+0x2ac>)
 8004956:	4fa5      	ldr	r7, [pc, #660]	@ (8004bec <__ssvfiscanf_r+0x2b0>)
 8004958:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800495c:	4606      	mov	r6, r0
 800495e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8004960:	9300      	str	r3, [sp, #0]
 8004962:	7813      	ldrb	r3, [r2, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	f000 8158 	beq.w	8004c1a <__ssvfiscanf_r+0x2de>
 800496a:	5cf9      	ldrb	r1, [r7, r3]
 800496c:	f011 0108 	ands.w	r1, r1, #8
 8004970:	f102 0501 	add.w	r5, r2, #1
 8004974:	d019      	beq.n	80049aa <__ssvfiscanf_r+0x6e>
 8004976:	6863      	ldr	r3, [r4, #4]
 8004978:	2b00      	cmp	r3, #0
 800497a:	dd0f      	ble.n	800499c <__ssvfiscanf_r+0x60>
 800497c:	6823      	ldr	r3, [r4, #0]
 800497e:	781a      	ldrb	r2, [r3, #0]
 8004980:	5cba      	ldrb	r2, [r7, r2]
 8004982:	0712      	lsls	r2, r2, #28
 8004984:	d401      	bmi.n	800498a <__ssvfiscanf_r+0x4e>
 8004986:	462a      	mov	r2, r5
 8004988:	e7eb      	b.n	8004962 <__ssvfiscanf_r+0x26>
 800498a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800498c:	3201      	adds	r2, #1
 800498e:	9245      	str	r2, [sp, #276]	@ 0x114
 8004990:	6862      	ldr	r2, [r4, #4]
 8004992:	3301      	adds	r3, #1
 8004994:	3a01      	subs	r2, #1
 8004996:	6062      	str	r2, [r4, #4]
 8004998:	6023      	str	r3, [r4, #0]
 800499a:	e7ec      	b.n	8004976 <__ssvfiscanf_r+0x3a>
 800499c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800499e:	4621      	mov	r1, r4
 80049a0:	4630      	mov	r0, r6
 80049a2:	4798      	blx	r3
 80049a4:	2800      	cmp	r0, #0
 80049a6:	d0e9      	beq.n	800497c <__ssvfiscanf_r+0x40>
 80049a8:	e7ed      	b.n	8004986 <__ssvfiscanf_r+0x4a>
 80049aa:	2b25      	cmp	r3, #37	@ 0x25
 80049ac:	d012      	beq.n	80049d4 <__ssvfiscanf_r+0x98>
 80049ae:	4699      	mov	r9, r3
 80049b0:	6863      	ldr	r3, [r4, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	f340 8093 	ble.w	8004ade <__ssvfiscanf_r+0x1a2>
 80049b8:	6822      	ldr	r2, [r4, #0]
 80049ba:	7813      	ldrb	r3, [r2, #0]
 80049bc:	454b      	cmp	r3, r9
 80049be:	f040 812c 	bne.w	8004c1a <__ssvfiscanf_r+0x2de>
 80049c2:	6863      	ldr	r3, [r4, #4]
 80049c4:	3b01      	subs	r3, #1
 80049c6:	6063      	str	r3, [r4, #4]
 80049c8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80049ca:	3201      	adds	r2, #1
 80049cc:	3301      	adds	r3, #1
 80049ce:	6022      	str	r2, [r4, #0]
 80049d0:	9345      	str	r3, [sp, #276]	@ 0x114
 80049d2:	e7d8      	b.n	8004986 <__ssvfiscanf_r+0x4a>
 80049d4:	9141      	str	r1, [sp, #260]	@ 0x104
 80049d6:	9143      	str	r1, [sp, #268]	@ 0x10c
 80049d8:	7853      	ldrb	r3, [r2, #1]
 80049da:	2b2a      	cmp	r3, #42	@ 0x2a
 80049dc:	bf02      	ittt	eq
 80049de:	2310      	moveq	r3, #16
 80049e0:	1c95      	addeq	r5, r2, #2
 80049e2:	9341      	streq	r3, [sp, #260]	@ 0x104
 80049e4:	220a      	movs	r2, #10
 80049e6:	46a9      	mov	r9, r5
 80049e8:	f819 1b01 	ldrb.w	r1, [r9], #1
 80049ec:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80049f0:	2b09      	cmp	r3, #9
 80049f2:	d91e      	bls.n	8004a32 <__ssvfiscanf_r+0xf6>
 80049f4:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8004bf0 <__ssvfiscanf_r+0x2b4>
 80049f8:	2203      	movs	r2, #3
 80049fa:	4650      	mov	r0, sl
 80049fc:	f7fb fc10 	bl	8000220 <memchr>
 8004a00:	b138      	cbz	r0, 8004a12 <__ssvfiscanf_r+0xd6>
 8004a02:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004a04:	eba0 000a 	sub.w	r0, r0, sl
 8004a08:	2301      	movs	r3, #1
 8004a0a:	4083      	lsls	r3, r0
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	9341      	str	r3, [sp, #260]	@ 0x104
 8004a10:	464d      	mov	r5, r9
 8004a12:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004a16:	2b78      	cmp	r3, #120	@ 0x78
 8004a18:	d806      	bhi.n	8004a28 <__ssvfiscanf_r+0xec>
 8004a1a:	2b57      	cmp	r3, #87	@ 0x57
 8004a1c:	d810      	bhi.n	8004a40 <__ssvfiscanf_r+0x104>
 8004a1e:	2b25      	cmp	r3, #37	@ 0x25
 8004a20:	d0c5      	beq.n	80049ae <__ssvfiscanf_r+0x72>
 8004a22:	d857      	bhi.n	8004ad4 <__ssvfiscanf_r+0x198>
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d065      	beq.n	8004af4 <__ssvfiscanf_r+0x1b8>
 8004a28:	2303      	movs	r3, #3
 8004a2a:	9347      	str	r3, [sp, #284]	@ 0x11c
 8004a2c:	230a      	movs	r3, #10
 8004a2e:	9342      	str	r3, [sp, #264]	@ 0x108
 8004a30:	e078      	b.n	8004b24 <__ssvfiscanf_r+0x1e8>
 8004a32:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8004a34:	fb02 1103 	mla	r1, r2, r3, r1
 8004a38:	3930      	subs	r1, #48	@ 0x30
 8004a3a:	9143      	str	r1, [sp, #268]	@ 0x10c
 8004a3c:	464d      	mov	r5, r9
 8004a3e:	e7d2      	b.n	80049e6 <__ssvfiscanf_r+0xaa>
 8004a40:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8004a44:	2a20      	cmp	r2, #32
 8004a46:	d8ef      	bhi.n	8004a28 <__ssvfiscanf_r+0xec>
 8004a48:	a101      	add	r1, pc, #4	@ (adr r1, 8004a50 <__ssvfiscanf_r+0x114>)
 8004a4a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004a4e:	bf00      	nop
 8004a50:	08004b03 	.word	0x08004b03
 8004a54:	08004a29 	.word	0x08004a29
 8004a58:	08004a29 	.word	0x08004a29
 8004a5c:	08004b5d 	.word	0x08004b5d
 8004a60:	08004a29 	.word	0x08004a29
 8004a64:	08004a29 	.word	0x08004a29
 8004a68:	08004a29 	.word	0x08004a29
 8004a6c:	08004a29 	.word	0x08004a29
 8004a70:	08004a29 	.word	0x08004a29
 8004a74:	08004a29 	.word	0x08004a29
 8004a78:	08004a29 	.word	0x08004a29
 8004a7c:	08004b73 	.word	0x08004b73
 8004a80:	08004b59 	.word	0x08004b59
 8004a84:	08004adb 	.word	0x08004adb
 8004a88:	08004adb 	.word	0x08004adb
 8004a8c:	08004adb 	.word	0x08004adb
 8004a90:	08004a29 	.word	0x08004a29
 8004a94:	08004b15 	.word	0x08004b15
 8004a98:	08004a29 	.word	0x08004a29
 8004a9c:	08004a29 	.word	0x08004a29
 8004aa0:	08004a29 	.word	0x08004a29
 8004aa4:	08004a29 	.word	0x08004a29
 8004aa8:	08004b83 	.word	0x08004b83
 8004aac:	08004b1d 	.word	0x08004b1d
 8004ab0:	08004afb 	.word	0x08004afb
 8004ab4:	08004a29 	.word	0x08004a29
 8004ab8:	08004a29 	.word	0x08004a29
 8004abc:	08004b7f 	.word	0x08004b7f
 8004ac0:	08004a29 	.word	0x08004a29
 8004ac4:	08004b59 	.word	0x08004b59
 8004ac8:	08004a29 	.word	0x08004a29
 8004acc:	08004a29 	.word	0x08004a29
 8004ad0:	08004b03 	.word	0x08004b03
 8004ad4:	3b45      	subs	r3, #69	@ 0x45
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d8a6      	bhi.n	8004a28 <__ssvfiscanf_r+0xec>
 8004ada:	2305      	movs	r3, #5
 8004adc:	e021      	b.n	8004b22 <__ssvfiscanf_r+0x1e6>
 8004ade:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004ae0:	4621      	mov	r1, r4
 8004ae2:	4630      	mov	r0, r6
 8004ae4:	4798      	blx	r3
 8004ae6:	2800      	cmp	r0, #0
 8004ae8:	f43f af66 	beq.w	80049b8 <__ssvfiscanf_r+0x7c>
 8004aec:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8004aee:	2800      	cmp	r0, #0
 8004af0:	f040 808b 	bne.w	8004c0a <__ssvfiscanf_r+0x2ce>
 8004af4:	f04f 30ff 	mov.w	r0, #4294967295
 8004af8:	e08b      	b.n	8004c12 <__ssvfiscanf_r+0x2d6>
 8004afa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004afc:	f042 0220 	orr.w	r2, r2, #32
 8004b00:	9241      	str	r2, [sp, #260]	@ 0x104
 8004b02:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004b04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b08:	9241      	str	r2, [sp, #260]	@ 0x104
 8004b0a:	2210      	movs	r2, #16
 8004b0c:	2b6e      	cmp	r3, #110	@ 0x6e
 8004b0e:	9242      	str	r2, [sp, #264]	@ 0x108
 8004b10:	d902      	bls.n	8004b18 <__ssvfiscanf_r+0x1dc>
 8004b12:	e005      	b.n	8004b20 <__ssvfiscanf_r+0x1e4>
 8004b14:	2300      	movs	r3, #0
 8004b16:	9342      	str	r3, [sp, #264]	@ 0x108
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e002      	b.n	8004b22 <__ssvfiscanf_r+0x1e6>
 8004b1c:	2308      	movs	r3, #8
 8004b1e:	9342      	str	r3, [sp, #264]	@ 0x108
 8004b20:	2304      	movs	r3, #4
 8004b22:	9347      	str	r3, [sp, #284]	@ 0x11c
 8004b24:	6863      	ldr	r3, [r4, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	dd39      	ble.n	8004b9e <__ssvfiscanf_r+0x262>
 8004b2a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8004b2c:	0659      	lsls	r1, r3, #25
 8004b2e:	d404      	bmi.n	8004b3a <__ssvfiscanf_r+0x1fe>
 8004b30:	6823      	ldr	r3, [r4, #0]
 8004b32:	781a      	ldrb	r2, [r3, #0]
 8004b34:	5cba      	ldrb	r2, [r7, r2]
 8004b36:	0712      	lsls	r2, r2, #28
 8004b38:	d438      	bmi.n	8004bac <__ssvfiscanf_r+0x270>
 8004b3a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	dc47      	bgt.n	8004bd0 <__ssvfiscanf_r+0x294>
 8004b40:	466b      	mov	r3, sp
 8004b42:	4622      	mov	r2, r4
 8004b44:	a941      	add	r1, sp, #260	@ 0x104
 8004b46:	4630      	mov	r0, r6
 8004b48:	f000 f9fa 	bl	8004f40 <_scanf_chars>
 8004b4c:	2801      	cmp	r0, #1
 8004b4e:	d064      	beq.n	8004c1a <__ssvfiscanf_r+0x2de>
 8004b50:	2802      	cmp	r0, #2
 8004b52:	f47f af18 	bne.w	8004986 <__ssvfiscanf_r+0x4a>
 8004b56:	e7c9      	b.n	8004aec <__ssvfiscanf_r+0x1b0>
 8004b58:	220a      	movs	r2, #10
 8004b5a:	e7d7      	b.n	8004b0c <__ssvfiscanf_r+0x1d0>
 8004b5c:	4629      	mov	r1, r5
 8004b5e:	4640      	mov	r0, r8
 8004b60:	f000 fb3c 	bl	80051dc <__sccl>
 8004b64:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8004b66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b6a:	9341      	str	r3, [sp, #260]	@ 0x104
 8004b6c:	4605      	mov	r5, r0
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e7d7      	b.n	8004b22 <__ssvfiscanf_r+0x1e6>
 8004b72:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8004b74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b78:	9341      	str	r3, [sp, #260]	@ 0x104
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	e7d1      	b.n	8004b22 <__ssvfiscanf_r+0x1e6>
 8004b7e:	2302      	movs	r3, #2
 8004b80:	e7cf      	b.n	8004b22 <__ssvfiscanf_r+0x1e6>
 8004b82:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8004b84:	06c3      	lsls	r3, r0, #27
 8004b86:	f53f aefe 	bmi.w	8004986 <__ssvfiscanf_r+0x4a>
 8004b8a:	9b00      	ldr	r3, [sp, #0]
 8004b8c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8004b8e:	1d19      	adds	r1, r3, #4
 8004b90:	9100      	str	r1, [sp, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	07c0      	lsls	r0, r0, #31
 8004b96:	bf4c      	ite	mi
 8004b98:	801a      	strhmi	r2, [r3, #0]
 8004b9a:	601a      	strpl	r2, [r3, #0]
 8004b9c:	e6f3      	b.n	8004986 <__ssvfiscanf_r+0x4a>
 8004b9e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004ba0:	4621      	mov	r1, r4
 8004ba2:	4630      	mov	r0, r6
 8004ba4:	4798      	blx	r3
 8004ba6:	2800      	cmp	r0, #0
 8004ba8:	d0bf      	beq.n	8004b2a <__ssvfiscanf_r+0x1ee>
 8004baa:	e79f      	b.n	8004aec <__ssvfiscanf_r+0x1b0>
 8004bac:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8004bae:	3201      	adds	r2, #1
 8004bb0:	9245      	str	r2, [sp, #276]	@ 0x114
 8004bb2:	6862      	ldr	r2, [r4, #4]
 8004bb4:	3a01      	subs	r2, #1
 8004bb6:	2a00      	cmp	r2, #0
 8004bb8:	6062      	str	r2, [r4, #4]
 8004bba:	dd02      	ble.n	8004bc2 <__ssvfiscanf_r+0x286>
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	6023      	str	r3, [r4, #0]
 8004bc0:	e7b6      	b.n	8004b30 <__ssvfiscanf_r+0x1f4>
 8004bc2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004bc4:	4621      	mov	r1, r4
 8004bc6:	4630      	mov	r0, r6
 8004bc8:	4798      	blx	r3
 8004bca:	2800      	cmp	r0, #0
 8004bcc:	d0b0      	beq.n	8004b30 <__ssvfiscanf_r+0x1f4>
 8004bce:	e78d      	b.n	8004aec <__ssvfiscanf_r+0x1b0>
 8004bd0:	2b04      	cmp	r3, #4
 8004bd2:	dc0f      	bgt.n	8004bf4 <__ssvfiscanf_r+0x2b8>
 8004bd4:	466b      	mov	r3, sp
 8004bd6:	4622      	mov	r2, r4
 8004bd8:	a941      	add	r1, sp, #260	@ 0x104
 8004bda:	4630      	mov	r0, r6
 8004bdc:	f000 fa0a 	bl	8004ff4 <_scanf_i>
 8004be0:	e7b4      	b.n	8004b4c <__ssvfiscanf_r+0x210>
 8004be2:	bf00      	nop
 8004be4:	0800488d 	.word	0x0800488d
 8004be8:	08004903 	.word	0x08004903
 8004bec:	080055d3 	.word	0x080055d3
 8004bf0:	0800558a 	.word	0x0800558a
 8004bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8004c20 <__ssvfiscanf_r+0x2e4>)
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f43f aec5 	beq.w	8004986 <__ssvfiscanf_r+0x4a>
 8004bfc:	466b      	mov	r3, sp
 8004bfe:	4622      	mov	r2, r4
 8004c00:	a941      	add	r1, sp, #260	@ 0x104
 8004c02:	4630      	mov	r0, r6
 8004c04:	f3af 8000 	nop.w
 8004c08:	e7a0      	b.n	8004b4c <__ssvfiscanf_r+0x210>
 8004c0a:	89a3      	ldrh	r3, [r4, #12]
 8004c0c:	065b      	lsls	r3, r3, #25
 8004c0e:	f53f af71 	bmi.w	8004af4 <__ssvfiscanf_r+0x1b8>
 8004c12:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8004c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c1a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8004c1c:	e7f9      	b.n	8004c12 <__ssvfiscanf_r+0x2d6>
 8004c1e:	bf00      	nop
 8004c20:	00000000 	.word	0x00000000

08004c24 <_printf_common>:
 8004c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c28:	4616      	mov	r6, r2
 8004c2a:	4698      	mov	r8, r3
 8004c2c:	688a      	ldr	r2, [r1, #8]
 8004c2e:	690b      	ldr	r3, [r1, #16]
 8004c30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004c34:	4293      	cmp	r3, r2
 8004c36:	bfb8      	it	lt
 8004c38:	4613      	movlt	r3, r2
 8004c3a:	6033      	str	r3, [r6, #0]
 8004c3c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004c40:	4607      	mov	r7, r0
 8004c42:	460c      	mov	r4, r1
 8004c44:	b10a      	cbz	r2, 8004c4a <_printf_common+0x26>
 8004c46:	3301      	adds	r3, #1
 8004c48:	6033      	str	r3, [r6, #0]
 8004c4a:	6823      	ldr	r3, [r4, #0]
 8004c4c:	0699      	lsls	r1, r3, #26
 8004c4e:	bf42      	ittt	mi
 8004c50:	6833      	ldrmi	r3, [r6, #0]
 8004c52:	3302      	addmi	r3, #2
 8004c54:	6033      	strmi	r3, [r6, #0]
 8004c56:	6825      	ldr	r5, [r4, #0]
 8004c58:	f015 0506 	ands.w	r5, r5, #6
 8004c5c:	d106      	bne.n	8004c6c <_printf_common+0x48>
 8004c5e:	f104 0a19 	add.w	sl, r4, #25
 8004c62:	68e3      	ldr	r3, [r4, #12]
 8004c64:	6832      	ldr	r2, [r6, #0]
 8004c66:	1a9b      	subs	r3, r3, r2
 8004c68:	42ab      	cmp	r3, r5
 8004c6a:	dc26      	bgt.n	8004cba <_printf_common+0x96>
 8004c6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004c70:	6822      	ldr	r2, [r4, #0]
 8004c72:	3b00      	subs	r3, #0
 8004c74:	bf18      	it	ne
 8004c76:	2301      	movne	r3, #1
 8004c78:	0692      	lsls	r2, r2, #26
 8004c7a:	d42b      	bmi.n	8004cd4 <_printf_common+0xb0>
 8004c7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004c80:	4641      	mov	r1, r8
 8004c82:	4638      	mov	r0, r7
 8004c84:	47c8      	blx	r9
 8004c86:	3001      	adds	r0, #1
 8004c88:	d01e      	beq.n	8004cc8 <_printf_common+0xa4>
 8004c8a:	6823      	ldr	r3, [r4, #0]
 8004c8c:	6922      	ldr	r2, [r4, #16]
 8004c8e:	f003 0306 	and.w	r3, r3, #6
 8004c92:	2b04      	cmp	r3, #4
 8004c94:	bf02      	ittt	eq
 8004c96:	68e5      	ldreq	r5, [r4, #12]
 8004c98:	6833      	ldreq	r3, [r6, #0]
 8004c9a:	1aed      	subeq	r5, r5, r3
 8004c9c:	68a3      	ldr	r3, [r4, #8]
 8004c9e:	bf0c      	ite	eq
 8004ca0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ca4:	2500      	movne	r5, #0
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	bfc4      	itt	gt
 8004caa:	1a9b      	subgt	r3, r3, r2
 8004cac:	18ed      	addgt	r5, r5, r3
 8004cae:	2600      	movs	r6, #0
 8004cb0:	341a      	adds	r4, #26
 8004cb2:	42b5      	cmp	r5, r6
 8004cb4:	d11a      	bne.n	8004cec <_printf_common+0xc8>
 8004cb6:	2000      	movs	r0, #0
 8004cb8:	e008      	b.n	8004ccc <_printf_common+0xa8>
 8004cba:	2301      	movs	r3, #1
 8004cbc:	4652      	mov	r2, sl
 8004cbe:	4641      	mov	r1, r8
 8004cc0:	4638      	mov	r0, r7
 8004cc2:	47c8      	blx	r9
 8004cc4:	3001      	adds	r0, #1
 8004cc6:	d103      	bne.n	8004cd0 <_printf_common+0xac>
 8004cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cd0:	3501      	adds	r5, #1
 8004cd2:	e7c6      	b.n	8004c62 <_printf_common+0x3e>
 8004cd4:	18e1      	adds	r1, r4, r3
 8004cd6:	1c5a      	adds	r2, r3, #1
 8004cd8:	2030      	movs	r0, #48	@ 0x30
 8004cda:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004cde:	4422      	add	r2, r4
 8004ce0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004ce4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004ce8:	3302      	adds	r3, #2
 8004cea:	e7c7      	b.n	8004c7c <_printf_common+0x58>
 8004cec:	2301      	movs	r3, #1
 8004cee:	4622      	mov	r2, r4
 8004cf0:	4641      	mov	r1, r8
 8004cf2:	4638      	mov	r0, r7
 8004cf4:	47c8      	blx	r9
 8004cf6:	3001      	adds	r0, #1
 8004cf8:	d0e6      	beq.n	8004cc8 <_printf_common+0xa4>
 8004cfa:	3601      	adds	r6, #1
 8004cfc:	e7d9      	b.n	8004cb2 <_printf_common+0x8e>
	...

08004d00 <_printf_i>:
 8004d00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d04:	7e0f      	ldrb	r7, [r1, #24]
 8004d06:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004d08:	2f78      	cmp	r7, #120	@ 0x78
 8004d0a:	4691      	mov	r9, r2
 8004d0c:	4680      	mov	r8, r0
 8004d0e:	460c      	mov	r4, r1
 8004d10:	469a      	mov	sl, r3
 8004d12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004d16:	d807      	bhi.n	8004d28 <_printf_i+0x28>
 8004d18:	2f62      	cmp	r7, #98	@ 0x62
 8004d1a:	d80a      	bhi.n	8004d32 <_printf_i+0x32>
 8004d1c:	2f00      	cmp	r7, #0
 8004d1e:	f000 80d2 	beq.w	8004ec6 <_printf_i+0x1c6>
 8004d22:	2f58      	cmp	r7, #88	@ 0x58
 8004d24:	f000 80b9 	beq.w	8004e9a <_printf_i+0x19a>
 8004d28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004d30:	e03a      	b.n	8004da8 <_printf_i+0xa8>
 8004d32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004d36:	2b15      	cmp	r3, #21
 8004d38:	d8f6      	bhi.n	8004d28 <_printf_i+0x28>
 8004d3a:	a101      	add	r1, pc, #4	@ (adr r1, 8004d40 <_printf_i+0x40>)
 8004d3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d40:	08004d99 	.word	0x08004d99
 8004d44:	08004dad 	.word	0x08004dad
 8004d48:	08004d29 	.word	0x08004d29
 8004d4c:	08004d29 	.word	0x08004d29
 8004d50:	08004d29 	.word	0x08004d29
 8004d54:	08004d29 	.word	0x08004d29
 8004d58:	08004dad 	.word	0x08004dad
 8004d5c:	08004d29 	.word	0x08004d29
 8004d60:	08004d29 	.word	0x08004d29
 8004d64:	08004d29 	.word	0x08004d29
 8004d68:	08004d29 	.word	0x08004d29
 8004d6c:	08004ead 	.word	0x08004ead
 8004d70:	08004dd7 	.word	0x08004dd7
 8004d74:	08004e67 	.word	0x08004e67
 8004d78:	08004d29 	.word	0x08004d29
 8004d7c:	08004d29 	.word	0x08004d29
 8004d80:	08004ecf 	.word	0x08004ecf
 8004d84:	08004d29 	.word	0x08004d29
 8004d88:	08004dd7 	.word	0x08004dd7
 8004d8c:	08004d29 	.word	0x08004d29
 8004d90:	08004d29 	.word	0x08004d29
 8004d94:	08004e6f 	.word	0x08004e6f
 8004d98:	6833      	ldr	r3, [r6, #0]
 8004d9a:	1d1a      	adds	r2, r3, #4
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	6032      	str	r2, [r6, #0]
 8004da0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004da4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004da8:	2301      	movs	r3, #1
 8004daa:	e09d      	b.n	8004ee8 <_printf_i+0x1e8>
 8004dac:	6833      	ldr	r3, [r6, #0]
 8004dae:	6820      	ldr	r0, [r4, #0]
 8004db0:	1d19      	adds	r1, r3, #4
 8004db2:	6031      	str	r1, [r6, #0]
 8004db4:	0606      	lsls	r6, r0, #24
 8004db6:	d501      	bpl.n	8004dbc <_printf_i+0xbc>
 8004db8:	681d      	ldr	r5, [r3, #0]
 8004dba:	e003      	b.n	8004dc4 <_printf_i+0xc4>
 8004dbc:	0645      	lsls	r5, r0, #25
 8004dbe:	d5fb      	bpl.n	8004db8 <_printf_i+0xb8>
 8004dc0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004dc4:	2d00      	cmp	r5, #0
 8004dc6:	da03      	bge.n	8004dd0 <_printf_i+0xd0>
 8004dc8:	232d      	movs	r3, #45	@ 0x2d
 8004dca:	426d      	negs	r5, r5
 8004dcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004dd0:	4859      	ldr	r0, [pc, #356]	@ (8004f38 <_printf_i+0x238>)
 8004dd2:	230a      	movs	r3, #10
 8004dd4:	e011      	b.n	8004dfa <_printf_i+0xfa>
 8004dd6:	6821      	ldr	r1, [r4, #0]
 8004dd8:	6833      	ldr	r3, [r6, #0]
 8004dda:	0608      	lsls	r0, r1, #24
 8004ddc:	f853 5b04 	ldr.w	r5, [r3], #4
 8004de0:	d402      	bmi.n	8004de8 <_printf_i+0xe8>
 8004de2:	0649      	lsls	r1, r1, #25
 8004de4:	bf48      	it	mi
 8004de6:	b2ad      	uxthmi	r5, r5
 8004de8:	2f6f      	cmp	r7, #111	@ 0x6f
 8004dea:	4853      	ldr	r0, [pc, #332]	@ (8004f38 <_printf_i+0x238>)
 8004dec:	6033      	str	r3, [r6, #0]
 8004dee:	bf14      	ite	ne
 8004df0:	230a      	movne	r3, #10
 8004df2:	2308      	moveq	r3, #8
 8004df4:	2100      	movs	r1, #0
 8004df6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004dfa:	6866      	ldr	r6, [r4, #4]
 8004dfc:	60a6      	str	r6, [r4, #8]
 8004dfe:	2e00      	cmp	r6, #0
 8004e00:	bfa2      	ittt	ge
 8004e02:	6821      	ldrge	r1, [r4, #0]
 8004e04:	f021 0104 	bicge.w	r1, r1, #4
 8004e08:	6021      	strge	r1, [r4, #0]
 8004e0a:	b90d      	cbnz	r5, 8004e10 <_printf_i+0x110>
 8004e0c:	2e00      	cmp	r6, #0
 8004e0e:	d04b      	beq.n	8004ea8 <_printf_i+0x1a8>
 8004e10:	4616      	mov	r6, r2
 8004e12:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e16:	fb03 5711 	mls	r7, r3, r1, r5
 8004e1a:	5dc7      	ldrb	r7, [r0, r7]
 8004e1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e20:	462f      	mov	r7, r5
 8004e22:	42bb      	cmp	r3, r7
 8004e24:	460d      	mov	r5, r1
 8004e26:	d9f4      	bls.n	8004e12 <_printf_i+0x112>
 8004e28:	2b08      	cmp	r3, #8
 8004e2a:	d10b      	bne.n	8004e44 <_printf_i+0x144>
 8004e2c:	6823      	ldr	r3, [r4, #0]
 8004e2e:	07df      	lsls	r7, r3, #31
 8004e30:	d508      	bpl.n	8004e44 <_printf_i+0x144>
 8004e32:	6923      	ldr	r3, [r4, #16]
 8004e34:	6861      	ldr	r1, [r4, #4]
 8004e36:	4299      	cmp	r1, r3
 8004e38:	bfde      	ittt	le
 8004e3a:	2330      	movle	r3, #48	@ 0x30
 8004e3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e40:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004e44:	1b92      	subs	r2, r2, r6
 8004e46:	6122      	str	r2, [r4, #16]
 8004e48:	f8cd a000 	str.w	sl, [sp]
 8004e4c:	464b      	mov	r3, r9
 8004e4e:	aa03      	add	r2, sp, #12
 8004e50:	4621      	mov	r1, r4
 8004e52:	4640      	mov	r0, r8
 8004e54:	f7ff fee6 	bl	8004c24 <_printf_common>
 8004e58:	3001      	adds	r0, #1
 8004e5a:	d14a      	bne.n	8004ef2 <_printf_i+0x1f2>
 8004e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e60:	b004      	add	sp, #16
 8004e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e66:	6823      	ldr	r3, [r4, #0]
 8004e68:	f043 0320 	orr.w	r3, r3, #32
 8004e6c:	6023      	str	r3, [r4, #0]
 8004e6e:	4833      	ldr	r0, [pc, #204]	@ (8004f3c <_printf_i+0x23c>)
 8004e70:	2778      	movs	r7, #120	@ 0x78
 8004e72:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004e76:	6823      	ldr	r3, [r4, #0]
 8004e78:	6831      	ldr	r1, [r6, #0]
 8004e7a:	061f      	lsls	r7, r3, #24
 8004e7c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004e80:	d402      	bmi.n	8004e88 <_printf_i+0x188>
 8004e82:	065f      	lsls	r7, r3, #25
 8004e84:	bf48      	it	mi
 8004e86:	b2ad      	uxthmi	r5, r5
 8004e88:	6031      	str	r1, [r6, #0]
 8004e8a:	07d9      	lsls	r1, r3, #31
 8004e8c:	bf44      	itt	mi
 8004e8e:	f043 0320 	orrmi.w	r3, r3, #32
 8004e92:	6023      	strmi	r3, [r4, #0]
 8004e94:	b11d      	cbz	r5, 8004e9e <_printf_i+0x19e>
 8004e96:	2310      	movs	r3, #16
 8004e98:	e7ac      	b.n	8004df4 <_printf_i+0xf4>
 8004e9a:	4827      	ldr	r0, [pc, #156]	@ (8004f38 <_printf_i+0x238>)
 8004e9c:	e7e9      	b.n	8004e72 <_printf_i+0x172>
 8004e9e:	6823      	ldr	r3, [r4, #0]
 8004ea0:	f023 0320 	bic.w	r3, r3, #32
 8004ea4:	6023      	str	r3, [r4, #0]
 8004ea6:	e7f6      	b.n	8004e96 <_printf_i+0x196>
 8004ea8:	4616      	mov	r6, r2
 8004eaa:	e7bd      	b.n	8004e28 <_printf_i+0x128>
 8004eac:	6833      	ldr	r3, [r6, #0]
 8004eae:	6825      	ldr	r5, [r4, #0]
 8004eb0:	6961      	ldr	r1, [r4, #20]
 8004eb2:	1d18      	adds	r0, r3, #4
 8004eb4:	6030      	str	r0, [r6, #0]
 8004eb6:	062e      	lsls	r6, r5, #24
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	d501      	bpl.n	8004ec0 <_printf_i+0x1c0>
 8004ebc:	6019      	str	r1, [r3, #0]
 8004ebe:	e002      	b.n	8004ec6 <_printf_i+0x1c6>
 8004ec0:	0668      	lsls	r0, r5, #25
 8004ec2:	d5fb      	bpl.n	8004ebc <_printf_i+0x1bc>
 8004ec4:	8019      	strh	r1, [r3, #0]
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	6123      	str	r3, [r4, #16]
 8004eca:	4616      	mov	r6, r2
 8004ecc:	e7bc      	b.n	8004e48 <_printf_i+0x148>
 8004ece:	6833      	ldr	r3, [r6, #0]
 8004ed0:	1d1a      	adds	r2, r3, #4
 8004ed2:	6032      	str	r2, [r6, #0]
 8004ed4:	681e      	ldr	r6, [r3, #0]
 8004ed6:	6862      	ldr	r2, [r4, #4]
 8004ed8:	2100      	movs	r1, #0
 8004eda:	4630      	mov	r0, r6
 8004edc:	f7fb f9a0 	bl	8000220 <memchr>
 8004ee0:	b108      	cbz	r0, 8004ee6 <_printf_i+0x1e6>
 8004ee2:	1b80      	subs	r0, r0, r6
 8004ee4:	6060      	str	r0, [r4, #4]
 8004ee6:	6863      	ldr	r3, [r4, #4]
 8004ee8:	6123      	str	r3, [r4, #16]
 8004eea:	2300      	movs	r3, #0
 8004eec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ef0:	e7aa      	b.n	8004e48 <_printf_i+0x148>
 8004ef2:	6923      	ldr	r3, [r4, #16]
 8004ef4:	4632      	mov	r2, r6
 8004ef6:	4649      	mov	r1, r9
 8004ef8:	4640      	mov	r0, r8
 8004efa:	47d0      	blx	sl
 8004efc:	3001      	adds	r0, #1
 8004efe:	d0ad      	beq.n	8004e5c <_printf_i+0x15c>
 8004f00:	6823      	ldr	r3, [r4, #0]
 8004f02:	079b      	lsls	r3, r3, #30
 8004f04:	d413      	bmi.n	8004f2e <_printf_i+0x22e>
 8004f06:	68e0      	ldr	r0, [r4, #12]
 8004f08:	9b03      	ldr	r3, [sp, #12]
 8004f0a:	4298      	cmp	r0, r3
 8004f0c:	bfb8      	it	lt
 8004f0e:	4618      	movlt	r0, r3
 8004f10:	e7a6      	b.n	8004e60 <_printf_i+0x160>
 8004f12:	2301      	movs	r3, #1
 8004f14:	4632      	mov	r2, r6
 8004f16:	4649      	mov	r1, r9
 8004f18:	4640      	mov	r0, r8
 8004f1a:	47d0      	blx	sl
 8004f1c:	3001      	adds	r0, #1
 8004f1e:	d09d      	beq.n	8004e5c <_printf_i+0x15c>
 8004f20:	3501      	adds	r5, #1
 8004f22:	68e3      	ldr	r3, [r4, #12]
 8004f24:	9903      	ldr	r1, [sp, #12]
 8004f26:	1a5b      	subs	r3, r3, r1
 8004f28:	42ab      	cmp	r3, r5
 8004f2a:	dcf2      	bgt.n	8004f12 <_printf_i+0x212>
 8004f2c:	e7eb      	b.n	8004f06 <_printf_i+0x206>
 8004f2e:	2500      	movs	r5, #0
 8004f30:	f104 0619 	add.w	r6, r4, #25
 8004f34:	e7f5      	b.n	8004f22 <_printf_i+0x222>
 8004f36:	bf00      	nop
 8004f38:	08005595 	.word	0x08005595
 8004f3c:	080055a6 	.word	0x080055a6

08004f40 <_scanf_chars>:
 8004f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f44:	4615      	mov	r5, r2
 8004f46:	688a      	ldr	r2, [r1, #8]
 8004f48:	4680      	mov	r8, r0
 8004f4a:	460c      	mov	r4, r1
 8004f4c:	b932      	cbnz	r2, 8004f5c <_scanf_chars+0x1c>
 8004f4e:	698a      	ldr	r2, [r1, #24]
 8004f50:	2a00      	cmp	r2, #0
 8004f52:	bf14      	ite	ne
 8004f54:	f04f 32ff 	movne.w	r2, #4294967295
 8004f58:	2201      	moveq	r2, #1
 8004f5a:	608a      	str	r2, [r1, #8]
 8004f5c:	6822      	ldr	r2, [r4, #0]
 8004f5e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8004ff0 <_scanf_chars+0xb0>
 8004f62:	06d1      	lsls	r1, r2, #27
 8004f64:	bf5f      	itttt	pl
 8004f66:	681a      	ldrpl	r2, [r3, #0]
 8004f68:	1d11      	addpl	r1, r2, #4
 8004f6a:	6019      	strpl	r1, [r3, #0]
 8004f6c:	6816      	ldrpl	r6, [r2, #0]
 8004f6e:	2700      	movs	r7, #0
 8004f70:	69a0      	ldr	r0, [r4, #24]
 8004f72:	b188      	cbz	r0, 8004f98 <_scanf_chars+0x58>
 8004f74:	2801      	cmp	r0, #1
 8004f76:	d107      	bne.n	8004f88 <_scanf_chars+0x48>
 8004f78:	682b      	ldr	r3, [r5, #0]
 8004f7a:	781a      	ldrb	r2, [r3, #0]
 8004f7c:	6963      	ldr	r3, [r4, #20]
 8004f7e:	5c9b      	ldrb	r3, [r3, r2]
 8004f80:	b953      	cbnz	r3, 8004f98 <_scanf_chars+0x58>
 8004f82:	2f00      	cmp	r7, #0
 8004f84:	d031      	beq.n	8004fea <_scanf_chars+0xaa>
 8004f86:	e022      	b.n	8004fce <_scanf_chars+0x8e>
 8004f88:	2802      	cmp	r0, #2
 8004f8a:	d120      	bne.n	8004fce <_scanf_chars+0x8e>
 8004f8c:	682b      	ldr	r3, [r5, #0]
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	f819 3003 	ldrb.w	r3, [r9, r3]
 8004f94:	071b      	lsls	r3, r3, #28
 8004f96:	d41a      	bmi.n	8004fce <_scanf_chars+0x8e>
 8004f98:	6823      	ldr	r3, [r4, #0]
 8004f9a:	06da      	lsls	r2, r3, #27
 8004f9c:	bf5e      	ittt	pl
 8004f9e:	682b      	ldrpl	r3, [r5, #0]
 8004fa0:	781b      	ldrbpl	r3, [r3, #0]
 8004fa2:	f806 3b01 	strbpl.w	r3, [r6], #1
 8004fa6:	682a      	ldr	r2, [r5, #0]
 8004fa8:	686b      	ldr	r3, [r5, #4]
 8004faa:	3201      	adds	r2, #1
 8004fac:	602a      	str	r2, [r5, #0]
 8004fae:	68a2      	ldr	r2, [r4, #8]
 8004fb0:	3b01      	subs	r3, #1
 8004fb2:	3a01      	subs	r2, #1
 8004fb4:	606b      	str	r3, [r5, #4]
 8004fb6:	3701      	adds	r7, #1
 8004fb8:	60a2      	str	r2, [r4, #8]
 8004fba:	b142      	cbz	r2, 8004fce <_scanf_chars+0x8e>
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	dcd7      	bgt.n	8004f70 <_scanf_chars+0x30>
 8004fc0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004fc4:	4629      	mov	r1, r5
 8004fc6:	4640      	mov	r0, r8
 8004fc8:	4798      	blx	r3
 8004fca:	2800      	cmp	r0, #0
 8004fcc:	d0d0      	beq.n	8004f70 <_scanf_chars+0x30>
 8004fce:	6823      	ldr	r3, [r4, #0]
 8004fd0:	f013 0310 	ands.w	r3, r3, #16
 8004fd4:	d105      	bne.n	8004fe2 <_scanf_chars+0xa2>
 8004fd6:	68e2      	ldr	r2, [r4, #12]
 8004fd8:	3201      	adds	r2, #1
 8004fda:	60e2      	str	r2, [r4, #12]
 8004fdc:	69a2      	ldr	r2, [r4, #24]
 8004fde:	b102      	cbz	r2, 8004fe2 <_scanf_chars+0xa2>
 8004fe0:	7033      	strb	r3, [r6, #0]
 8004fe2:	6923      	ldr	r3, [r4, #16]
 8004fe4:	443b      	add	r3, r7
 8004fe6:	6123      	str	r3, [r4, #16]
 8004fe8:	2000      	movs	r0, #0
 8004fea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fee:	bf00      	nop
 8004ff0:	080055d3 	.word	0x080055d3

08004ff4 <_scanf_i>:
 8004ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ff8:	4698      	mov	r8, r3
 8004ffa:	4b74      	ldr	r3, [pc, #464]	@ (80051cc <_scanf_i+0x1d8>)
 8004ffc:	460c      	mov	r4, r1
 8004ffe:	4682      	mov	sl, r0
 8005000:	4616      	mov	r6, r2
 8005002:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005006:	b087      	sub	sp, #28
 8005008:	ab03      	add	r3, sp, #12
 800500a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800500e:	4b70      	ldr	r3, [pc, #448]	@ (80051d0 <_scanf_i+0x1dc>)
 8005010:	69a1      	ldr	r1, [r4, #24]
 8005012:	4a70      	ldr	r2, [pc, #448]	@ (80051d4 <_scanf_i+0x1e0>)
 8005014:	2903      	cmp	r1, #3
 8005016:	bf08      	it	eq
 8005018:	461a      	moveq	r2, r3
 800501a:	68a3      	ldr	r3, [r4, #8]
 800501c:	9201      	str	r2, [sp, #4]
 800501e:	1e5a      	subs	r2, r3, #1
 8005020:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005024:	bf88      	it	hi
 8005026:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800502a:	4627      	mov	r7, r4
 800502c:	bf82      	ittt	hi
 800502e:	eb03 0905 	addhi.w	r9, r3, r5
 8005032:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005036:	60a3      	strhi	r3, [r4, #8]
 8005038:	f857 3b1c 	ldr.w	r3, [r7], #28
 800503c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8005040:	bf98      	it	ls
 8005042:	f04f 0900 	movls.w	r9, #0
 8005046:	6023      	str	r3, [r4, #0]
 8005048:	463d      	mov	r5, r7
 800504a:	f04f 0b00 	mov.w	fp, #0
 800504e:	6831      	ldr	r1, [r6, #0]
 8005050:	ab03      	add	r3, sp, #12
 8005052:	7809      	ldrb	r1, [r1, #0]
 8005054:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8005058:	2202      	movs	r2, #2
 800505a:	f7fb f8e1 	bl	8000220 <memchr>
 800505e:	b328      	cbz	r0, 80050ac <_scanf_i+0xb8>
 8005060:	f1bb 0f01 	cmp.w	fp, #1
 8005064:	d159      	bne.n	800511a <_scanf_i+0x126>
 8005066:	6862      	ldr	r2, [r4, #4]
 8005068:	b92a      	cbnz	r2, 8005076 <_scanf_i+0x82>
 800506a:	6822      	ldr	r2, [r4, #0]
 800506c:	2108      	movs	r1, #8
 800506e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005072:	6061      	str	r1, [r4, #4]
 8005074:	6022      	str	r2, [r4, #0]
 8005076:	6822      	ldr	r2, [r4, #0]
 8005078:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800507c:	6022      	str	r2, [r4, #0]
 800507e:	68a2      	ldr	r2, [r4, #8]
 8005080:	1e51      	subs	r1, r2, #1
 8005082:	60a1      	str	r1, [r4, #8]
 8005084:	b192      	cbz	r2, 80050ac <_scanf_i+0xb8>
 8005086:	6832      	ldr	r2, [r6, #0]
 8005088:	1c51      	adds	r1, r2, #1
 800508a:	6031      	str	r1, [r6, #0]
 800508c:	7812      	ldrb	r2, [r2, #0]
 800508e:	f805 2b01 	strb.w	r2, [r5], #1
 8005092:	6872      	ldr	r2, [r6, #4]
 8005094:	3a01      	subs	r2, #1
 8005096:	2a00      	cmp	r2, #0
 8005098:	6072      	str	r2, [r6, #4]
 800509a:	dc07      	bgt.n	80050ac <_scanf_i+0xb8>
 800509c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80050a0:	4631      	mov	r1, r6
 80050a2:	4650      	mov	r0, sl
 80050a4:	4790      	blx	r2
 80050a6:	2800      	cmp	r0, #0
 80050a8:	f040 8085 	bne.w	80051b6 <_scanf_i+0x1c2>
 80050ac:	f10b 0b01 	add.w	fp, fp, #1
 80050b0:	f1bb 0f03 	cmp.w	fp, #3
 80050b4:	d1cb      	bne.n	800504e <_scanf_i+0x5a>
 80050b6:	6863      	ldr	r3, [r4, #4]
 80050b8:	b90b      	cbnz	r3, 80050be <_scanf_i+0xca>
 80050ba:	230a      	movs	r3, #10
 80050bc:	6063      	str	r3, [r4, #4]
 80050be:	6863      	ldr	r3, [r4, #4]
 80050c0:	4945      	ldr	r1, [pc, #276]	@ (80051d8 <_scanf_i+0x1e4>)
 80050c2:	6960      	ldr	r0, [r4, #20]
 80050c4:	1ac9      	subs	r1, r1, r3
 80050c6:	f000 f889 	bl	80051dc <__sccl>
 80050ca:	f04f 0b00 	mov.w	fp, #0
 80050ce:	68a3      	ldr	r3, [r4, #8]
 80050d0:	6822      	ldr	r2, [r4, #0]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d03d      	beq.n	8005152 <_scanf_i+0x15e>
 80050d6:	6831      	ldr	r1, [r6, #0]
 80050d8:	6960      	ldr	r0, [r4, #20]
 80050da:	f891 c000 	ldrb.w	ip, [r1]
 80050de:	f810 000c 	ldrb.w	r0, [r0, ip]
 80050e2:	2800      	cmp	r0, #0
 80050e4:	d035      	beq.n	8005152 <_scanf_i+0x15e>
 80050e6:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80050ea:	d124      	bne.n	8005136 <_scanf_i+0x142>
 80050ec:	0510      	lsls	r0, r2, #20
 80050ee:	d522      	bpl.n	8005136 <_scanf_i+0x142>
 80050f0:	f10b 0b01 	add.w	fp, fp, #1
 80050f4:	f1b9 0f00 	cmp.w	r9, #0
 80050f8:	d003      	beq.n	8005102 <_scanf_i+0x10e>
 80050fa:	3301      	adds	r3, #1
 80050fc:	f109 39ff 	add.w	r9, r9, #4294967295
 8005100:	60a3      	str	r3, [r4, #8]
 8005102:	6873      	ldr	r3, [r6, #4]
 8005104:	3b01      	subs	r3, #1
 8005106:	2b00      	cmp	r3, #0
 8005108:	6073      	str	r3, [r6, #4]
 800510a:	dd1b      	ble.n	8005144 <_scanf_i+0x150>
 800510c:	6833      	ldr	r3, [r6, #0]
 800510e:	3301      	adds	r3, #1
 8005110:	6033      	str	r3, [r6, #0]
 8005112:	68a3      	ldr	r3, [r4, #8]
 8005114:	3b01      	subs	r3, #1
 8005116:	60a3      	str	r3, [r4, #8]
 8005118:	e7d9      	b.n	80050ce <_scanf_i+0xda>
 800511a:	f1bb 0f02 	cmp.w	fp, #2
 800511e:	d1ae      	bne.n	800507e <_scanf_i+0x8a>
 8005120:	6822      	ldr	r2, [r4, #0]
 8005122:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8005126:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800512a:	d1bf      	bne.n	80050ac <_scanf_i+0xb8>
 800512c:	2110      	movs	r1, #16
 800512e:	6061      	str	r1, [r4, #4]
 8005130:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005134:	e7a2      	b.n	800507c <_scanf_i+0x88>
 8005136:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800513a:	6022      	str	r2, [r4, #0]
 800513c:	780b      	ldrb	r3, [r1, #0]
 800513e:	f805 3b01 	strb.w	r3, [r5], #1
 8005142:	e7de      	b.n	8005102 <_scanf_i+0x10e>
 8005144:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005148:	4631      	mov	r1, r6
 800514a:	4650      	mov	r0, sl
 800514c:	4798      	blx	r3
 800514e:	2800      	cmp	r0, #0
 8005150:	d0df      	beq.n	8005112 <_scanf_i+0x11e>
 8005152:	6823      	ldr	r3, [r4, #0]
 8005154:	05d9      	lsls	r1, r3, #23
 8005156:	d50d      	bpl.n	8005174 <_scanf_i+0x180>
 8005158:	42bd      	cmp	r5, r7
 800515a:	d909      	bls.n	8005170 <_scanf_i+0x17c>
 800515c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005160:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005164:	4632      	mov	r2, r6
 8005166:	4650      	mov	r0, sl
 8005168:	4798      	blx	r3
 800516a:	f105 39ff 	add.w	r9, r5, #4294967295
 800516e:	464d      	mov	r5, r9
 8005170:	42bd      	cmp	r5, r7
 8005172:	d028      	beq.n	80051c6 <_scanf_i+0x1d2>
 8005174:	6822      	ldr	r2, [r4, #0]
 8005176:	f012 0210 	ands.w	r2, r2, #16
 800517a:	d113      	bne.n	80051a4 <_scanf_i+0x1b0>
 800517c:	702a      	strb	r2, [r5, #0]
 800517e:	6863      	ldr	r3, [r4, #4]
 8005180:	9e01      	ldr	r6, [sp, #4]
 8005182:	4639      	mov	r1, r7
 8005184:	4650      	mov	r0, sl
 8005186:	47b0      	blx	r6
 8005188:	f8d8 3000 	ldr.w	r3, [r8]
 800518c:	6821      	ldr	r1, [r4, #0]
 800518e:	1d1a      	adds	r2, r3, #4
 8005190:	f8c8 2000 	str.w	r2, [r8]
 8005194:	f011 0f20 	tst.w	r1, #32
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	d00f      	beq.n	80051bc <_scanf_i+0x1c8>
 800519c:	6018      	str	r0, [r3, #0]
 800519e:	68e3      	ldr	r3, [r4, #12]
 80051a0:	3301      	adds	r3, #1
 80051a2:	60e3      	str	r3, [r4, #12]
 80051a4:	6923      	ldr	r3, [r4, #16]
 80051a6:	1bed      	subs	r5, r5, r7
 80051a8:	445d      	add	r5, fp
 80051aa:	442b      	add	r3, r5
 80051ac:	6123      	str	r3, [r4, #16]
 80051ae:	2000      	movs	r0, #0
 80051b0:	b007      	add	sp, #28
 80051b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051b6:	f04f 0b00 	mov.w	fp, #0
 80051ba:	e7ca      	b.n	8005152 <_scanf_i+0x15e>
 80051bc:	07ca      	lsls	r2, r1, #31
 80051be:	bf4c      	ite	mi
 80051c0:	8018      	strhmi	r0, [r3, #0]
 80051c2:	6018      	strpl	r0, [r3, #0]
 80051c4:	e7eb      	b.n	800519e <_scanf_i+0x1aa>
 80051c6:	2001      	movs	r0, #1
 80051c8:	e7f2      	b.n	80051b0 <_scanf_i+0x1bc>
 80051ca:	bf00      	nop
 80051cc:	08005560 	.word	0x08005560
 80051d0:	080053ed 	.word	0x080053ed
 80051d4:	080054cd 	.word	0x080054cd
 80051d8:	080055c7 	.word	0x080055c7

080051dc <__sccl>:
 80051dc:	b570      	push	{r4, r5, r6, lr}
 80051de:	780b      	ldrb	r3, [r1, #0]
 80051e0:	4604      	mov	r4, r0
 80051e2:	2b5e      	cmp	r3, #94	@ 0x5e
 80051e4:	bf0b      	itete	eq
 80051e6:	784b      	ldrbeq	r3, [r1, #1]
 80051e8:	1c4a      	addne	r2, r1, #1
 80051ea:	1c8a      	addeq	r2, r1, #2
 80051ec:	2100      	movne	r1, #0
 80051ee:	bf08      	it	eq
 80051f0:	2101      	moveq	r1, #1
 80051f2:	3801      	subs	r0, #1
 80051f4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80051f8:	f800 1f01 	strb.w	r1, [r0, #1]!
 80051fc:	42a8      	cmp	r0, r5
 80051fe:	d1fb      	bne.n	80051f8 <__sccl+0x1c>
 8005200:	b90b      	cbnz	r3, 8005206 <__sccl+0x2a>
 8005202:	1e50      	subs	r0, r2, #1
 8005204:	bd70      	pop	{r4, r5, r6, pc}
 8005206:	f081 0101 	eor.w	r1, r1, #1
 800520a:	54e1      	strb	r1, [r4, r3]
 800520c:	4610      	mov	r0, r2
 800520e:	4602      	mov	r2, r0
 8005210:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005214:	2d2d      	cmp	r5, #45	@ 0x2d
 8005216:	d005      	beq.n	8005224 <__sccl+0x48>
 8005218:	2d5d      	cmp	r5, #93	@ 0x5d
 800521a:	d016      	beq.n	800524a <__sccl+0x6e>
 800521c:	2d00      	cmp	r5, #0
 800521e:	d0f1      	beq.n	8005204 <__sccl+0x28>
 8005220:	462b      	mov	r3, r5
 8005222:	e7f2      	b.n	800520a <__sccl+0x2e>
 8005224:	7846      	ldrb	r6, [r0, #1]
 8005226:	2e5d      	cmp	r6, #93	@ 0x5d
 8005228:	d0fa      	beq.n	8005220 <__sccl+0x44>
 800522a:	42b3      	cmp	r3, r6
 800522c:	dcf8      	bgt.n	8005220 <__sccl+0x44>
 800522e:	3002      	adds	r0, #2
 8005230:	461a      	mov	r2, r3
 8005232:	3201      	adds	r2, #1
 8005234:	4296      	cmp	r6, r2
 8005236:	54a1      	strb	r1, [r4, r2]
 8005238:	dcfb      	bgt.n	8005232 <__sccl+0x56>
 800523a:	1af2      	subs	r2, r6, r3
 800523c:	3a01      	subs	r2, #1
 800523e:	1c5d      	adds	r5, r3, #1
 8005240:	42b3      	cmp	r3, r6
 8005242:	bfa8      	it	ge
 8005244:	2200      	movge	r2, #0
 8005246:	18ab      	adds	r3, r5, r2
 8005248:	e7e1      	b.n	800520e <__sccl+0x32>
 800524a:	4610      	mov	r0, r2
 800524c:	e7da      	b.n	8005204 <__sccl+0x28>

0800524e <__submore>:
 800524e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005252:	460c      	mov	r4, r1
 8005254:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8005256:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800525a:	4299      	cmp	r1, r3
 800525c:	d11d      	bne.n	800529a <__submore+0x4c>
 800525e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005262:	f7fe fff3 	bl	800424c <_malloc_r>
 8005266:	b918      	cbnz	r0, 8005270 <__submore+0x22>
 8005268:	f04f 30ff 	mov.w	r0, #4294967295
 800526c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005270:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005274:	63a3      	str	r3, [r4, #56]	@ 0x38
 8005276:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800527a:	6360      	str	r0, [r4, #52]	@ 0x34
 800527c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8005280:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8005284:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8005288:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800528c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8005290:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8005294:	6020      	str	r0, [r4, #0]
 8005296:	2000      	movs	r0, #0
 8005298:	e7e8      	b.n	800526c <__submore+0x1e>
 800529a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800529c:	0077      	lsls	r7, r6, #1
 800529e:	463a      	mov	r2, r7
 80052a0:	f7ff f868 	bl	8004374 <_realloc_r>
 80052a4:	4605      	mov	r5, r0
 80052a6:	2800      	cmp	r0, #0
 80052a8:	d0de      	beq.n	8005268 <__submore+0x1a>
 80052aa:	eb00 0806 	add.w	r8, r0, r6
 80052ae:	4601      	mov	r1, r0
 80052b0:	4632      	mov	r2, r6
 80052b2:	4640      	mov	r0, r8
 80052b4:	f7ff f932 	bl	800451c <memcpy>
 80052b8:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80052bc:	f8c4 8000 	str.w	r8, [r4]
 80052c0:	e7e9      	b.n	8005296 <__submore+0x48>

080052c2 <memmove>:
 80052c2:	4288      	cmp	r0, r1
 80052c4:	b510      	push	{r4, lr}
 80052c6:	eb01 0402 	add.w	r4, r1, r2
 80052ca:	d902      	bls.n	80052d2 <memmove+0x10>
 80052cc:	4284      	cmp	r4, r0
 80052ce:	4623      	mov	r3, r4
 80052d0:	d807      	bhi.n	80052e2 <memmove+0x20>
 80052d2:	1e43      	subs	r3, r0, #1
 80052d4:	42a1      	cmp	r1, r4
 80052d6:	d008      	beq.n	80052ea <memmove+0x28>
 80052d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80052dc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80052e0:	e7f8      	b.n	80052d4 <memmove+0x12>
 80052e2:	4402      	add	r2, r0
 80052e4:	4601      	mov	r1, r0
 80052e6:	428a      	cmp	r2, r1
 80052e8:	d100      	bne.n	80052ec <memmove+0x2a>
 80052ea:	bd10      	pop	{r4, pc}
 80052ec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80052f0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80052f4:	e7f7      	b.n	80052e6 <memmove+0x24>
	...

080052f8 <_strtol_l.constprop.0>:
 80052f8:	2b24      	cmp	r3, #36	@ 0x24
 80052fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052fe:	4686      	mov	lr, r0
 8005300:	4690      	mov	r8, r2
 8005302:	d801      	bhi.n	8005308 <_strtol_l.constprop.0+0x10>
 8005304:	2b01      	cmp	r3, #1
 8005306:	d106      	bne.n	8005316 <_strtol_l.constprop.0+0x1e>
 8005308:	f7ff f8dc 	bl	80044c4 <__errno>
 800530c:	2316      	movs	r3, #22
 800530e:	6003      	str	r3, [r0, #0]
 8005310:	2000      	movs	r0, #0
 8005312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005316:	4834      	ldr	r0, [pc, #208]	@ (80053e8 <_strtol_l.constprop.0+0xf0>)
 8005318:	460d      	mov	r5, r1
 800531a:	462a      	mov	r2, r5
 800531c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005320:	5d06      	ldrb	r6, [r0, r4]
 8005322:	f016 0608 	ands.w	r6, r6, #8
 8005326:	d1f8      	bne.n	800531a <_strtol_l.constprop.0+0x22>
 8005328:	2c2d      	cmp	r4, #45	@ 0x2d
 800532a:	d12d      	bne.n	8005388 <_strtol_l.constprop.0+0x90>
 800532c:	782c      	ldrb	r4, [r5, #0]
 800532e:	2601      	movs	r6, #1
 8005330:	1c95      	adds	r5, r2, #2
 8005332:	f033 0210 	bics.w	r2, r3, #16
 8005336:	d109      	bne.n	800534c <_strtol_l.constprop.0+0x54>
 8005338:	2c30      	cmp	r4, #48	@ 0x30
 800533a:	d12a      	bne.n	8005392 <_strtol_l.constprop.0+0x9a>
 800533c:	782a      	ldrb	r2, [r5, #0]
 800533e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005342:	2a58      	cmp	r2, #88	@ 0x58
 8005344:	d125      	bne.n	8005392 <_strtol_l.constprop.0+0x9a>
 8005346:	786c      	ldrb	r4, [r5, #1]
 8005348:	2310      	movs	r3, #16
 800534a:	3502      	adds	r5, #2
 800534c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005350:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005354:	2200      	movs	r2, #0
 8005356:	fbbc f9f3 	udiv	r9, ip, r3
 800535a:	4610      	mov	r0, r2
 800535c:	fb03 ca19 	mls	sl, r3, r9, ip
 8005360:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005364:	2f09      	cmp	r7, #9
 8005366:	d81b      	bhi.n	80053a0 <_strtol_l.constprop.0+0xa8>
 8005368:	463c      	mov	r4, r7
 800536a:	42a3      	cmp	r3, r4
 800536c:	dd27      	ble.n	80053be <_strtol_l.constprop.0+0xc6>
 800536e:	1c57      	adds	r7, r2, #1
 8005370:	d007      	beq.n	8005382 <_strtol_l.constprop.0+0x8a>
 8005372:	4581      	cmp	r9, r0
 8005374:	d320      	bcc.n	80053b8 <_strtol_l.constprop.0+0xc0>
 8005376:	d101      	bne.n	800537c <_strtol_l.constprop.0+0x84>
 8005378:	45a2      	cmp	sl, r4
 800537a:	db1d      	blt.n	80053b8 <_strtol_l.constprop.0+0xc0>
 800537c:	fb00 4003 	mla	r0, r0, r3, r4
 8005380:	2201      	movs	r2, #1
 8005382:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005386:	e7eb      	b.n	8005360 <_strtol_l.constprop.0+0x68>
 8005388:	2c2b      	cmp	r4, #43	@ 0x2b
 800538a:	bf04      	itt	eq
 800538c:	782c      	ldrbeq	r4, [r5, #0]
 800538e:	1c95      	addeq	r5, r2, #2
 8005390:	e7cf      	b.n	8005332 <_strtol_l.constprop.0+0x3a>
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1da      	bne.n	800534c <_strtol_l.constprop.0+0x54>
 8005396:	2c30      	cmp	r4, #48	@ 0x30
 8005398:	bf0c      	ite	eq
 800539a:	2308      	moveq	r3, #8
 800539c:	230a      	movne	r3, #10
 800539e:	e7d5      	b.n	800534c <_strtol_l.constprop.0+0x54>
 80053a0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80053a4:	2f19      	cmp	r7, #25
 80053a6:	d801      	bhi.n	80053ac <_strtol_l.constprop.0+0xb4>
 80053a8:	3c37      	subs	r4, #55	@ 0x37
 80053aa:	e7de      	b.n	800536a <_strtol_l.constprop.0+0x72>
 80053ac:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80053b0:	2f19      	cmp	r7, #25
 80053b2:	d804      	bhi.n	80053be <_strtol_l.constprop.0+0xc6>
 80053b4:	3c57      	subs	r4, #87	@ 0x57
 80053b6:	e7d8      	b.n	800536a <_strtol_l.constprop.0+0x72>
 80053b8:	f04f 32ff 	mov.w	r2, #4294967295
 80053bc:	e7e1      	b.n	8005382 <_strtol_l.constprop.0+0x8a>
 80053be:	1c53      	adds	r3, r2, #1
 80053c0:	d108      	bne.n	80053d4 <_strtol_l.constprop.0+0xdc>
 80053c2:	2322      	movs	r3, #34	@ 0x22
 80053c4:	f8ce 3000 	str.w	r3, [lr]
 80053c8:	4660      	mov	r0, ip
 80053ca:	f1b8 0f00 	cmp.w	r8, #0
 80053ce:	d0a0      	beq.n	8005312 <_strtol_l.constprop.0+0x1a>
 80053d0:	1e69      	subs	r1, r5, #1
 80053d2:	e006      	b.n	80053e2 <_strtol_l.constprop.0+0xea>
 80053d4:	b106      	cbz	r6, 80053d8 <_strtol_l.constprop.0+0xe0>
 80053d6:	4240      	negs	r0, r0
 80053d8:	f1b8 0f00 	cmp.w	r8, #0
 80053dc:	d099      	beq.n	8005312 <_strtol_l.constprop.0+0x1a>
 80053de:	2a00      	cmp	r2, #0
 80053e0:	d1f6      	bne.n	80053d0 <_strtol_l.constprop.0+0xd8>
 80053e2:	f8c8 1000 	str.w	r1, [r8]
 80053e6:	e794      	b.n	8005312 <_strtol_l.constprop.0+0x1a>
 80053e8:	080055d3 	.word	0x080055d3

080053ec <_strtol_r>:
 80053ec:	f7ff bf84 	b.w	80052f8 <_strtol_l.constprop.0>

080053f0 <_strtoul_l.constprop.0>:
 80053f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80053f4:	4e34      	ldr	r6, [pc, #208]	@ (80054c8 <_strtoul_l.constprop.0+0xd8>)
 80053f6:	4686      	mov	lr, r0
 80053f8:	460d      	mov	r5, r1
 80053fa:	4628      	mov	r0, r5
 80053fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005400:	5d37      	ldrb	r7, [r6, r4]
 8005402:	f017 0708 	ands.w	r7, r7, #8
 8005406:	d1f8      	bne.n	80053fa <_strtoul_l.constprop.0+0xa>
 8005408:	2c2d      	cmp	r4, #45	@ 0x2d
 800540a:	d12f      	bne.n	800546c <_strtoul_l.constprop.0+0x7c>
 800540c:	782c      	ldrb	r4, [r5, #0]
 800540e:	2701      	movs	r7, #1
 8005410:	1c85      	adds	r5, r0, #2
 8005412:	f033 0010 	bics.w	r0, r3, #16
 8005416:	d109      	bne.n	800542c <_strtoul_l.constprop.0+0x3c>
 8005418:	2c30      	cmp	r4, #48	@ 0x30
 800541a:	d12c      	bne.n	8005476 <_strtoul_l.constprop.0+0x86>
 800541c:	7828      	ldrb	r0, [r5, #0]
 800541e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8005422:	2858      	cmp	r0, #88	@ 0x58
 8005424:	d127      	bne.n	8005476 <_strtoul_l.constprop.0+0x86>
 8005426:	786c      	ldrb	r4, [r5, #1]
 8005428:	2310      	movs	r3, #16
 800542a:	3502      	adds	r5, #2
 800542c:	f04f 38ff 	mov.w	r8, #4294967295
 8005430:	2600      	movs	r6, #0
 8005432:	fbb8 f8f3 	udiv	r8, r8, r3
 8005436:	fb03 f908 	mul.w	r9, r3, r8
 800543a:	ea6f 0909 	mvn.w	r9, r9
 800543e:	4630      	mov	r0, r6
 8005440:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8005444:	f1bc 0f09 	cmp.w	ip, #9
 8005448:	d81c      	bhi.n	8005484 <_strtoul_l.constprop.0+0x94>
 800544a:	4664      	mov	r4, ip
 800544c:	42a3      	cmp	r3, r4
 800544e:	dd2a      	ble.n	80054a6 <_strtoul_l.constprop.0+0xb6>
 8005450:	f1b6 3fff 	cmp.w	r6, #4294967295
 8005454:	d007      	beq.n	8005466 <_strtoul_l.constprop.0+0x76>
 8005456:	4580      	cmp	r8, r0
 8005458:	d322      	bcc.n	80054a0 <_strtoul_l.constprop.0+0xb0>
 800545a:	d101      	bne.n	8005460 <_strtoul_l.constprop.0+0x70>
 800545c:	45a1      	cmp	r9, r4
 800545e:	db1f      	blt.n	80054a0 <_strtoul_l.constprop.0+0xb0>
 8005460:	fb00 4003 	mla	r0, r0, r3, r4
 8005464:	2601      	movs	r6, #1
 8005466:	f815 4b01 	ldrb.w	r4, [r5], #1
 800546a:	e7e9      	b.n	8005440 <_strtoul_l.constprop.0+0x50>
 800546c:	2c2b      	cmp	r4, #43	@ 0x2b
 800546e:	bf04      	itt	eq
 8005470:	782c      	ldrbeq	r4, [r5, #0]
 8005472:	1c85      	addeq	r5, r0, #2
 8005474:	e7cd      	b.n	8005412 <_strtoul_l.constprop.0+0x22>
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1d8      	bne.n	800542c <_strtoul_l.constprop.0+0x3c>
 800547a:	2c30      	cmp	r4, #48	@ 0x30
 800547c:	bf0c      	ite	eq
 800547e:	2308      	moveq	r3, #8
 8005480:	230a      	movne	r3, #10
 8005482:	e7d3      	b.n	800542c <_strtoul_l.constprop.0+0x3c>
 8005484:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8005488:	f1bc 0f19 	cmp.w	ip, #25
 800548c:	d801      	bhi.n	8005492 <_strtoul_l.constprop.0+0xa2>
 800548e:	3c37      	subs	r4, #55	@ 0x37
 8005490:	e7dc      	b.n	800544c <_strtoul_l.constprop.0+0x5c>
 8005492:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8005496:	f1bc 0f19 	cmp.w	ip, #25
 800549a:	d804      	bhi.n	80054a6 <_strtoul_l.constprop.0+0xb6>
 800549c:	3c57      	subs	r4, #87	@ 0x57
 800549e:	e7d5      	b.n	800544c <_strtoul_l.constprop.0+0x5c>
 80054a0:	f04f 36ff 	mov.w	r6, #4294967295
 80054a4:	e7df      	b.n	8005466 <_strtoul_l.constprop.0+0x76>
 80054a6:	1c73      	adds	r3, r6, #1
 80054a8:	d106      	bne.n	80054b8 <_strtoul_l.constprop.0+0xc8>
 80054aa:	2322      	movs	r3, #34	@ 0x22
 80054ac:	f8ce 3000 	str.w	r3, [lr]
 80054b0:	4630      	mov	r0, r6
 80054b2:	b932      	cbnz	r2, 80054c2 <_strtoul_l.constprop.0+0xd2>
 80054b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80054b8:	b107      	cbz	r7, 80054bc <_strtoul_l.constprop.0+0xcc>
 80054ba:	4240      	negs	r0, r0
 80054bc:	2a00      	cmp	r2, #0
 80054be:	d0f9      	beq.n	80054b4 <_strtoul_l.constprop.0+0xc4>
 80054c0:	b106      	cbz	r6, 80054c4 <_strtoul_l.constprop.0+0xd4>
 80054c2:	1e69      	subs	r1, r5, #1
 80054c4:	6011      	str	r1, [r2, #0]
 80054c6:	e7f5      	b.n	80054b4 <_strtoul_l.constprop.0+0xc4>
 80054c8:	080055d3 	.word	0x080055d3

080054cc <_strtoul_r>:
 80054cc:	f7ff bf90 	b.w	80053f0 <_strtoul_l.constprop.0>

080054d0 <_init>:
 80054d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054d2:	bf00      	nop
 80054d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054d6:	bc08      	pop	{r3}
 80054d8:	469e      	mov	lr, r3
 80054da:	4770      	bx	lr

080054dc <_fini>:
 80054dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054de:	bf00      	nop
 80054e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054e2:	bc08      	pop	{r3}
 80054e4:	469e      	mov	lr, r3
 80054e6:	4770      	bx	lr
